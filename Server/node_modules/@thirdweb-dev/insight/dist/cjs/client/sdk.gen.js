"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getV1WalletsByWalletAddressTransactions = exports.getV1NftsMetadataRefreshByContractAddressByTokenId = exports.getV1NftsMetadataRefreshByContractAddress = exports.getV1NftsByContractAddressByTokenId = exports.getV1NftsTransfersByContractAddressByTokenId = exports.getV1NftsByContractAddress = exports.getV1NftsTransfersByContractAddress = exports.getV1NftsTransfersTransactionByTransactionHash = exports.getV1NftsTransfers = exports.getV1NftsOwnersByContractAddressByTokenId = exports.getV1NftsOwnersByContractAddress = exports.getV1Nfts = exports.getV1NftsCollectionsByContractAddress = exports.getV1NftsBalanceByOwnerAddress = exports.postV1DecodeByContractAddress = exports.getV1ContractsMetadataByContractAddress = exports.getV1ContractsAbiByContractAddress = exports.getV1Blocks = exports.getV1ResolveByInput = exports.getV1TokensLookup = exports.getV1TokensPrice = exports.getV1TokensPriceSupported = exports.getV1TokensErc1155ByOwnerAddress = exports.getV1TokensErc721ByOwnerAddress = exports.getV1TokensErc20ByOwnerAddress = exports.getV1TokensTransfers = exports.getV1TokensTransfersByContractAddress = exports.getV1TokensTransfersTransactionByTransactionHash = exports.getV1TransactionsByContractAddressBySignature = exports.getV1TransactionsByContractAddress = exports.getV1Transactions = exports.getV1EventsByContractAddressBySignature = exports.getV1EventsByContractAddress = exports.getV1Events = exports.postV1WebhooksTest = exports.postV1WebhooksByWebhookIdResendOtp = exports.postV1WebhooksByWebhookIdVerify = exports.patchV1WebhooksByWebhookId = exports.deleteV1WebhooksByWebhookId = exports.postV1Webhooks = exports.getV1Webhooks = void 0;
const client_gen_js_1 = require("./client.gen.js");
/**
 * Get webhooks
 * Get a list of webhooks or a single webhook by ID
 */
const getV1Webhooks = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks",
        ...options,
    });
};
exports.getV1Webhooks = getV1Webhooks;
/**
 * Create webhook
 * Create a new webhook. The webhook will start out as suspended and an OTP code will be sent to the webhook URL. This OTP code must be verified using the Verify Webhook endpoint within 15 minutes.
 */
const postV1Webhooks = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.postV1Webhooks = postV1Webhooks;
/**
 * Delete webhook
 * Delete a webhook. This action cannot be undone.
 */
const deleteV1WebhooksByWebhookId = (options) => {
    return (options.client ?? client_gen_js_1.client).delete({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks/{webhook_id}",
        ...options,
    });
};
exports.deleteV1WebhooksByWebhookId = deleteV1WebhooksByWebhookId;
/**
 * Update webhook
 * Update a webhook. If the URL is updated, it needs to verified again the same way as when creating a webhook.
 */
const patchV1WebhooksByWebhookId = (options) => {
    return (options.client ?? client_gen_js_1.client).patch({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks/{webhook_id}",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.patchV1WebhooksByWebhookId = patchV1WebhooksByWebhookId;
/**
 * Verify webhook
 * Verify a webhook using a OTP code that was sent to the webhook URL. The webhook will be activated after verification.
 */
const postV1WebhooksByWebhookIdVerify = (options) => {
    return (options.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks/{webhook_id}/verify",
        ...options,
    });
};
exports.postV1WebhooksByWebhookIdVerify = postV1WebhooksByWebhookIdVerify;
/**
 * Resend OTP code
 * Resend a OTP code to the webhook URL. This will invalidate the old OTP and will again expire after 15 minutes.
 */
const postV1WebhooksByWebhookIdResendOtp = (options) => {
    return (options.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks/{webhook_id}/resend-otp",
        ...options,
    });
};
exports.postV1WebhooksByWebhookIdResendOtp = postV1WebhooksByWebhookIdResendOtp;
/**
 * Test webhook
 * Test your webhook URL. This will send a test event to the webhook URL signed with an example secret 'test123'. NB! The payload does not necessarily match your webhook filters. You can however use it to test signature verification and payload format handling.
 */
const postV1WebhooksTest = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/webhooks/test",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.postV1WebhooksTest = postV1WebhooksTest;
/**
 * Get events
 * Get events
 */
const getV1Events = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/events",
        ...options,
    });
};
exports.getV1Events = getV1Events;
/**
 * Get contract events
 * Get contract events
 */
const getV1EventsByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/events/{contractAddress}",
        ...options,
    });
};
exports.getV1EventsByContractAddress = getV1EventsByContractAddress;
/**
 * Get contract events with specific signature
 * Get specific contract events
 */
const getV1EventsByContractAddressBySignature = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/events/{contractAddress}/{signature}",
        ...options,
    });
};
exports.getV1EventsByContractAddressBySignature = getV1EventsByContractAddressBySignature;
/**
 * Get transactions
 * Get transactions
 */
const getV1Transactions = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions",
        ...options,
    });
};
exports.getV1Transactions = getV1Transactions;
/**
 * Get contract transactions
 * Get contract transactions
 */
const getV1TransactionsByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/{contractAddress}",
        ...options,
    });
};
exports.getV1TransactionsByContractAddress = getV1TransactionsByContractAddress;
/**
 * Get contract transactions with specific signature
 * Get specific contract transactions
 */
const getV1TransactionsByContractAddressBySignature = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/{contractAddress}/{signature}",
        ...options,
    });
};
exports.getV1TransactionsByContractAddressBySignature = getV1TransactionsByContractAddressBySignature;
/**
 * Get token transfers by transaction
 * Get token transfers by transaction
 */
const getV1TokensTransfersTransactionByTransactionHash = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/transfers/transaction/{transaction_hash}",
        ...options,
    });
};
exports.getV1TokensTransfersTransactionByTransactionHash = getV1TokensTransfersTransactionByTransactionHash;
/**
 * Get token transfers by contract
 * Get token transfers by contract
 */
const getV1TokensTransfersByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/transfers/{contract_address}",
        ...options,
    });
};
exports.getV1TokensTransfersByContractAddress = getV1TokensTransfersByContractAddress;
/**
 * Get token transfers by wallet address
 * Get token transfers by wallet address
 */
const getV1TokensTransfers = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/transfers",
        ...options,
    });
};
exports.getV1TokensTransfers = getV1TokensTransfers;
/**
 * Get ERC-20 balances by address
 * Get ERC-20 balances for a given address
 */
const getV1TokensErc20ByOwnerAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/erc20/{ownerAddress}",
        ...options,
    });
};
exports.getV1TokensErc20ByOwnerAddress = getV1TokensErc20ByOwnerAddress;
/**
 * @deprecated
 * Get ERC-721 balances by address
 * Get ERC-721 (NFT) balances for a given address [BEING DEPRECATED IN FAVOR OF /nfts/balance]
 */
const getV1TokensErc721ByOwnerAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/erc721/{ownerAddress}",
        ...options,
    });
};
exports.getV1TokensErc721ByOwnerAddress = getV1TokensErc721ByOwnerAddress;
/**
 * @deprecated
 * Get ERC-1155 balances by address
 * Get ERC-1155 (Multi Token) balances for a given address [BEING DEPRECATED IN FAVOR OF /nfts/balance]
 */
const getV1TokensErc1155ByOwnerAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/erc1155/{ownerAddress}",
        ...options,
    });
};
exports.getV1TokensErc1155ByOwnerAddress = getV1TokensErc1155ByOwnerAddress;
/**
 * Get supported tokens for price data
 * Get supported tokens for price data
 */
const getV1TokensPriceSupported = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/price/supported",
        ...options,
    });
};
exports.getV1TokensPriceSupported = getV1TokensPriceSupported;
/**
 * Get token price
 * Get price in USD for given token(s)
 */
const getV1TokensPrice = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/price",
        ...options,
    });
};
exports.getV1TokensPrice = getV1TokensPrice;
/**
 * Token lookup
 * Look up a fungible token by symbol
 */
const getV1TokensLookup = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/tokens/lookup",
        ...options,
    });
};
exports.getV1TokensLookup = getV1TokensLookup;
/**
 * Resolve
 * Resolve
 */
const getV1ResolveByInput = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/resolve/{input}",
        ...options,
    });
};
exports.getV1ResolveByInput = getV1ResolveByInput;
/**
 * Get blocks
 * Get blocks
 */
const getV1Blocks = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/blocks",
        ...options,
    });
};
exports.getV1Blocks = getV1Blocks;
/**
 * Get contract ABI​
 * Get contract ABI​
 */
const getV1ContractsAbiByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/contracts/abi/{contractAddress}",
        ...options,
    });
};
exports.getV1ContractsAbiByContractAddress = getV1ContractsAbiByContractAddress;
/**
 * Get contract metadata​
 * Get contract metadata​
 */
const getV1ContractsMetadataByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/contracts/metadata/{contractAddress}",
        ...options,
    });
};
exports.getV1ContractsMetadataByContractAddress = getV1ContractsMetadataByContractAddress;
/**
 * Decode logs and transactions​
 * Decode logs and transactions​
 */
const postV1DecodeByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/decode/{contractAddress}",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.postV1DecodeByContractAddress = postV1DecodeByContractAddress;
/**
 * Get NFT balances by address
 * Get NFT balances for a given address
 */
const getV1NftsBalanceByOwnerAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/balance/{ownerAddress}",
        ...options,
    });
};
exports.getV1NftsBalanceByOwnerAddress = getV1NftsBalanceByOwnerAddress;
/**
 * Get collection
 * Retrieve metadata about a collection
 */
const getV1NftsCollectionsByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/collections/{contract_address}",
        ...options,
    });
};
exports.getV1NftsCollectionsByContractAddress = getV1NftsCollectionsByContractAddress;
/**
 * Get NFTs by owner
 * Get NFTs by owner
 */
const getV1Nfts = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts",
        ...options,
    });
};
exports.getV1Nfts = getV1Nfts;
/**
 * Get NFT owners by contract
 * Get NFT owners by contract
 */
const getV1NftsOwnersByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/owners/{contract_address}",
        ...options,
    });
};
exports.getV1NftsOwnersByContractAddress = getV1NftsOwnersByContractAddress;
/**
 * Get NFT owners by token
 * Get NFT owners by token
 */
const getV1NftsOwnersByContractAddressByTokenId = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/owners/{contract_address}/{token_id}",
        ...options,
    });
};
exports.getV1NftsOwnersByContractAddressByTokenId = getV1NftsOwnersByContractAddressByTokenId;
/**
 * Get NFT transfers by owner
 * Get NFT transfers by owner
 */
const getV1NftsTransfers = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/transfers",
        ...options,
    });
};
exports.getV1NftsTransfers = getV1NftsTransfers;
/**
 * Get NFT transfers by transaction
 * Get NFT transfers by transaction
 */
const getV1NftsTransfersTransactionByTransactionHash = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/transfers/transaction/{transaction_hash}",
        ...options,
    });
};
exports.getV1NftsTransfersTransactionByTransactionHash = getV1NftsTransfersTransactionByTransactionHash;
/**
 * Get NFT transfers by contract
 * Get NFT transfers by contract
 */
const getV1NftsTransfersByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/transfers/{contract_address}",
        ...options,
    });
};
exports.getV1NftsTransfersByContractAddress = getV1NftsTransfersByContractAddress;
/**
 * Get NFTs by contract
 * Get NFTs by contract
 */
const getV1NftsByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/{contract_address}",
        ...options,
    });
};
exports.getV1NftsByContractAddress = getV1NftsByContractAddress;
/**
 * Get NFT transfers by token
 * Get NFT transfers by token
 */
const getV1NftsTransfersByContractAddressByTokenId = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/transfers/{contract_address}/{token_id}",
        ...options,
    });
};
exports.getV1NftsTransfersByContractAddressByTokenId = getV1NftsTransfersByContractAddressByTokenId;
/**
 * Get NFT by token ID
 * Get NFT by token ID
 */
const getV1NftsByContractAddressByTokenId = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/{contract_address}/{token_id}",
        ...options,
    });
};
exports.getV1NftsByContractAddressByTokenId = getV1NftsByContractAddressByTokenId;
/**
 * Force refresh collection metadata
 * Force refresh collection metadata for the specified contract (across multiple chains if provided)
 */
const getV1NftsMetadataRefreshByContractAddress = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/metadata/refresh/{contract_address}",
        ...options,
    });
};
exports.getV1NftsMetadataRefreshByContractAddress = getV1NftsMetadataRefreshByContractAddress;
/**
 * Force refresh token metadata
 * Force refresh token metadata for the specified contract and token ID (across multiple chains if provided)
 */
const getV1NftsMetadataRefreshByContractAddressByTokenId = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/nfts/metadata/refresh/{contract_address}/{token_id}",
        ...options,
    });
};
exports.getV1NftsMetadataRefreshByContractAddressByTokenId = getV1NftsMetadataRefreshByContractAddressByTokenId;
/**
 * Get wallet transactions
 * Get incoming and outgoing transactions for a wallet
 */
const getV1WalletsByWalletAddressTransactions = (options) => {
    return (options.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-client-id",
                type: "apiKey",
            },
            {
                scheme: "bearer",
                type: "http",
            },
            {
                in: "query",
                name: "clientId",
                type: "apiKey",
            },
        ],
        url: "/v1/wallets/{wallet_address}/transactions",
        ...options,
    });
};
exports.getV1WalletsByWalletAddressTransactions = getV1WalletsByWalletAddressTransactions;
//# sourceMappingURL=sdk.gen.js.map