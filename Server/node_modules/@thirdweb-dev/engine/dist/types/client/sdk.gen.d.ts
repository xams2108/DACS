import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch";
import type { EncodeFunctionDataData, GetNativeBalanceData, GetTransactionAnalyticsData, GetTransactionAnalyticsSummaryData, ReadContractData, SearchTransactionsData, SendTransactionData, SendTransactionResponse, SignMessageData, SignTransactionData, SignTypedDataData, WriteContractData, WriteContractResponse } from "./types.gen.js";
export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
/**
 * Write Contract
 * Call a write function on a contract.
 */
export declare const writeContract: <ThrowOnError extends boolean = false>(options?: Options<WriteContractData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<WriteContractResponse, unknown, ThrowOnError>;
/**
 * Send Transaction
 * Send an encoded transaction or a batch of transactions
 */
export declare const sendTransaction: <ThrowOnError extends boolean = false>(options?: Options<SendTransactionData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<SendTransactionResponse, unknown, ThrowOnError>;
/**
 * Sign Transaction
 * Sign transactions without sending them.
 */
export declare const signTransaction: <ThrowOnError extends boolean = false>(options?: Options<SignTransactionData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        results: Array<{
            success: true;
            result: {
                signature: string;
                signedData?: string;
            };
        } | {
            success: false;
            error: {
                kind: string;
                code: string;
                status: number;
                message?: string;
                address?: string;
                chainId?: string;
            };
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * Sign Message
 * Sign arbitrary messages.
 */
export declare const signMessage: <ThrowOnError extends boolean = false>(options?: Options<SignMessageData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        results: Array<{
            success: true;
            result: {
                signature: string;
                signedData?: string;
            };
        } | {
            success: false;
            error: {
                kind: string;
                code: string;
                status: number;
                message?: string;
                address?: string;
                chainId?: string;
            };
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * Sign Typed Data
 * Sign EIP-712 typed data.
 */
export declare const signTypedData: <ThrowOnError extends boolean = false>(options?: Options<SignTypedDataData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        results: Array<{
            success: true;
            result: {
                signature: string;
                signedData?: string;
            };
        } | {
            success: false;
            error: {
                kind: string;
                code: string;
                status: number;
                message?: string;
                address?: string;
                chainId?: string;
            };
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * Read Contract
 * Call read-only contract functions or batch read using multicall.
 */
export declare const readContract: <ThrowOnError extends boolean = false>(options?: Options<ReadContractData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        results: Array<{
            success: boolean;
            result?: null;
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * Read Native Balance
 * Fetches the native cryptocurrency balance (e.g., ETH, MATIC) for a given address on a specific chain.
 */
export declare const getNativeBalance: <ThrowOnError extends boolean = false>(options?: Options<GetNativeBalanceData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        balance: string;
    };
}, unknown, ThrowOnError>;
/**
 * Encode Function Data
 * Encode a contract call into transaction parameters (to, data, value).
 */
export declare const encodeFunctionData: <ThrowOnError extends boolean = false>(options?: Options<EncodeFunctionDataData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        results: Array<{
            success: true;
            result: {
                to: string;
                data: string;
                value: string;
            };
        } | {
            success: false;
            error: {
                kind: string;
                code: string;
                status: number;
                message?: string;
                address?: string;
                chainId?: string;
            };
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
export declare const searchTransactions: <ThrowOnError extends boolean = false>(options?: Options<SearchTransactionsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        transactions: Array<{
            id: string;
            batchIndex: number;
            clientId: string;
            chainId: string;
            from: string | null;
            transactionParams: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | Array<unknown>;
            transactionHash: string | null;
            confirmedAt: string | null;
            confirmedAtBlockNumber: string | null;
            enrichedData: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | Array<unknown>;
            executionParams: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | Array<unknown>;
            executionResult: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | Array<unknown> | null;
            createdAt: string;
            errorMessage: string | null;
            cancelledAt: string | null;
        }>;
        pagination: {
            totalCount: number;
            page: number;
            limit: number;
        };
    };
}, unknown, ThrowOnError>;
/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
export declare const getTransactionAnalytics: <ThrowOnError extends boolean = false>(options?: Options<GetTransactionAnalyticsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        analytics: Array<{
            timeBucket: string;
            chainId: string;
            count: number;
        }>;
        metadata: {
            resolution: "hour" | "day" | "week" | "month";
            startDate: string;
            endDate: string;
        };
    };
}, unknown, ThrowOnError>;
/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
export declare const getTransactionAnalyticsSummary: <ThrowOnError extends boolean = false>(options?: Options<GetTransactionAnalyticsSummaryData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    result: {
        summary: {
            totalCount: number;
            totalGasCostWei: string;
            totalGasUnitsUsed: string;
        };
        metadata: {
            startDate?: string;
            endDate?: string;
        };
    };
}, unknown, ThrowOnError>;
//# sourceMappingURL=sdk.gen.d.ts.map