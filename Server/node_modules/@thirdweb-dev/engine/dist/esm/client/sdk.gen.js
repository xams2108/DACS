// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from "./client.gen.js";
/**
 * Write Contract
 * Call a write function on a contract.
 */
export const writeContract = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Send Transaction
 * Send an encoded transaction or a batch of transactions
 */
export const sendTransaction = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/transaction",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Sign Transaction
 * Sign transactions without sending them.
 */
export const signTransaction = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/transaction",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Sign Message
 * Sign arbitrary messages.
 */
export const signMessage = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/message",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Sign Typed Data
 * Sign EIP-712 typed data.
 */
export const signTypedData = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/typed-data",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Read Contract
 * Call read-only contract functions or batch read using multicall.
 */
export const readContract = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/read/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Read Native Balance
 * Fetches the native cryptocurrency balance (e.g., ETH, MATIC) for a given address on a specific chain.
 */
export const getNativeBalance = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/read/balance",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Encode Function Data
 * Encode a contract call into transaction parameters (to, data, value).
 */
export const encodeFunctionData = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/encode/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
export const searchTransactions = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/search",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
export const getTransactionAnalytics = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
export const getTransactionAnalyticsSummary = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics-summary",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
//# sourceMappingURL=sdk.gen.js.map