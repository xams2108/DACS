import { P as PluginHandler, S as StringCase, U as UserConfig, C as Client, I as IR } from './types.d-C5lgdIHG.js';
export { a as Client, L as LegacyIR, O as OpenApi, b as Plugin, d as defaultPlugins } from './types.d-C5lgdIHG.js';
import 'node:fs';
import 'typescript';

declare const clientDefaultConfig: {
    readonly _dependencies: readonly ["@hey-api/typescript"];
    readonly _tags: readonly ["client"];
    readonly baseUrl: true;
    readonly bundle: false;
    readonly exportFromIndex: false;
    readonly output: "client";
};

declare const clientPluginHandler: PluginHandler;

declare const utils: {
    stringCase: ({ case: _case, stripLeadingSeparators, value, }: {
        readonly case: StringCase | undefined;
        stripLeadingSeparators?: boolean;
        value: string;
    }) => string;
};

type Configs = UserConfig | (() => UserConfig) | (() => Promise<UserConfig>);
/**
 * Generate a client from the provided configuration.
 *
 * @param userConfig User provided {@link UserConfig} configuration.
 */
declare const createClient: (userConfig?: Configs) => Promise<ReadonlyArray<Client | IR.Context>>;
/**
 * Type helper for openapi-ts.config.ts, returns {@link UserConfig} object
 */
declare const defineConfig: (config: Configs) => Promise<UserConfig>;

export { IR, UserConfig, clientDefaultConfig, clientPluginHandler, createClient, defineConfig, utils };
