import { queryOptions as defineQuery, useQuery, } from "@tanstack/react-query";
import { readContract, } from "../../../../transaction/read-contract.js";
import { getFunctionId } from "../../../../utils/function-id.js";
import { stringify } from "../../../../utils/json.js";
export function useReadContract(extensionOrOptions, options) {
    let queryKey;
    let queryFn;
    let queryOpts;
    // extension case
    if (typeof extensionOrOptions === "function") {
        if (!options) {
            throw new Error(`Missing second argument for "useReadContract(<extension>, <options>)" hook.`);
        }
        const { queryOptions, contract, ...params } = options;
        queryOpts = queryOptions;
        queryKey = [
            "readContract",
            contract.chain.id,
            contract.address,
            getFunctionId(extensionOrOptions),
            stringify(params),
        ];
        queryFn = () => extensionOrOptions({
            ...params,
            contract,
        });
    }
    // raw tx case
    if ("method" in extensionOrOptions) {
        const { queryOptions, ...tx } = extensionOrOptions;
        queryOpts = queryOptions;
        queryKey = [
            "readContract",
            tx.contract.chain.id,
            tx.contract.address,
            tx.method,
            stringify(tx.params),
        ];
        queryFn = () => readContract(extensionOrOptions);
    }
    if (!queryKey || !queryFn) {
        throw new Error(`Invalid "useReadContract" options. Expected either a read extension or a transaction object.`);
    }
    return useQuery(defineQuery({
        queryKey: queryKey,
        queryFn: queryFn,
        ...(queryOpts ?? {}),
    }));
}
//# sourceMappingURL=useReadContract.js.map