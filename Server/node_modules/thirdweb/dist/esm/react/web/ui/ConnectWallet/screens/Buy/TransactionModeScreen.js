import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { trackPayEvent } from "../../../../../../analytics/track/pay.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../constants/addresses.js";
import { formatNumber } from "../../../../../../utils/formatNumber.js";
import { toTokens } from "../../../../../../utils/units.js";
import { useCustomTheme } from "../../../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, spacing, } from "../../../../../core/design-system/index.js";
import { useChainMetadata } from "../../../../../core/hooks/others/useChainQuery.js";
import { useWalletBalance } from "../../../../../core/hooks/others/useWalletBalance.js";
import { useActiveAccount } from "../../../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../../../core/hooks/wallets/useActiveWallet.js";
import { hasSponsoredTransactionsEnabled } from "../../../../../core/utils/wallet.js";
import { ErrorState } from "../../../../wallets/shared/ErrorState.js";
import { LoadingScreen } from "../../../../wallets/shared/LoadingScreen.js";
import { ChainIcon } from "../../../components/ChainIcon.js";
import { Img } from "../../../components/Img.js";
import { Skeleton } from "../../../components/Skeleton.js";
import { Spacer } from "../../../components/Spacer.js";
import { TokenIcon } from "../../../components/TokenIcon.js";
import { Container, Line, ModalHeader } from "../../../components/basic.js";
import { Button } from "../../../components/buttons.js";
import { Text } from "../../../components/text.js";
import { TokenSymbol } from "../../../components/token/TokenSymbol.js";
import { ConnectButton } from "../../ConnectButton.js";
import { PoweredByThirdweb } from "../../PoweredByTW.js";
import { OutlineWalletIcon } from "../../icons/OutlineWalletIcon.js";
import { formatTokenBalance } from "../formatTokenBalance.js";
import { NATIVE_TOKEN, isNativeToken, } from "../nativeToken.js";
import { useTransactionCostAndData } from "./main/useBuyTxStates.js";
import { WalletRow } from "./swap/WalletRow.js";
export function TransactionModeScreen(props) {
    const { payUiOptions, client, payerAccount, supportedDestinations, onContinue, } = props;
    const { data: chainData, error: chainDataError, isLoading: chainDataLoading, refetch: chainDataRefetch, } = useChainMetadata(payUiOptions.transaction.chain);
    const metadata = payUiOptions.metadata;
    const { data: transactionCostAndData, error: transactionCostAndDataError, isLoading: transactionCostAndDataLoading, refetch: transactionCostAndDataRefetch, } = useTransactionCostAndData({
        transaction: payUiOptions.transaction,
        account: payerAccount,
        supportedDestinations,
    });
    const theme = useCustomTheme();
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const sponsoredTransactionsEnabled = hasSponsoredTransactionsEnabled(activeWallet);
    const balanceQuery = useWalletBalance({
        address: activeAccount?.address,
        chain: payUiOptions.transaction.chain,
        tokenAddress: isNativeToken(transactionCostAndData?.token || NATIVE_TOKEN)
            ? undefined
            : transactionCostAndData?.token.address,
        client: props.client,
    }, {
        enabled: !!transactionCostAndData,
    });
    if (transactionCostAndDataLoading || chainDataLoading) {
        return _jsx(LoadingScreen, {});
    }
    if (!activeAccount) {
        return (_jsx(Container, { style: {
                minHeight: "350px",
            }, fullHeight: true, flex: "row", center: "both", children: _jsxs(Container, { animate: "fadein", children: [_jsx(Spacer, { y: "xxl" }), _jsx(Container, { flex: "row", center: "x", children: _jsx(OutlineWalletIcon, { size: iconSize["3xl"] }) }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { center: true, color: "primaryText", size: "md", children: "Please connect a wallet to continue" }), _jsx(Spacer, { y: "xl" }), _jsx(Container, { flex: "row", center: "x", style: { width: "100%" }, children: _jsx(ConnectButton, { client: client, theme: theme, ...props.connectOptions }) })] }) }));
    }
    if (transactionCostAndDataError || chainDataError) {
        return (_jsx(Container, { style: {
                minHeight: "350px",
            }, fullHeight: true, flex: "row", center: "both", children: _jsx(ErrorState, { title: transactionCostAndDataError?.message ||
                    chainDataError?.message ||
                    "Something went wrong", onTryAgain: transactionCostAndDataError
                    ? transactionCostAndDataRefetch
                    : chainDataRefetch }) }));
    }
    if (!transactionCostAndData || !chainData) {
        return _jsx(LoadingScreen, {});
    }
    const insufficientFunds = balanceQuery.data &&
        balanceQuery.data.value < transactionCostAndData.transactionValueWei;
    return (_jsxs(Container, { px: "lg", children: [_jsx(Spacer, { y: "lg" }), _jsx(ModalHeader, { title: metadata?.name || "Transaction" }), _jsx(Spacer, { y: "lg" }), _jsxs(Container, { children: [metadata?.image ? (_jsx(Img, { client: client, src: metadata?.image, style: {
                            width: "100%",
                            borderRadius: spacing.md,
                            border: `1px solid ${theme.colors.borderColor}`,
                            backgroundColor: theme.colors.tertiaryBg,
                        } })) : activeAccount ? (_jsxs(Container, { flex: "column", gap: "sm", children: [insufficientFunds && (_jsxs("div", { children: [_jsx(Text, { color: "danger", size: "xs", center: true, multiline: true, children: "Insufficient Funds" }), _jsx(Text, { size: "xs", center: true, multiline: true, children: "Select another token or pay with card." })] })), _jsxs(Container, { flex: "row", style: {
                                    justifyContent: "space-between",
                                    padding: spacing.sm,
                                    marginBottom: spacing.sm,
                                    borderRadius: spacing.md,
                                    backgroundColor: theme.colors.tertiaryBg,
                                    border: `1px solid ${theme.colors.borderColor}`,
                                }, children: [_jsx(WalletRow, { address: activeAccount?.address, iconSize: "md", client: client }), balanceQuery.data ? (_jsxs(Container, { flex: "row", gap: "3xs", center: "y", children: [_jsx(Text, { size: "xs", color: "secondaryText", weight: 500, children: formatTokenBalance(balanceQuery.data, false) }), _jsx(TokenSymbol, { token: transactionCostAndData.token, chain: payUiOptions.transaction.chain, size: "xs", color: "secondaryText" })] })) : (_jsx(Skeleton, { width: "70px", height: fontSize.xs }))] })] })) : null, _jsx(Spacer, { y: "md" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "md", color: "primaryText", weight: 700, children: "Price" }) }), _jsx(Container, { expand: true, children: _jsxs(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [_jsx(TokenIcon, { chain: payUiOptions.transaction.chain, client: props.client, size: "sm", token: transactionCostAndData.token }), _jsxs(Text, { color: "primaryText", size: "md", weight: 700, children: [String(formatNumber(Number(toTokens(transactionCostAndData.transactionValueWei, transactionCostAndData.decimals)), 6)), " ", transactionCostAndData.token.symbol] })] }) })] }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "xs", color: "secondaryText", children: "Gas Fees" }) }), _jsx(Container, { expand: true, children: _jsx(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: _jsx(Text, { color: sponsoredTransactionsEnabled ? "success" : "primaryText", size: "xs", children: sponsoredTransactionsEnabled
                                            ? "Sponsored"
                                            : `${String(formatNumber(Number(toTokens(transactionCostAndData.gasCostWei, chainData.nativeCurrency.decimals)), 6))} ${chainData.nativeCurrency.symbol}` }) }) })] }), _jsx(Spacer, { y: "sm" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "xs", color: "secondaryText", children: "Network" }) }), _jsx(Container, { expand: true, children: _jsxs(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [_jsx(ChainIcon, { chainIconUrl: chainData.icon?.url, size: "xs", client: props.client }), _jsx(Text, { size: "xs", color: "secondaryText", style: { textAlign: "right" }, children: chainData.name })] }) })] })] }), _jsx(Spacer, { y: "xl" }), payerAccount ? (_jsx(Button, { variant: "accent", fullWidth: true, onClick: () => {
                    let totalCostWei = insufficientFunds
                        ? transactionCostAndData.transactionValueWei -
                            (balanceQuery.data?.value || 0n)
                        : transactionCostAndData.transactionValueWei;
                    if (transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS &&
                        !sponsoredTransactionsEnabled) {
                        totalCostWei += transactionCostAndData.gasCostWei;
                    }
                    trackPayEvent({
                        event: "choose_payment_method_transaction_mode",
                        client,
                        walletAddress: payerAccount.address,
                        walletType: activeWallet?.id,
                        toChainId: payUiOptions.transaction.chain.id,
                        toToken: transactionCostAndData.token.address,
                        amountWei: totalCostWei.toString(),
                    });
                    onContinue(toTokens(totalCostWei, transactionCostAndData.decimals), payUiOptions.transaction.chain, transactionCostAndData.token);
                }, children: "Choose Payment Method" })) : (_jsx("div", { children: _jsx(ConnectButton, { ...props.connectOptions, client: client, theme: theme, connectButton: {
                        style: {
                            width: "100%",
                        },
                    } }) })), _jsx(Spacer, { y: "lg" }), payUiOptions.showThirdwebBranding !== false && (_jsxs(_Fragment, { children: [_jsx(PoweredByThirdweb, { link: "https://playground.thirdweb.com/connect/pay?utm_source=ub_text" }), _jsx(Spacer, { y: "sm" })] }))] }));
}
//# sourceMappingURL=TransactionModeScreen.js.map