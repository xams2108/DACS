import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { CheckCircledIcon } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import { useMemo, useState } from "react";
import { trackPayEvent } from "../../../../../../../analytics/track/pay.js";
import { getCachedChain } from "../../../../../../../chains/utils.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { getContract } from "../../../../../../../contract/contract.js";
import { allowance } from "../../../../../../../extensions/erc20/__generated__/IERC20/read/allowance.js";
import { getCurrencyMetadata, } from "../../../../../../../extensions/erc20/read/getCurrencyMetadata.js";
import { approve } from "../../../../../../../extensions/erc20/write/approve.js";
import { transfer } from "../../../../../../../extensions/erc20/write/transfer.js";
import { getBuyWithCryptoTransfer } from "../../../../../../../pay/buyWithCrypto/getTransfer.js";
import { sendAndConfirmTransaction } from "../../../../../../../transaction/actions/send-and-confirm-transaction.js";
import { sendTransaction } from "../../../../../../../transaction/actions/send-transaction.js";
import { prepareTransaction } from "../../../../../../../transaction/prepare-transaction.js";
import { toWei } from "../../../../../../../utils/units.js";
import { iconSize } from "../../../../../../core/design-system/index.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { StepBar } from "../../../../components/StepBar.js";
import { SwitchNetworkButton } from "../../../../components/SwitchNetwork.js";
import { Container, ModalHeader } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { isNativeToken } from "../../nativeToken.js";
import { Step } from "../Stepper.js";
import { ConnectorLine } from "./ConfirmationScreen.js";
import { ErrorText } from "./ErrorText.js";
import { SwapSummary } from "./SwapSummary.js";
export function TransferConfirmationScreen(props) {
    const { title, onBack, receiverAddress, client, payer, onDone, chain, token, tokenAmount, transactionMode, setTransactionHash, payOptions, } = props;
    const [step, setStep] = useState("transfer");
    const [status, setStatus] = useState({ id: "idle" });
    const transferQuery = useQuery({
        queryKey: [
            "transfer",
            isNativeToken(token) ? NATIVE_TOKEN_ADDRESS : token.address,
            tokenAmount,
            receiverAddress,
            payer.account.address,
            payOptions?.purchaseData,
        ],
        queryFn: async () => {
            const transferResponse = await getBuyWithCryptoTransfer({
                client,
                fromAddress: payer.account.address,
                toAddress: receiverAddress,
                chainId: chain.id,
                tokenAddress: isNativeToken(token)
                    ? NATIVE_TOKEN_ADDRESS
                    : token.address,
                amount: tokenAmount,
                purchaseData: payOptions?.purchaseData,
                feePayer: payOptions?.mode === "direct_payment"
                    ? payOptions.paymentInfo.feePayer
                    : undefined,
            });
            return transferResponse;
        },
        refetchInterval: 30 * 1000,
    });
    const uiErrorMessage = useMemo(() => {
        if (step === "approve" && status.id === "error" && status.error) {
            if (status.error.toLowerCase().includes("user rejected") ||
                status.error.toLowerCase().includes("user closed modal") ||
                status.error.toLowerCase().includes("user denied")) {
                return {
                    title: "Failed to Approve",
                    message: "Your wallet rejected the approval request.",
                };
            }
            return {
                title: "Failed to Approve",
                message: "Your wallet failed to approve the transaction for an unknown reason. Please try again or contact support.",
            };
        }
        if ((step === "transfer" || step === "execute") &&
            status.id === "error" &&
            status.error) {
            if (status.error.toLowerCase().includes("user rejected")) {
                return {
                    title: "Failed to Confirm",
                    message: "Your wallet rejected the confirmation request.",
                };
            }
            return {
                title: "Failed to Confirm",
                message: "Your wallet failed to confirm the transaction for an unknown reason. Please try again or contact support.",
            };
        }
        return undefined;
    }, [step, status]);
    if (transferQuery.isLoading) {
        return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: title, onBack: onBack }), _jsxs(Container, { flex: "column", center: "both", style: { minHeight: "300px" }, children: [_jsx(Spacer, { y: "xl" }), _jsx(Spinner, { size: "xl", color: "secondaryText" }), _jsx(Spacer, { y: "xl" })] })] }));
    }
    const transferFromAmountWithFees = transferQuery.data?.paymentToken.amount || tokenAmount;
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: title, onBack: onBack }), _jsx(Spacer, { y: "xl" }), transactionMode ? (_jsxs(_Fragment, { children: [_jsx(StepBar, { steps: 2, currentStep: step === "transfer" ? 1 : 2 }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { size: "sm", children: step === "transfer"
                            ? "Step 1 of 2 - Transfer funds"
                            : "Step 2 of 2 - Finalize transaction" }), _jsx(Spacer, { y: "md" })] })) : (_jsxs(_Fragment, { children: [_jsx(Text, { size: "sm", children: "Confirm payment" }), _jsx(Spacer, { y: "md" })] })), _jsx(SwapSummary, { sender: payer.account.address, receiver: receiverAddress, client: client, fromToken: token, fromChain: chain, toToken: token, toChain: chain, fromAmount: transactionMode ? tokenAmount : transferFromAmountWithFees, toAmount: tokenAmount }), _jsx(Spacer, { y: "lg" }), transactionMode && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "sm" }), _jsxs(Container, { gap: "sm", flex: "row", style: {
                            justifyContent: "space-between",
                        }, center: "y", color: "accentText", children: [_jsx(Step, { isDone: step === "execute", isActive: step === "transfer", label: step === "transfer" ? "Transfer" : "Done" }), _jsx(ConnectorLine, {}), _jsx(Step, { isDone: false, label: "Finalize", isActive: step === "execute" })] }), _jsx(Spacer, { y: "lg" })] })), uiErrorMessage && (_jsxs(_Fragment, { children: [_jsx(ErrorText, { title: uiErrorMessage.title, message: uiErrorMessage.message }), _jsx(Spacer, { y: "md" })] })), !transactionMode && step === "execute" && status.id === "done" && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", gap: "xs", center: "both", color: "success", children: [_jsx(CheckCircledIcon, { width: iconSize.sm, height: iconSize.sm }), _jsx(Text, { color: "success", size: "sm", children: "Payment completed" })] }), _jsx(Spacer, { y: "md" })] })), payer.chain.id !== chain.id ? (_jsx(SwitchNetworkButton, { fullWidth: true, variant: "accent", switchChain: async () => {
                    await props.payer.wallet.switchChain(chain);
                } })) : (_jsxs(Button, { variant: "accent", fullWidth: true, disabled: status.id === "pending", onClick: async () => {
                    if (step === "execute") {
                        onDone();
                        return;
                    }
                    try {
                        setStatus({ id: "pending" });
                        // TRANSACTION MODE = transfer funds to another one of your wallets before executing the tx
                        if (transactionMode) {
                            const transaction = isNativeToken(token)
                                ? prepareTransaction({
                                    client,
                                    chain,
                                    to: receiverAddress,
                                    value: toWei(tokenAmount),
                                })
                                : transfer({
                                    contract: getContract({
                                        address: token.address,
                                        chain: chain,
                                        client: client,
                                    }),
                                    to: receiverAddress,
                                    amount: tokenAmount,
                                });
                            const [txResult, tokenMetadata] = await Promise.all([
                                sendAndConfirmTransaction({
                                    account: props.payer.account,
                                    transaction,
                                }),
                                getCurrencyMetadata({
                                    contract: getContract({
                                        address: isNativeToken(token)
                                            ? NATIVE_TOKEN_ADDRESS
                                            : token.address,
                                        chain: chain,
                                        client: client,
                                    }),
                                }),
                            ]);
                            trackPayEvent({
                                client: props.client,
                                walletAddress: payer.account.address,
                                walletType: payer.wallet.id,
                                toChainId: chain.id,
                                toToken: isNativeToken(token) ? undefined : token.address,
                                event: "transfer_confirmation_success_transaction_mode",
                            });
                            // its the last step before the transaction, so propagate onPurchaseSuccess here
                            props.onSuccess?.(transferBuyWithCryptoQuote({
                                token,
                                chain,
                                tokenMetadata,
                                tokenAmount: transactionMode
                                    ? tokenAmount
                                    : transferFromAmountWithFees,
                                fromAddress: payer.account.address,
                                toAddress: receiverAddress,
                                transaction: txResult,
                            }));
                            // switch to execute step
                            setStep("execute");
                            setStatus({ id: "idle" });
                        }
                        else {
                            const transferResponse = transferQuery.data;
                            if (!transferResponse) {
                                throw new Error("Transfer data not found");
                            }
                            if (transferResponse.approvalData) {
                                // check allowance
                                const prevAllowance = await allowance({
                                    contract: getContract({
                                        client: client,
                                        address: transferResponse.approvalData.tokenAddress,
                                        chain: getCachedChain(transferResponse.approvalData.chainId),
                                    }),
                                    spender: transferResponse.approvalData
                                        .spenderAddress,
                                    owner: payer.account.address,
                                });
                                if (prevAllowance <
                                    BigInt(transferResponse.approvalData.amountWei)) {
                                    setStep("approve");
                                    trackPayEvent({
                                        client: props.client,
                                        walletAddress: payer.account.address,
                                        walletType: payer.wallet.id,
                                        toChainId: chain.id,
                                        toToken: isNativeToken(token) ? undefined : token.address,
                                        event: "prompt_transfer_approval",
                                    });
                                    const transaction = approve({
                                        contract: getContract({
                                            client: client,
                                            address: transferResponse.approvalData.tokenAddress,
                                            chain: getCachedChain(transferResponse.approvalData.chainId),
                                        }),
                                        spender: transferResponse.approvalData
                                            .spenderAddress,
                                        amountWei: BigInt(transferResponse.approvalData.amountWei),
                                    });
                                    // approve the transfer
                                    await sendAndConfirmTransaction({
                                        account: props.payer.account,
                                        transaction,
                                    });
                                    trackPayEvent({
                                        client: props.client,
                                        walletAddress: payer.account.address,
                                        walletType: payer.wallet.id,
                                        toChainId: chain.id,
                                        toToken: isNativeToken(token) ? undefined : token.address,
                                        event: "transfer_approval_success",
                                    });
                                }
                            }
                            trackPayEvent({
                                client: props.client,
                                walletAddress: payer.account.address,
                                walletType: payer.wallet.id,
                                toChainId: chain.id,
                                toToken: isNativeToken(token) ? undefined : token.address,
                                event: "prompt_transfer_confirmation",
                            });
                            setStep("transfer");
                            // execute the transfer
                            const transaction = transferResponse.transactionRequest;
                            const tx = await sendTransaction({
                                account: props.payer.account,
                                transaction,
                            });
                            // switches to the status polling screen
                            setTransactionHash(tx.transactionHash);
                            setStatus({ id: "idle" });
                            trackPayEvent({
                                client: props.client,
                                walletAddress: payer.account.address,
                                walletType: payer.wallet.id,
                                toChainId: chain.id,
                                toToken: isNativeToken(token) ? undefined : token.address,
                                event: "transfer_confirmation_success",
                            });
                        }
                        // biome-ignore lint/suspicious/noExplicitAny: catch multiple errors
                    }
                    catch (e) {
                        console.error(e);
                        setStatus({
                            id: "error",
                            error: "error" in e ? e.error?.message : e?.message,
                        });
                    }
                }, gap: "xs", children: [step === "execute" && (status.id === "done" ? "Done" : "Continue"), step === "transfer" &&
                        (status.id === "pending" ? "Confirming" : "Confirm"), step === "approve" &&
                        (status.id === "pending" ? "Approving" : "Approve"), status.id === "pending" && (_jsx(Spinner, { size: "sm", color: "accentButtonText" }))] }))] }));
}
function transferBuyWithCryptoQuote(args) {
    const { token, chain, tokenMetadata, tokenAmount, fromAddress, toAddress, transaction, } = args;
    return {
        status: "COMPLETED",
        subStatus: "SUCCESS",
        swapType: "TRANSFER",
        quote: {
            createdAt: new Date().toISOString(),
            fromToken: {
                chainId: chain.id,
                tokenAddress: isNativeToken(token)
                    ? NATIVE_TOKEN_ADDRESS
                    : token.address,
                decimals: tokenMetadata.decimals,
                symbol: tokenMetadata.symbol,
                name: tokenMetadata.name,
                priceUSDCents: 0,
            },
            toToken: {
                chainId: chain.id,
                tokenAddress: isNativeToken(token)
                    ? NATIVE_TOKEN_ADDRESS
                    : token.address,
                decimals: tokenMetadata.decimals,
                symbol: tokenMetadata.symbol,
                name: tokenMetadata.name,
                priceUSDCents: 0,
            },
            fromAmountWei: toWei(tokenAmount).toString(),
            fromAmount: tokenAmount,
            toAmountWei: toWei(tokenAmount).toString(),
            toAmount: tokenAmount,
            toAmountMin: tokenAmount,
            toAmountMinWei: toWei(tokenAmount).toString(),
            estimated: {
                feesUSDCents: 0,
                gasCostUSDCents: 0,
                slippageBPS: 0,
                toAmountMinUSDCents: 0,
                toAmountUSDCents: 0,
                fromAmountUSDCents: 0,
                durationSeconds: 0,
            },
        },
        fromAddress,
        toAddress,
        source: {
            transactionHash: transaction.transactionHash,
            amount: tokenAmount,
            amountWei: toWei(tokenAmount).toString(),
            amountUSDCents: 0,
            completedAt: new Date().toISOString(),
            token: {
                chainId: chain.id,
                tokenAddress: isNativeToken(token)
                    ? NATIVE_TOKEN_ADDRESS
                    : token.address,
                decimals: tokenMetadata.decimals,
                symbol: tokenMetadata.symbol,
                name: tokenMetadata.name,
                priceUSDCents: 0,
            },
        },
    };
}
//# sourceMappingURL=TransferConfirmationScreen.js.map