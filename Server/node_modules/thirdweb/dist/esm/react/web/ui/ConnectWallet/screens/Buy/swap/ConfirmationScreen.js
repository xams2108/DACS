import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo, useState } from "react";
import { trackPayEvent } from "../../../../../../../analytics/track/pay.js";
import { getContract } from "../../../../../../../contract/contract.js";
import { approve } from "../../../../../../../extensions/erc20/write/approve.js";
import { sendBatchTransaction } from "../../../../../../../transaction/actions/send-batch-transaction.js";
import { sendTransaction } from "../../../../../../../transaction/actions/send-transaction.js";
import { waitForReceipt, } from "../../../../../../../transaction/actions/wait-for-tx-receipt.js";
import { useCustomTheme } from "../../../../../../core/design-system/CustomThemeProvider.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { StepBar } from "../../../../components/StepBar.js";
import { SwitchNetworkButton } from "../../../../components/SwitchNetwork.js";
import { Container, ModalHeader } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { StyledDiv } from "../../../../design-system/elements.js";
import { Step } from "../Stepper.js";
import { ErrorText } from "./ErrorText.js";
import { SwapSummary } from "./SwapSummary.js";
import { addPendingTx } from "./pendingSwapTx.js";
/**
 * @internal
 */
export function SwapConfirmationScreen(props) {
    const approveTxRequired = props.quote.approvalData &&
        props.preApprovedAmount !== undefined &&
        props.preApprovedAmount < BigInt(props.quote.approvalData.amountWei);
    const needsApprovalStep = approveTxRequired && !props.payer.account.sendBatchTransaction;
    const initialStep = needsApprovalStep ? "approval" : "swap";
    const [step, setStep] = useState(initialStep);
    const [error, setError] = useState();
    const [status, setStatus] = useState("idle");
    const receiver = props.quote.swapDetails.toAddress;
    const sender = props.quote.swapDetails.fromAddress;
    const uiErrorMessage = useMemo(() => {
        if (step === "approval" && status === "error" && error) {
            if (error.toLowerCase().includes("user rejected") ||
                error.toLowerCase().includes("user closed modal") ||
                error.toLowerCase().includes("user denied")) {
                return {
                    title: "Failed to Approve",
                    message: "Your wallet rejected the approval request.",
                };
            }
            return {
                title: "Failed to Approve",
                message: "Your wallet failed to approve the transaction for an unknown reason. Please try again or contact support.",
            };
        }
        if (step === "swap" && status === "error" && error) {
            if (error.toLowerCase().includes("user rejected") ||
                error.toLowerCase().includes("user closed modal") ||
                error.toLowerCase().includes("user denied")) {
                return {
                    title: "Failed to Confirm",
                    message: "Your wallet rejected the confirmation request.",
                };
            }
            return {
                title: "Failed to Confirm",
                message: "Your wallet failed to confirm the transaction for an unknown reason. Please try again or contact support.",
            };
        }
        return undefined;
    }, [error, step, status]);
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: props.title, onBack: props.onBack }), props.isFiatFlow ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "lg" }), _jsx(StepBar, { steps: 2, currentStep: 2 }), _jsx(Spacer, { y: "sm" }), _jsxs(Text, { size: "xs", children: ["Step 2 of 2 - Converting ", props.fromTokenSymbol, " to", " ", props.toTokenSymbol] }), _jsx(Spacer, { y: "md" })] })) : (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "lg" }), _jsx(Text, { size: "sm", children: "Confirm payment" }), _jsx(Spacer, { y: "md" })] })), _jsx(SwapSummary, { sender: sender, receiver: receiver, client: props.client, fromToken: props.fromToken, fromChain: props.fromChain, toToken: props.toToken, toChain: props.toChain, fromAmount: props.fromAmount, toAmount: props.toAmount }), _jsx(Spacer, { y: "md" }), needsApprovalStep && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "sm" }), _jsxs(Container, { gap: "sm", flex: "row", style: {
                            justifyContent: "space-between",
                        }, center: "y", color: "accentText", children: [_jsx(Step, { isDone: step === "swap", isActive: step === "approval", label: step === "approval" ? "Approve" : "Approved" }), _jsx(ConnectorLine, {}), _jsx(Step, { isDone: false, label: "Confirm", isActive: step === "swap" })] }), _jsx(Spacer, { y: "lg" })] })), uiErrorMessage && (_jsxs(_Fragment, { children: [_jsx(ErrorText, { title: uiErrorMessage.title, message: uiErrorMessage.message }), _jsx(Spacer, { y: "md" })] })), props.payer.chain.id !== props.fromChain.id ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xs" }), _jsx(SwitchNetworkButton, { fullWidth: true, variant: "accent", switchChain: async () => {
                            await props.payer.wallet.switchChain(props.fromChain);
                        } })] })) : (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xs" }), _jsxs(Button, { variant: "accent", fullWidth: true, disabled: status === "pending", onClick: async () => {
                            const wallet = props.payer.wallet;
                            // in case the wallet is not on the same chain as the fromToken, switch to it
                            if (wallet.getChain()?.id !== props.fromChain.id) {
                                await wallet.switchChain(props.fromChain);
                            }
                            const account = wallet.getAccount();
                            if (!account) {
                                throw new Error("Payer wallet has no account");
                            }
                            if (step === "approval" && props.quote.approvalData) {
                                try {
                                    setStatus("pending");
                                    trackPayEvent({
                                        event: "prompt_swap_approval",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        amountWei: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toChainId: props.quote.swapDetails.toToken.chainId,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                    });
                                    const transaction = approve({
                                        contract: getContract({
                                            client: props.client,
                                            address: props.quote.swapDetails.fromToken.tokenAddress,
                                            chain: props.fromChain,
                                        }),
                                        spender: props.quote.approvalData.spenderAddress,
                                        amountWei: BigInt(props.quote.approvalData.amountWei),
                                    });
                                    const tx = await sendTransaction({
                                        account: account,
                                        transaction,
                                    });
                                    await waitForReceipt({ ...tx, maxBlocksWaitTime: 50 });
                                    trackPayEvent({
                                        event: "swap_approval_success",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        amountWei: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toChainId: props.quote.swapDetails.toToken.chainId,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                    });
                                    setStep("swap");
                                    setStatus("idle");
                                }
                                catch (e) {
                                    console.error(e);
                                    setError(e.message);
                                    setStatus("error");
                                }
                            }
                            if (step === "swap") {
                                setStatus("pending");
                                try {
                                    trackPayEvent({
                                        event: "prompt_swap_execution",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        amountWei: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toChainId: props.quote.swapDetails.toToken.chainId,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                    });
                                    const tx = props.quote.transactionRequest;
                                    let _swapTx;
                                    // check if we can batch approval and swap
                                    const canBatch = account.sendBatchTransaction;
                                    if (canBatch &&
                                        props.quote.approvalData &&
                                        approveTxRequired) {
                                        const approveTx = approve({
                                            contract: getContract({
                                                client: props.client,
                                                address: props.quote.swapDetails.fromToken.tokenAddress,
                                                chain: props.fromChain,
                                            }),
                                            spender: props.quote.approvalData.spenderAddress,
                                            amountWei: BigInt(props.quote.approvalData.amountWei),
                                        });
                                        _swapTx = await sendBatchTransaction({
                                            account: account,
                                            transactions: [approveTx, tx],
                                        });
                                    }
                                    else {
                                        _swapTx = await sendTransaction({
                                            account: account,
                                            transaction: tx,
                                        });
                                    }
                                    trackPayEvent({
                                        event: "swap_execution_success",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        amountWei: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toChainId: props.quote.swapDetails.toToken.chainId,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                    });
                                    // do not add pending tx if the swap is part of fiat flow
                                    if (!props.isFiatFlow) {
                                        addPendingTx({
                                            type: "swap",
                                            txHash: _swapTx.transactionHash,
                                            chainId: _swapTx.chain.id,
                                        });
                                    }
                                    props.setSwapTxHash(_swapTx.transactionHash);
                                }
                                catch (e) {
                                    console.error(e);
                                    setStatus("error");
                                }
                            }
                        }, gap: "xs", children: [step === "approval" &&
                                (status === "pending" ? "Approving" : "Approve"), step === "swap" &&
                                (status === "pending" ? "Confirming" : "Confirm"), status === "pending" && (_jsx(Spinner, { size: "sm", color: "accentButtonText" }))] })] }))] }));
}
export const ConnectorLine = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        height: "4px",
        background: theme.colors.borderColor,
        flex: 1,
    };
});
//# sourceMappingURL=ConfirmationScreen.js.map