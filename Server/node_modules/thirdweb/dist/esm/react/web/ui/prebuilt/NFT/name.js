"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { getFunctionId } from "../../../../../utils/function-id.js";
import { useNFTContext } from "./provider.js";
import { getNFTInfo } from "./utils.js";
/**
 * This component fetches and displays an NFT's name. It takes in a `className` and `style` props
 * so you can style it just like how you would style a <span> element.
 * @returns A <span> element containing the name of the NFT
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { NFTProvider, NFTName } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTName />
 * </NFTProvider>
 * ```
 *
 * ### Show a loading sign while the name is being fetched
 * ```tsx
 * import { NFTProvider, NFTName } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTName loadingComponent={<YourLoadingSign />} />
 * </NFTProvider>
 * ```
 *
 * ### Show something in case the name failed to resolve
 * ```tsx
 * import { NFTProvider, NFTName } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTName fallbackComponent={<span>Failed to load name</span>} />
 * </NFTProvider>
 * ```
 *
 * ### Custom query options for useQuery (tanstack-query)
 * ```tsx
 * import { NFTProvider, NFTName } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTName queryOptions={{ retry: 3, enabled: false, }} />
 * </NFTProvider>
 * ```
 *
 * ### Override the name with the `nameResolver` prop
 * If you already have the name, you can skip the network requests and pass it directly to the NFTName
 * ```tsx
 * <NFTName nameResolver="Doodles #1" />
 * ```
 *
 * You can also pass in your own custom (async) function that retrieves the name
 * ```tsx
 * const getName = async () => {
 *   // ...
 *   return name;
 * };
 *
 * <NFTName nameResolver={getName} />
 * ```
 *
 * @nft
 * @component
 * @beta
 */
export function NFTName({ loadingComponent, fallbackComponent, queryOptions, nameResolver, ...restProps }) {
    const { contract, tokenId } = useNFTContext();
    const nameQuery = useQuery({
        queryKey: getQueryKey({
            contractAddress: contract.address,
            chainId: contract.chain.id,
            tokenId,
            nameResolver,
        }),
        queryFn: async () => fetchNftName({ nameResolver, contract, tokenId }),
        ...queryOptions,
    });
    if (nameQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!nameQuery.data) {
        return fallbackComponent || null;
    }
    return _jsx("span", { ...restProps, children: nameQuery.data });
}
/**
 * @internal
 */
export function getQueryKey(props) {
    const { chainId, tokenId, nameResolver, contractAddress } = props;
    return [
        "_internal_nft_name_",
        chainId,
        contractAddress,
        tokenId.toString(),
        {
            resolver: typeof nameResolver === "string"
                ? nameResolver
                : typeof nameResolver === "function"
                    ? getFunctionId(nameResolver)
                    : undefined,
        },
    ];
}
/**
 * @internal Exported for tests
 */
export async function fetchNftName(props) {
    const { nameResolver, contract, tokenId } = props;
    if (typeof nameResolver === "string") {
        return nameResolver;
    }
    if (typeof nameResolver === "function") {
        return nameResolver();
    }
    const nft = await getNFTInfo({ contract, tokenId }).catch(() => undefined);
    if (!nft) {
        throw new Error("Failed to resolve NFT info");
    }
    if (typeof nft.metadata.name !== "string") {
        throw new Error("Failed to resolve NFT name");
    }
    return nft.metadata.name;
}
//# sourceMappingURL=name.js.map