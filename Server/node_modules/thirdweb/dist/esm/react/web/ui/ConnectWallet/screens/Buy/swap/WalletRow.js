import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { shortenAddress } from "../../../../../../../utils/address.js";
import { isEcosystemWallet } from "../../../../../../../wallets/ecosystem/is-ecosystem-wallet.js";
import { isSmartWallet } from "../../../../../../../wallets/smart/index.js";
import { fontSize, iconSize, } from "../../../../../../core/design-system/index.js";
import { useConnectedWallets } from "../../../../../../core/hooks/wallets/useConnectedWallets.js";
import { useEnsName, useWalletInfo, } from "../../../../../../core/utils/wallet.js";
import { useProfiles } from "../../../../../hooks/wallets/useProfiles.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { WalletImage } from "../../../../components/WalletImage.js";
import { Container } from "../../../../components/basic.js";
import { Text } from "../../../../components/text.js";
import { OutlineWalletIcon } from "../../../icons/OutlineWalletIcon.js";
export function WalletRow(props) {
    const { client, address } = props;
    const connectedWallets = useConnectedWallets();
    const profile = useProfiles({ client });
    const wallet = connectedWallets.find((w) => w.getAccount()?.address?.toLowerCase() === address.toLowerCase());
    const email = wallet &&
        (wallet.id === "inApp" ||
            isEcosystemWallet(wallet) ||
            isSmartWallet(wallet))
        ? profile.data?.find((p) => !!p.details.email)?.details.email
        : undefined;
    const walletInfo = useWalletInfo(wallet?.id);
    const ensNameQuery = useEnsName({
        client,
        address,
    });
    const addressOrENS = ensNameQuery.data || shortenAddress(address);
    return (_jsx(Container, { flex: "row", style: { justifyContent: "space-between" }, children: _jsxs(Container, { flex: "row", center: "y", gap: "sm", color: "secondaryText", children: [wallet ? (_jsx(WalletImage, { id: wallet.id, size: iconSize[props.iconSize || "md"], client: props.client })) : (_jsx(OutlineWalletIcon, { size: iconSize[props.iconSize || "md"] })), _jsxs(Container, { flex: "column", gap: "4xs", children: [props.label ? (_jsx(Text, { size: "xs", color: "secondaryText", children: props.label })) : null, _jsx(Text, { size: props.textSize || "xs", color: "primaryText", children: addressOrENS || shortenAddress(props.address) }), profile.isLoading ? (_jsx(Skeleton, { width: "100px", height: fontSize.sm })) : email || walletInfo?.data?.name ? (_jsx(Text, { size: "xs", color: "secondaryText", children: email || walletInfo?.data?.name })) : null] })] }) }));
}
//# sourceMappingURL=WalletRow.js.map