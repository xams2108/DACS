import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { trackPayEvent } from "../../../../../../../analytics/track/pay.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { formatNumber } from "../../../../../../../utils/formatNumber.js";
import { iconSize, spacing, } from "../../../../../../core/design-system/index.js";
import { useBuyWithFiatQuote } from "../../../../../../core/hooks/pay/useBuyWithFiatQuote.js";
import { PREFERRED_FIAT_PROVIDER_STORAGE_KEY } from "../../../../../../core/utils/storage.js";
import { getErrorMessage } from "../../../../../utils/errors.js";
import { Drawer, DrawerOverlay, useDrawer, } from "../../../../components/Drawer.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { Container } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { TokenSymbol } from "../../../../components/token/TokenSymbol.js";
import { isNativeToken } from "../../nativeToken.js";
import { EstimatedTimeAndFees } from "../EstimatedTimeAndFees.js";
import { PayWithCreditCard } from "../PayWIthCreditCard.js";
import { FiatFees } from "../swap/Fees.js";
import { Providers } from "./Providers.js";
export function FiatScreenContent(props) {
    const { toToken, tokenAmount, payer, client, setScreen, toChain, showCurrencySelector, selectedCurrency, } = props;
    const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
    const receiverAddress = defaultRecipientAddress || props.payer.account.address;
    const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();
    const [drawerScreen, setDrawerScreen] = useState("fees");
    const buyWithFiatOptions = props.payOptions.buyWithFiat;
    const [preferredProvider, setPreferredProvider] = useState(buyWithFiatOptions !== false
        ? buyWithFiatOptions?.preferredProvider ||
            (localStorage.getItem(PREFERRED_FIAT_PROVIDER_STORAGE_KEY) ??
                undefined)
        : undefined);
    const fiatQuoteQuery = useBuyWithFiatQuote(buyWithFiatOptions !== false && tokenAmount
        ? {
            fromCurrencySymbol: selectedCurrency.shorthand,
            toChainId: toChain.id,
            toAddress: receiverAddress,
            toTokenAddress: isNativeToken(toToken)
                ? NATIVE_TOKEN_ADDRESS
                : toToken.address,
            toAmount: tokenAmount,
            client,
            isTestMode: buyWithFiatOptions?.testMode,
            purchaseData: props.payOptions.purchaseData,
            fromAddress: payer.account.address,
            preferredProvider: preferredProvider,
        }
        : undefined);
    function handleSubmit() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setScreen({
            id: "fiat-flow",
            quote: fiatQuoteQuery.data,
        });
    }
    function showFees() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setDrawerScreen("fees");
        setIsOpen(true);
    }
    function showProviders() {
        setDrawerScreen("providers");
        setIsOpen(true);
    }
    const disableSubmit = !fiatQuoteQuery.data;
    const errorMsg = !fiatQuoteQuery.isLoading && fiatQuoteQuery.error
        ? getErrorMessage(fiatQuoteQuery.error)
        : undefined;
    return (_jsxs(Container, { flex: "column", gap: "lg", animate: "fadein", children: [isOpen && (_jsxs(_Fragment, { children: [_jsx(DrawerOverlay, { ref: drawerOverlayRef }), _jsxs(Drawer, { ref: drawerRef, close: () => setIsOpen(false), children: [drawerScreen === "fees" && fiatQuoteQuery.data && (_jsxs("div", { children: [_jsx(Text, { size: "lg", color: "primaryText", children: "Fees" }), _jsx(Spacer, { y: "lg" }), _jsx(FiatFees, { quote: fiatQuoteQuery.data })] })), drawerScreen === "providers" && (_jsxs("div", { children: [_jsx(Text, { size: "lg", color: "primaryText", children: "Providers" }), _jsx(Spacer, { y: "lg" }), _jsx(Providers, { preferredProvider: preferredProvider || fiatQuoteQuery.data?.provider, onSelect: (provider) => {
                                            setPreferredProvider(provider);
                                            // save the pref in local storage
                                            localStorage.setItem(PREFERRED_FIAT_PROVIDER_STORAGE_KEY, provider);
                                            setIsOpen(false);
                                        } })] }))] })] })), _jsxs(Container, { flex: "column", gap: "sm", children: [_jsx(Text, { size: "sm", children: "Pay with card" }), _jsxs("div", { children: [_jsx(PayWithCreditCard, { isLoading: fiatQuoteQuery.isLoading, value: fiatQuoteQuery.data?.fromCurrencyWithFees.amount, client: client, currency: selectedCurrency, onSelectCurrency: showCurrencySelector }), _jsxs(Container, { bg: "tertiaryBg", flex: "row", borderColor: "borderColor", style: {
                                    paddingLeft: spacing.md,
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                    borderWidth: "1px",
                                    borderStyle: "solid",
                                    borderBottom: "none",
                                }, children: [_jsx(Text, { size: "xs", color: "secondaryText", children: "Provider" }), _jsx(Button, { variant: "ghost", onClick: showProviders, children: _jsxs(Container, { flex: "row", center: "y", gap: "xxs", color: "secondaryText", children: [_jsx(Text, { size: "xs", children: preferredProvider
                                                        ? `${preferredProvider.charAt(0).toUpperCase() + preferredProvider.slice(1).toLowerCase()}`
                                                        : fiatQuoteQuery.data?.provider
                                                            ? `${fiatQuoteQuery.data?.provider.charAt(0).toUpperCase() + fiatQuoteQuery.data?.provider.slice(1).toLowerCase()}`
                                                            : "" }), _jsx(ChevronDownIcon, { width: iconSize.sm, height: iconSize.sm })] }) })] }), _jsx(EstimatedTimeAndFees, { quoteIsLoading: fiatQuoteQuery.isLoading, estimatedSeconds: fiatQuoteQuery.data?.estimatedDurationSeconds, onViewFees: showFees })] }), errorMsg && (_jsx("div", { children: errorMsg.data?.minimumAmountEth ? (_jsxs(Text, { color: "danger", size: "sm", center: true, multiline: true, children: ["Minimum amount is", " ", formatNumber(Number(errorMsg.data.minimumAmountEth), 6), " ", _jsx(TokenSymbol, { token: toToken, chain: toChain, size: "sm", inline: true, color: "danger" })] })) : (_jsxs("div", { children: [_jsx(Text, { color: "danger", size: "xs", center: true, multiline: true, children: errorMsg.title }), _jsx(Text, { size: "xs", center: true, multiline: true, children: errorMsg.message })] })) }))] }), errorMsg?.data?.minimumAmountEth ? (_jsx(Button, { variant: "accent", fullWidth: true, onClick: () => {
                    props.setTokenAmount(formatNumber(Number(errorMsg.data?.minimumAmountEth), 6).toString());
                    props.setHasEditedAmount(true);
                }, children: "Set Minimum" })) : (_jsx(Button, { variant: disableSubmit ? "outline" : "accent", "data-disabled": disableSubmit, disabled: disableSubmit, fullWidth: true, onClick: () => {
                    trackPayEvent({
                        event: "confirm_onramp_quote",
                        client: client,
                        walletAddress: payer.account.address,
                        walletType: payer.wallet.id,
                        toChainId: toChain.id,
                        toToken: isNativeToken(toToken) ? undefined : toToken.address,
                    });
                    handleSubmit();
                }, gap: "xs", children: fiatQuoteQuery.isLoading ? (_jsxs(_Fragment, { children: ["Getting price quote", _jsx(Spinner, { size: "sm", color: "accentText" })] })) : ("Continue") }))] }));
}
//# sourceMappingURL=FiatScreenContent.js.map