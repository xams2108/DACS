import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import { formatNumber } from "../../../../../utils/formatNumber.js";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, spacing, } from "../../../../core/design-system/index.js";
import { useChainName } from "../../../../core/hooks/others/useChainQuery.js";
import { PayTokenIcon } from "../../ConnectWallet/screens/Buy/PayTokenIcon.js";
import { Skeleton } from "../Skeleton.js";
import { Container } from "../basic.js";
import { Button } from "../buttons.js";
import { Text } from "../text.js";
import { TokenSymbol } from "./TokenSymbol.js";
export function TokenRow(props) {
    const { name } = useChainName(props.chain);
    if (!props.token || !props.chain) {
        return (_jsxs(Button, { variant: "secondary", fullWidth: true, style: {
                fontSize: fontSize.sm,
                justifyContent: "space-between",
                paddingTop: spacing.md,
                paddingBottom: spacing.md,
                ...props.style,
            }, gap: "xxs", onClick: props.onSelectToken, children: [_jsx(Text, { size: "sm", color: "primaryText", children: "Select payment token" }), _jsx(Container, { color: "primaryText", children: _jsx(ChevronDownIcon, { width: iconSize.sm, height: iconSize.sm }) })] }));
    }
    return (_jsxs(TokenButton, { variant: "secondary", fullWidth: true, style: {
            fontSize: fontSize.sm,
            ...props.style,
        }, gap: "xxs", onClick: props.onSelectToken, disabled: props.freezeChainAndToken, children: [_jsxs(Container, { flex: "row", center: "y", gap: "sm", children: [_jsx(PayTokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), _jsxs(Container, { flex: "column", gap: "4xs", children: [_jsx(Container, { flex: "column", gap: "4xs", children: props.isLoading ? (_jsx(Skeleton, { width: "120px", height: fontSize.md, color: "borderColor" })) : props.value ? (_jsxs(Container, { flex: "row", gap: "xxs", center: "y", color: "primaryText", children: [_jsx(Text, { size: "md", color: props.value ? "primaryText" : "secondaryText", children: formatNumber(Number(props.value), 6) || "" }), _jsx(TokenSymbol, { token: props.token, chain: props.chain, color: "secondaryText", size: "sm" })] })) : (_jsx(TokenSymbol, { token: props.token, chain: props.chain, size: "sm" })) }), name ? (_jsx(Text, { size: "xs", color: "secondaryText", children: name })) : (_jsx(Skeleton, { width: "90px", height: fontSize.xs }))] })] }), !props.freezeChainAndToken && (_jsx(Container, { color: "primaryText", children: _jsx(ChevronDownIcon, { width: iconSize.sm, height: iconSize.sm }) }))] }));
}
const TokenButton = /* @__PURE__ */ styled(Button)(() => {
    const theme = useCustomTheme();
    return {
        background: theme.colors.tertiaryBg,
        border: `1px solid ${theme.colors.borderColor}`,
        justifyContent: "space-between",
        transition: "background 0.3s",
        padding: spacing.sm,
    };
});
//# sourceMappingURL=TokenRow.js.map