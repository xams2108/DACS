import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { hexToNumber } from "@noble/curves/abstract/utils";
import { useMemo } from "react";
import { StyleSheet, View } from "react-native";
import { Defs, LinearGradient, Rect, Stop, Svg } from "react-native-svg";
import { useAccountContext } from "../../../../core/account/provider.js";
import { COLOR_OPTIONS } from "../../../../core/utils/account.js";
/**
 * A wrapper for the Blobbie component
 * @param props BlobbieProps
 * @beta
 * @wallet
 */
export function AccountBlobbie(props) {
    const { address } = useAccountContext();
    return _jsx(Blobbie, { ...props, address: address });
}
/**
 * A unique gradient avatar based on the provided address.
 * @param props The component props.
 * @param props.address The address to generate the gradient with.
 * @param props.style The style for the component
 * @param props.size The size of each side of the square avatar (in pixels)
 * @component
 * @wallet
 * @example
 * ```tsx
 * import { Blobbie } from "thirdweb/react";
 *
 * <Blobbie address="0x...." style={{ width: 40, height: 40 }} />
 * ```
 */
export function Blobbie(props) {
    const colors = useMemo(() => COLOR_OPTIONS[Number(hexToNumber(props.address.slice(2, 4))) % COLOR_OPTIONS.length], [props.address]);
    const containerStyle = useMemo(() => {
        const baseStyle = props.style || {};
        if (props.size) {
            return {
                ...baseStyle,
                width: props.size,
                height: props.size,
            };
        }
        return baseStyle;
    }, [props.style, props.size]);
    const gradientUniqueId = `grad${colors[0]}+${colors[1]}`.replace(/[^a-zA-Z0-9 ]/g, "");
    return (_jsx(View, { style: [styles.container, containerStyle], children: _jsxs(Svg, { height: "100%", width: "100%", style: StyleSheet.absoluteFillObject, children: [_jsx(Defs, { children: _jsxs(LinearGradient, { id: gradientUniqueId, x1: "0%", y1: "100%", x2: "100%", y2: "0%", children: [_jsx(Stop, { offset: "0", stopColor: colors[0] }), _jsx(Stop, { offset: "1", stopColor: colors[1] })] }) }), _jsx(Rect, { width: "100%", height: "100%", fill: `url(#${gradientUniqueId})` })] }) }));
}
const styles = StyleSheet.create({
    container: {
        overflow: "hidden",
    },
});
//# sourceMappingURL=blobbie.js.map