import type { EIP1193Provider } from "viem";
import type { Chain } from "../../chains/types.js";
import type { ThirdwebClient } from "../../client/client.js";
import type { InjectedSupportedWalletIds } from "../__generated__/wallet-ids.js";
import type { Account } from "../interfaces/wallet.js";
import type { DisconnectFn, SwitchChainFn } from "../types.js";
import type { WalletEmitter } from "../wallet-emitter.js";
import type { WalletId } from "../wallet-types.js";
export declare function getInjectedProvider(walletId: WalletId): import("../interfaces/ethereum.js").Ethereum;
/**
 * @internal
 */
export declare function connectEip1193Wallet({ id, provider, emitter, client, chain, }: {
    id: InjectedSupportedWalletIds | ({} & string);
    provider: EIP1193Provider;
    client: ThirdwebClient;
    chain?: Chain;
    emitter: WalletEmitter<InjectedSupportedWalletIds>;
}): Promise<ReturnType<typeof onConnect>>;
/**
 * @internal
 */
export declare function autoConnectEip1193Wallet({ id, provider, emitter, client, chain, }: {
    id: InjectedSupportedWalletIds | ({} & string);
    provider: EIP1193Provider;
    emitter: WalletEmitter<InjectedSupportedWalletIds>;
    client: ThirdwebClient;
    chain?: Chain;
}): Promise<ReturnType<typeof onConnect>>;
/**
 * Call this method when the wallet provider is connected or auto connected
 * @internal
 */
declare function onConnect({ provider, address, chain, emitter, client, id, }: {
    provider: EIP1193Provider;
    address: string;
    chain: Chain;
    emitter: WalletEmitter<InjectedSupportedWalletIds>;
    client: ThirdwebClient;
    id: WalletId | ({} & string);
}): Promise<[Account, Chain, DisconnectFn, SwitchChainFn]>;
export {};
//# sourceMappingURL=index.d.ts.map