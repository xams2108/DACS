import type { Chain } from "../../../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../../../client/client.js";
import type { Account } from "../../../../../../../wallets/interfaces/wallet.js";
import type { PayUIOptions } from "../../../../../../core/hooks/connection/ConnectButtonProps.js";
import type { PayEmbedConnectOptions } from "../../../../PayEmbed.js";
import type { ConnectLocale } from "../../../locale/types.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
import type { SelectedScreen } from "../main/types.js";
import type { PayerInfo } from "../types.js";
export declare function SwapScreenContent(props: {
    setScreen: (screen: SelectedScreen) => void;
    tokenAmount: string;
    toToken: ERC20OrNativeToken;
    toChain: Chain;
    fromChain: Chain | undefined;
    fromToken: ERC20OrNativeToken | undefined;
    showFromTokenSelector: () => void;
    payer: PayerInfo;
    client: ThirdwebClient;
    payOptions: PayUIOptions;
    isEmbed: boolean;
    onDone: () => void;
    connectOptions: PayEmbedConnectOptions | undefined;
    connectLocale: ConnectLocale;
    setPayer: (payer: PayerInfo) => void;
    activeAccount: Account;
    setTokenAmount: (amount: string) => void;
    setHasEditedAmount: (hasEdited: boolean) => void;
    disableTokenSelection: boolean;
}): import("react/jsx-runtime.js").JSX.Element;
//# sourceMappingURL=SwapScreenContent.d.ts.map