import { type UseQueryOptions } from "@tanstack/react-query";
import type { JSX } from "react";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export interface NFTDescriptionProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, "children"> {
    loadingComponent?: JSX.Element;
    fallbackComponent?: JSX.Element;
    /**
     * Optional `useQuery` params
     */
    queryOptions?: Omit<UseQueryOptions<string>, "queryFn" | "queryKey">;
    /**
     * This prop can be a string or a (async) function that resolves to a string, representing the description of the NFT
     * This is particularly useful if you already have a way to fetch the data.
     */
    descriptionResolver?: string | (() => string) | (() => Promise<string>);
}
/**
 * This component fetches and displays an NFT's description. It inherits all the attributes of a <span>
 * so you can style it just like how you would style a <span> element.
 * @returns A <span> element containing the description of the NFT
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription />
 * </NFTProvider>
 * ```
 *
 * ### Show a loading sign while the description is being fetched
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription loadingComponent={<YourLoadingSign />} />
 * </NFTProvider>
 * ```
 *
 * ### Show something in case the description failed to resolve
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription fallbackComponent={<span>Failed to load description</span>} />
 * </NFTProvider>
 * ```
 *
 * ### Custom query options for useQuery (tanstack-query)
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription queryOptions={{ retry: 3, enabled: false, }} />
 * </NFTProvider>
 * ```
 *
 * ### Override the description with the `descriptionResolver` prop
 * If you already have the url, you can skip the network requests and pass it directly to the NFTDescription
 * ```tsx
 * <NFTDescription descriptionResolver="The desc of the NFT" />
 * ```
 *
 * You can also pass in your own custom (async) function that retrieves the description
 * ```tsx
 * const getDescription = async () => {
 *   // ...
 *   return description;
 * };
 *
 * <NFTDescription descriptionResolver={getDescription} />
 * ```
 * @component
 * @nft
 * @beta
 */
export declare function NFTDescription({ loadingComponent, fallbackComponent, queryOptions, descriptionResolver, ...restProps }: NFTDescriptionProps): import("react/jsx-runtime.js").JSX.Element | null;
/**
 * @internal Exported for tests
 */
export declare function fetchNftDescription(props: {
    descriptionResolver?: string | (() => string) | (() => Promise<string>);
    contract: ThirdwebContract;
    tokenId: bigint;
}): Promise<string>;
//# sourceMappingURL=description.d.ts.map