import { type AaExecutionOptions, type AaZksyncExecutionOptions } from "@thirdweb-dev/engine";
import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import type { PreparedTransaction } from "../transaction/prepare-transaction.js";
import type { Account } from "../wallets/interfaces/wallet.js";
/**
 * Options for creating an server wallet.
 */
export type ServerWalletOptions = {
    /**
     * The thirdweb client to use for authentication to thirdweb services.
     */
    client: ThirdwebClient;
    /**
     * The vault access token to use your server wallet.
     */
    vaultAccessToken: string;
    /**
     * The server wallet address to use for sending transactions inside engine.
     */
    address: string;
    /**
     * The chain to use for signing messages and typed data (smart server wallet only).
     */
    chain?: Chain;
    /**
     * Optional custom execution options to use for sending transactions and signing data.
     */
    executionOptions?: Omit<AaExecutionOptions, "chainId"> | Omit<AaZksyncExecutionOptions, "chainId">;
};
export type ServerWallet = Account & {
    enqueueTransaction: (args: {
        transaction: PreparedTransaction;
        simulate?: boolean;
    }) => Promise<{
        transactionId: string;
    }>;
};
/**
 * Create a server wallet for sending transactions and signing messages via engine (v3+).
 * @param options - The server wallet options.
 * @returns An account object that can be used to send transactions and sign messages.
 * @engine
 * @example
 * ### Creating a server wallet
 * ```ts
 * import { Engine } from "thirdweb";
 *
 * const client = createThirdwebClient({
 *   secretKey: "<your-project-secret-key>",
 * });
 *
 * const myServerWallet = Engine.serverWallet({
 *   client,
 *   address: "<your-server-wallet-address>",
 *   vaultAccessToken: "<your-vault-access-token>",
 * });
 * ```
 *
 * ### Sending a transaction
 * ```ts
 * // prepare the transaction
 * const transaction = claimTo({
 *   contract,
 *   to: "0x...",
 *   quantity: 1n,
 * });
 *
 * // enqueue the transaction
 * const { transactionId } = await myServerWallet.enqueueTransaction({
 *   transaction,
 * });
 * ```
 *
 * ### Polling for the transaction to be submitted onchain
 * ```ts
 * // optionally poll for the transaction to be submitted onchain
 * const { transactionHash } = await Engine.waitForTransactionHash({
 *   client,
 *   transactionId,
 * });
 * console.log("Transaction sent:", transactionHash);
 * ```
 *
 * ### Getting the execution status of a transaction
 * ```ts
 * const executionResult = await Engine.getTransactionStatus({
 *   client,
 *   transactionId,
 * });
 * console.log("Transaction status:", executionResult.status);
 * ```
 */
export declare function serverWallet(options: ServerWalletOptions): ServerWallet;
//# sourceMappingURL=server-wallet.d.ts.map