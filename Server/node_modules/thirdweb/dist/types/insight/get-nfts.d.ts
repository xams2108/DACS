import type { GetV1NftsByContractAddressByTokenIdData, GetV1NftsByContractAddressData, GetV1NftsData } from "@thirdweb-dev/insight";
import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import type { NFT } from "../utils/nft/parseNft.js";
/**
 * Get NFTs owned by an address
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const nfts = await Insight.getOwnedNFTs({
 *   client,
 *   chains: [sepolia],
 *   ownerAddress: "0x1234567890123456789012345678901234567890",
 * });
 * ```
 * @insight
 */
export declare function getOwnedNFTs(args: {
    client: ThirdwebClient;
    chains: Chain[];
    ownerAddress: string;
    includeMetadata?: boolean;
    queryOptions?: Omit<GetV1NftsData["query"], "owner_address" | "chain">;
}): Promise<(NFT & {
    quantityOwned: bigint;
})[]>;
/**
 * Get all NFTs from a contract
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const nfts = await Insight.getContractNFTs({
 *   client,
 *   chains: [sepolia],
 *   contractAddress: "0x1234567890123456789012345678901234567890",
 * });
 * ```
 * @insight
 */
export declare function getContractNFTs(args: {
    client: ThirdwebClient;
    chains: Chain[];
    contractAddress: string;
    includeMetadata?: boolean;
    includeOwners?: boolean;
    queryOptions?: Omit<GetV1NftsByContractAddressData["query"], "chain">;
}): Promise<NFT[]>;
/**
 * Get NFT metadata by contract address and token id
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const nft = await Insight.getNFT({
 *   client,
 *   chain: sepolia,
 *   contractAddress: "0x1234567890123456789012345678901234567890",
 *   tokenId: 1n,
 * });
 * ```
 * @insight
 */
export declare function getNFT(args: {
    client: ThirdwebClient;
    chain: Chain;
    contractAddress: string;
    tokenId: bigint | number | string;
    includeOwners?: boolean;
    queryOptions?: GetV1NftsByContractAddressByTokenIdData["query"];
}): Promise<NFT | undefined>;
//# sourceMappingURL=get-nfts.d.ts.map