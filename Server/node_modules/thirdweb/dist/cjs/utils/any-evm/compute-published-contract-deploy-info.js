"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeDeploymentInfoFromContractId = computeDeploymentInfoFromContractId;
exports.computeDeploymentInfoFromMetadata = computeDeploymentInfoFromMetadata;
exports.computeDeploymentInfoFromBytecode = computeDeploymentInfoFromBytecode;
const viem_1 = require("viem");
const publisher_js_1 = require("../../contract/deployment/publisher.js");
const create_2_factory_js_1 = require("../../contract/deployment/utils/create-2-factory.js");
const compute_ref_deployments_js_1 = require("../../extensions/prebuilts/compute-ref-deployments.js");
const encodeAbiParameters_js_1 = require("../abi/encodeAbiParameters.js");
const normalizeFunctionParams_js_1 = require("../abi/normalizeFunctionParams.js");
const prefix_js_1 = require("../bytecode/prefix.js");
const deploy_metadata_js_1 = require("./deploy-metadata.js");
const encode_extra_data_with_uri_js_1 = require("./encode-extra-data-with-uri.js");
const get_init_bytecode_with_salt_js_1 = require("./get-init-bytecode-with-salt.js");
/**
 * @internal
 */
async function computeDeploymentInfoFromContractId(args) {
    const { client, chain, contractId, constructorParams, salt } = args;
    const contractMetadata = await (0, publisher_js_1.fetchPublishedContractMetadata)({
        client,
        contractId,
        publisher: args.publisher,
        version: args.version,
    });
    return computeDeploymentInfoFromMetadata({
        client,
        chain,
        contractMetadata,
        constructorParams,
        salt,
    });
}
/**
 * @internal
 */
async function computeDeploymentInfoFromMetadata(args) {
    const { client, chain, constructorParams, contractMetadata } = args;
    const definedConstructorParams = constructorParams || contractMetadata.constructorParams;
    let processedConstructorParams;
    if (definedConstructorParams) {
        processedConstructorParams = {};
        for (const key in definedConstructorParams) {
            processedConstructorParams[key] = await (0, compute_ref_deployments_js_1.computeRefDeployments)({
                client,
                chain,
                paramValue: definedConstructorParams[key],
            });
        }
    }
    const isStylus = contractMetadata.metadata.language === "rust";
    return computeDeploymentInfoFromBytecode({
        client: args.client,
        chain: args.chain,
        abi: args.contractMetadata.abi,
        bytecode: await (0, deploy_metadata_js_1.fetchBytecodeFromCompilerMetadata)({
            compilerMetadata: args.contractMetadata,
            client: args.client,
            chain: args.chain,
        }),
        constructorParams: processedConstructorParams,
        salt: args.salt,
        extraDataWithUri: isStylus
            ? (0, encode_extra_data_with_uri_js_1.encodeExtraDataWithUri)({
                metadataUri: contractMetadata.metadataUri,
            })
            : undefined,
    });
}
async function computeDeploymentInfoFromBytecode(args) {
    const { client, chain, constructorParams, salt, extraDataWithUri } = args;
    const create2FactoryAddress = await (0, create_2_factory_js_1.computeCreate2FactoryAddress)({
        client,
        chain,
    });
    const bytecode = (0, prefix_js_1.ensureBytecodePrefix)(args.bytecode);
    const constructorAbi = args.abi.find((abi) => abi.type === "constructor");
    const encodedArgs = (0, encodeAbiParameters_js_1.encodeAbiParameters)(constructorAbi?.inputs ?? [], (0, normalizeFunctionParams_js_1.normalizeFunctionParams)(constructorAbi, constructorParams));
    const initBytecodeWithsalt = (0, get_init_bytecode_with_salt_js_1.getInitBytecodeWithSalt)({
        bytecode,
        encodedArgs,
        salt,
    });
    const initCalldata = extraDataWithUri
        ? (0, viem_1.encodePacked)(["bytes", "bytes"], [initBytecodeWithsalt, extraDataWithUri])
        : initBytecodeWithsalt;
    return {
        bytecode,
        initCalldata,
        encodedArgs,
        create2FactoryAddress,
        salt,
        extraDataWithUri,
    };
}
//# sourceMappingURL=compute-published-contract-deploy-info.js.map