"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInjectedProvider = getInjectedProvider;
exports.connectEip1193Wallet = connectEip1193Wallet;
exports.autoConnectEip1193Wallet = autoConnectEip1193Wallet;
const viem_1 = require("viem");
const transaction_js_1 = require("../../analytics/track/transaction.js");
const utils_js_1 = require("../../chains/utils.js");
const address_js_1 = require("../../utils/address.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const parse_typed_data_js_1 = require("../../utils/signatures/helpers/parse-typed-data.js");
const chains_js_1 = require("../utils/chains.js");
const normalizeChainId_js_1 = require("../utils/normalizeChainId.js");
const mipdStore_js_1 = require("./mipdStore.js");
// TODO: save the provider in data
function getInjectedProvider(walletId) {
    const provider = (0, mipdStore_js_1.injectedProvider)(walletId);
    if (!provider) {
        throw new Error(`No injected provider found for wallet: "${walletId}"`);
    }
    return provider;
}
/**
 * @internal
 */
async function connectEip1193Wallet({ id, provider, emitter, client, chain, }) {
    let addresses;
    const retries = 3;
    let attempts = 0;
    // retry 3 times, some providers take a while to return accounts on connect
    while (!addresses?.[0] && attempts < retries) {
        try {
            addresses = await provider.request({
                method: "eth_requestAccounts",
            });
        }
        catch (e) {
            console.error(e);
            if (extractErrorMessage(e)?.toLowerCase()?.includes("rejected")) {
                throw e;
            }
            await new Promise((resolve) => setTimeout(resolve, 500));
        }
        attempts++;
    }
    const addr = addresses?.[0];
    if (!addr) {
        throw new Error("Failed to connect to wallet, no accounts available");
    }
    // use the first account
    const address = (0, address_js_1.getAddress)(addr);
    // get the chainId the provider is on
    const chainId = await provider
        .request({ method: "eth_chainId" })
        .then(normalizeChainId_js_1.normalizeChainId)
        .catch((e) => {
        throw new Error("Error reading chainId from provider", e);
    });
    let connectedChain = chain && chain.id === chainId ? chain : (0, utils_js_1.getCachedChain)(chainId);
    try {
        // if we want a specific chainId and it is not the same as the provider chainId, trigger switchChain
        // we check for undefined chain ID since some chain-specific wallets like Abstract will not send a chain ID on connection
        if (chain && typeof chain.id !== "undefined" && chain.id !== chainId) {
            await switchChain(provider, chain);
            connectedChain = chain;
        }
    }
    catch {
        console.warn(`Error switching to chain ${chain?.id} - defaulting to wallet chain (${chainId})`);
    }
    return onConnect({
        provider,
        address,
        chain: connectedChain,
        emitter,
        client,
        id,
    });
}
/**
 * @internal
 */
async function autoConnectEip1193Wallet({ id, provider, emitter, client, chain, }) {
    // connected accounts
    const addresses = await provider.request({
        method: "eth_accounts",
    });
    const addr = addresses[0];
    if (!addr) {
        throw new Error("Failed to connect to wallet, no accounts available");
    }
    // use the first account
    const address = (0, address_js_1.getAddress)(addr);
    // get the chainId the provider is on
    const chainId = await provider
        .request({ method: "eth_chainId" })
        .then(normalizeChainId_js_1.normalizeChainId);
    const connectedChain = chain && chain.id === chainId ? chain : (0, utils_js_1.getCachedChain)(chainId);
    return onConnect({
        provider,
        address,
        chain: connectedChain,
        emitter,
        client,
        id,
    });
}
function createAccount({ provider, address, client, id, }) {
    const account = {
        address: (0, address_js_1.getAddress)(address),
        async sendTransaction(tx) {
            const gasFees = tx.gasPrice
                ? {
                    gasPrice: tx.gasPrice ? (0, hex_js_1.numberToHex)(tx.gasPrice) : undefined,
                }
                : {
                    maxFeePerGas: tx.maxFeePerGas
                        ? (0, hex_js_1.numberToHex)(tx.maxFeePerGas)
                        : undefined,
                    maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                        ? (0, hex_js_1.numberToHex)(tx.maxPriorityFeePerGas)
                        : undefined,
                };
            const params = [
                {
                    ...gasFees,
                    nonce: tx.nonce ? (0, hex_js_1.numberToHex)(tx.nonce) : undefined,
                    accessList: tx.accessList,
                    value: tx.value ? (0, hex_js_1.numberToHex)(tx.value) : undefined,
                    gas: tx.gas ? (0, hex_js_1.numberToHex)(tx.gas) : undefined,
                    from: this.address,
                    to: tx.to ? (0, address_js_1.getAddress)(tx.to) : undefined,
                    data: tx.data,
                    ...tx.eip712,
                },
            ];
            const transactionHash = (await provider.request({
                method: "eth_sendTransaction",
                // @ts-expect-error - overriding types here
                params,
            }));
            (0, transaction_js_1.trackTransaction)({
                client,
                chainId: tx.chainId,
                walletAddress: (0, address_js_1.getAddress)(address),
                walletType: id,
                transactionHash,
                contractAddress: tx.to ?? undefined,
                gasPrice: tx.gasPrice,
            });
            return {
                transactionHash,
            };
        },
        async signMessage({ message }) {
            if (!account.address) {
                throw new Error("Provider not setup");
            }
            const messageToSign = (() => {
                if (typeof message === "string") {
                    return (0, hex_js_1.stringToHex)(message);
                }
                if (message.raw instanceof Uint8Array) {
                    return (0, hex_js_1.uint8ArrayToHex)(message.raw);
                }
                return message.raw;
            })();
            return await provider.request({
                method: "personal_sign",
                params: [messageToSign, (0, address_js_1.getAddress)(account.address)],
            });
        },
        async signTypedData(typedData) {
            if (!provider || !account.address) {
                throw new Error("Provider not setup");
            }
            const parsedTypedData = (0, parse_typed_data_js_1.parseTypedData)(typedData);
            const { domain, message, primaryType } = parsedTypedData;
            const types = {
                EIP712Domain: (0, viem_1.getTypesForEIP712Domain)({ domain }),
                ...parsedTypedData.types,
            };
            // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc
            // as we can't statically check this with TypeScript.
            (0, viem_1.validateTypedData)({ domain, message, primaryType, types });
            const stringifiedData = (0, viem_1.serializeTypedData)({
                domain: domain ?? {},
                message,
                primaryType,
                types,
            });
            return await provider.request({
                method: "eth_signTypedData_v4",
                params: [(0, address_js_1.getAddress)(account.address), stringifiedData],
            });
        },
        async watchAsset(asset) {
            const result = await provider.request({
                method: "wallet_watchAsset",
                params: asset,
            }, { retryCount: 0 });
            return result;
        },
    };
    return account;
}
/**
 * Call this method when the wallet provider is connected or auto connected
 * @internal
 */
async function onConnect({ provider, address, chain, emitter, client, id, }) {
    const account = createAccount({ provider, address, client, id });
    async function disconnect() {
        provider.removeListener("accountsChanged", onAccountsChanged);
        provider.removeListener("chainChanged", onChainChanged);
        provider.removeListener("disconnect", onDisconnect);
    }
    async function onDisconnect() {
        disconnect();
        emitter.emit("disconnect", undefined);
    }
    function onAccountsChanged(accounts) {
        if (accounts[0]) {
            const newAccount = createAccount({
                provider,
                address: (0, address_js_1.getAddress)(accounts[0]),
                client,
                id,
            });
            emitter.emit("accountChanged", newAccount);
            emitter.emit("accountsChanged", accounts);
        }
        else {
            onDisconnect();
        }
    }
    function onChainChanged(newChainId) {
        const newChain = (0, utils_js_1.getCachedChain)((0, normalizeChainId_js_1.normalizeChainId)(newChainId));
        emitter.emit("chainChanged", newChain);
    }
    if (provider.on) {
        provider.on("accountsChanged", onAccountsChanged);
        provider.on("chainChanged", onChainChanged);
        provider.on("disconnect", onDisconnect);
    }
    return [
        account,
        chain,
        onDisconnect,
        (newChain) => switchChain(provider, newChain),
    ];
}
/**
 * @internal
 */
async function switchChain(provider, chain) {
    const hexChainId = (0, hex_js_1.numberToHex)(chain.id);
    try {
        await provider.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: hexChainId }],
        });
    }
    catch {
        // if chain does not exist, add the chain
        const apiChain = await (0, utils_js_1.getChainMetadata)(chain);
        await provider.request({
            method: "wallet_addEthereumChain",
            params: [
                {
                    chainId: hexChainId,
                    chainName: apiChain.name,
                    nativeCurrency: apiChain.nativeCurrency,
                    rpcUrls: (0, chains_js_1.getValidPublicRPCUrl)(apiChain), // no client id on purpose here
                    blockExplorerUrls: apiChain.explorers?.map((x) => x.url),
                },
            ],
        });
    }
}
function extractErrorMessage(e) {
    if (e instanceof Error) {
        return e.message;
    }
    if (typeof e === "string") {
        return e;
    }
    if (typeof e === "object" && e !== null) {
        return JSON.stringify(e);
    }
    return String(e);
}
//# sourceMappingURL=index.js.map