"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.predictSmartAccountAddress = predictSmartAccountAddress;
exports.predictAddress = predictAddress;
exports.prepareCreateAccount = prepareCreateAccount;
exports.prepareExecute = prepareExecute;
exports.prepareBatchExecute = prepareBatchExecute;
const contract_js_1 = require("../../../contract/contract.js");
const prepare_contract_call_js_1 = require("../../../transaction/prepare-contract-call.js");
const read_contract_js_1 = require("../../../transaction/read-contract.js");
const hex_js_1 = require("../../../utils/encoding/hex.js");
const withCache_js_1 = require("../../../utils/promise/withCache.js");
const constants_js_1 = require("./constants.js");
/**
 * Predict the address of a smart account.
 * @param args - The options for predicting the address of a smart account.
 * @returns The predicted address of the smart account.
 * @example
 * ```ts
 * import { predictSmartAccountAddress } from "thirdweb/wallets/smart";
 *
 * const predictedAddress = await predictSmartAccountAddress({
 *  client,
 *  chain,
 *  adminAddress,
 * });
 * ```
 * @walletUtils
 */
async function predictSmartAccountAddress(args) {
    return predictAddress({
        adminAddress: args.adminAddress,
        accountSalt: args.accountSalt,
        factoryContract: (0, contract_js_1.getContract)({
            address: args.factoryAddress ?? constants_js_1.DEFAULT_ACCOUNT_FACTORY_V0_6,
            chain: args.chain,
            client: args.client,
        }),
    });
}
/**
 * Predict the address of a smart account.
 * @param args - The options for predicting the address of a smart account.
 * @returns The predicted address of the smart account.
 * @example
 * ```ts
 * import { predictAddress } from "thirdweb/wallets/smart";
 *
 * const predictedAddress = await predictAddress({
 *  factoryContract,
 *  adminAddress,
 *  accountSalt,
 * });
 * ```
 * @walletUtils
 * @deprecated Use `predictSmartAccountAddress` instead.
 */
async function predictAddress(args) {
    const { factoryContract, predictAddressOverride: predictAddress, adminAddress, accountSalt, accountAddress, } = args;
    if (predictAddress) {
        return predictAddress(factoryContract, adminAddress);
    }
    if (accountAddress) {
        return accountAddress;
    }
    if (!adminAddress) {
        throw new Error("Account address is required to predict the smart wallet address.");
    }
    return (0, withCache_js_1.withCache)(async () => {
        const saltHex = accountSalt && (0, hex_js_1.isHex)(accountSalt)
            ? accountSalt
            : (0, hex_js_1.stringToHex)(accountSalt ?? "");
        let result;
        let retries = 0;
        const maxRetries = 3;
        while (retries <= maxRetries) {
            try {
                result = await (0, read_contract_js_1.readContract)({
                    contract: factoryContract,
                    method: "function getAddress(address, bytes) returns (address)",
                    params: [adminAddress, saltHex],
                });
                break;
            }
            catch (error) {
                if (retries === maxRetries) {
                    throw error;
                }
                // Exponential backoff: 2^(retries + 1) * 200ms (400ms, 800ms, 1600ms)
                const delay = 2 ** (retries + 1) * 200;
                await new Promise((resolve) => setTimeout(resolve, delay));
                retries++;
            }
        }
        if (!result) {
            throw new Error(`No smart account address found for admin address ${adminAddress} and salt ${accountSalt}`);
        }
        return result;
    }, {
        cacheKey: `${args.factoryContract.chain.id}-${args.factoryContract.address}-${args.adminAddress}-${args.accountSalt}`,
        cacheTime: 1000 * 60 * 60 * 24, // 1 day
    });
}
/**
 * @internal
 */
function prepareCreateAccount(args) {
    const { adminAddress, factoryContract, createAccountOverride: createAccount, accountSalt, } = args;
    if (createAccount) {
        return createAccount(factoryContract, adminAddress);
    }
    const saltHex = accountSalt && (0, hex_js_1.isHex)(accountSalt)
        ? accountSalt
        : (0, hex_js_1.stringToHex)(accountSalt ?? "");
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: factoryContract,
        method: "function createAccount(address, bytes) returns (address)",
        params: [adminAddress, saltHex],
    });
}
/**
 * @internal
 */
function prepareExecute(args) {
    const { accountContract, transaction, executeOverride: execute } = args;
    if (execute) {
        return execute(accountContract, transaction);
    }
    let value = transaction.value || 0n;
    // special handling of hedera chains, decimals for native value is 8 instead of 18 when passed as contract params
    if (transaction.chainId === 295 || transaction.chainId === 296) {
        value = BigInt(value) / BigInt(10 ** 10);
    }
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: accountContract,
        method: "function execute(address, uint256, bytes)",
        params: [transaction.to || "", value, transaction.data || "0x"],
        // if gas is specified for the inner tx, use that and add 21k for the execute call on the account contract
        // this avoids another estimateGas call when bundling the userOp
        // and also allows for passing custom gas limits for the inner tx
        gas: transaction.gas ? transaction.gas + 21000n : undefined,
    });
}
/**
 * @internal
 */
function prepareBatchExecute(args) {
    const { accountContract, transactions, executeBatchOverride: executeBatch, } = args;
    if (executeBatch) {
        return executeBatch(accountContract, transactions);
    }
    let values = transactions.map((tx) => tx.value || 0n);
    const chainId = transactions[0]?.chainId;
    // special handling of hedera chains, decimals for native value is 8 instead of 18 when passed as contract params
    if (chainId === 295 || chainId === 296) {
        values = values.map((value) => BigInt(value) / BigInt(10 ** 10));
    }
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: accountContract,
        method: "function executeBatch(address[], uint256[], bytes[])",
        params: [
            transactions.map((tx) => tx.to || ""),
            values,
            transactions.map((tx) => tx.data || "0x"),
        ],
    });
}
//# sourceMappingURL=calls.js.map