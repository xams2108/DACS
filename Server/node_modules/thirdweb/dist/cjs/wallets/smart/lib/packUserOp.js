"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackedUserOperation = void 0;
const viem_1 = require("viem");
function getInitCode(unpackedUserOperation) {
    return unpackedUserOperation.factory
        ? (0, viem_1.concat)([
            unpackedUserOperation.factory,
            unpackedUserOperation.factoryData || "0x",
        ])
        : "0x";
}
function getAccountGasLimits(unpackedUserOperation) {
    return (0, viem_1.concat)([
        (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.verificationGasLimit)), {
            size: 16,
        }),
        (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.callGasLimit)), { size: 16 }),
    ]);
}
function getGasLimits(unpackedUserOperation) {
    return (0, viem_1.concat)([
        (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.maxPriorityFeePerGas)), {
            size: 16,
        }),
        (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.maxFeePerGas)), { size: 16 }),
    ]);
}
function getPaymasterAndData(unpackedUserOperation) {
    return unpackedUserOperation.paymaster
        ? (0, viem_1.concat)([
            unpackedUserOperation.paymaster,
            (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.paymasterVerificationGasLimit || 0)), {
                size: 16,
            }),
            (0, viem_1.pad)((0, viem_1.toHex)(BigInt(unpackedUserOperation.paymasterPostOpGasLimit || 0)), {
                size: 16,
            }),
            unpackedUserOperation.paymasterData || "0x",
        ])
        : "0x";
}
const getPackedUserOperation = (userOperation) => {
    return {
        sender: userOperation.sender,
        nonce: BigInt(userOperation.nonce),
        initCode: getInitCode(userOperation),
        callData: userOperation.callData,
        accountGasLimits: getAccountGasLimits(userOperation),
        preVerificationGas: BigInt(userOperation.preVerificationGas),
        gasFees: getGasLimits(userOperation),
        paymasterAndData: getPaymasterAndData(userOperation),
        signature: userOperation.signature,
    };
};
exports.getPackedUserOperation = getPackedUserOperation;
//# sourceMappingURL=packUserOp.js.map