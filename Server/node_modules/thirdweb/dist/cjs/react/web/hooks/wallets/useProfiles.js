"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useProfiles = useProfiles;
const react_query_1 = require("@tanstack/react-query");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const index_js_1 = require("../../../../wallets/in-app/web/lib/auth/index.js");
const useConnectedWallets_js_1 = require("../../../core/hooks/wallets/useConnectedWallets.js");
/**
 * Retrieves all linked profiles of the connected in-app or ecosystem account.
 *
 * @returns A React Query result containing the linked profiles for the connected in-app account.
 *  This hook will only run if the connected wallet supports account linking.
 *
 * @example
 * ```jsx
 * import { useProfiles } from "thirdweb/react";
 *
 * const { data: profiles } = useProfiles({
 *   client,
 * });
 *
 * console.log("Type:", profiles[0].type); // "discord"
 * console.log("Email:", profiles[0].details.email); // "john.doe@example.com"
 * ```
 *
 * @wallet
 */
function useProfiles(args) {
    const wallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    const enabled = wallets.length > 0 &&
        wallets.some((w) => w.id === "inApp" || (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(w));
    return (0, react_query_1.useQuery)({
        queryKey: [
            "profiles",
            wallets.map((w) => `${w.id}-${w.getAccount()?.address}`),
        ],
        enabled,
        queryFn: async () => {
            const ecosystemWallet = wallets.find((w) => (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(w));
            const ecosystem = ecosystemWallet
                ? {
                    id: ecosystemWallet.id,
                    partnerId: ecosystemWallet.getConfig()?.partnerId,
                }
                : undefined;
            return (0, index_js_1.getProfiles)({
                client: args.client,
                ecosystem,
            });
        },
    });
}
//# sourceMappingURL=useProfiles.js.map