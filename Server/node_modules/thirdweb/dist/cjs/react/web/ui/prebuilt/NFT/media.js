"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTMedia = NFTMedia;
exports.getQueryKey = getQueryKey;
exports.fetchNftMedia = fetchNftMedia;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const function_id_js_1 = require("../../../../../utils/function-id.js");
const MediaRenderer_js_1 = require("../../MediaRenderer/MediaRenderer.js");
const provider_js_1 = require("./provider.js");
const utils_js_1 = require("./utils.js");
/**
 * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/refernces/typescript/v5/MediaRenderer) under the hood
 * so you can style it just like how you would style a MediaRenderer.
 * @returns A MediaRenderer component
 *
 * @component
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia />
 * </NFTProvider>
 * ```
 *
 * ### Show a loading sign while the media is being fetched
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia loadingComponent={<YourLoadingSign />} />
 * </NFTProvider>
 * ```
 *
 * ### Show something in case the media failed to resolve
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia fallbackComponent={<span>Failed to load media</span>} />
 * </NFTProvider>
 * ```
 *
 * ### Custom query options for useQuery (tanstack-query)
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia queryOptions={{ retry: 3, enabled: false, }} />
 * </NFTProvider>
 * ```
 *
 * ### Basic stylings
 *
 * You can style NFTMedia with the `style` and `className` props.
 *
 * ```tsx
 * <NFTMedia style={{ borderRadius: "8px" }} className="mx-auto" />
 * ```
 *
 * ### Override the media with the `mediaResolver` prop
 * If you already have the url, you can skip the network requests and pass it directly to the NFTMedia
 * ```tsx
 * <NFTMedia mediaResolver={{
 *   src: "/cat_video.mp4",
 *   // Poster is applicable to medias that are videos and audios
 *   poster: "/cat-image.png",
 * }} />
 * ```
 *
 * You can also pass in your own custom (async) function that retrieves the media url
 * ```tsx
 * const getMedia = async () => {
 *   const url = getNFTMedia(props);
 *   return url;
 * };
 *
 * <NFTMedia mediaResolver={getMedia} />
 * ```
 * @nft
 * @beta
 */
function NFTMedia({ loadingComponent, fallbackComponent, queryOptions, mediaResolver, ...mediaRendererProps }) {
    const { contract, tokenId } = (0, provider_js_1.useNFTContext)();
    const mediaQuery = (0, react_query_1.useQuery)({
        queryKey: getQueryKey({
            contractAddress: contract.address,
            chainId: contract.chain.id,
            tokenId,
            mediaResolver,
        }),
        queryFn: async () => fetchNftMedia({ mediaResolver, contract, tokenId }),
        ...queryOptions,
    });
    if (mediaQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!mediaQuery.data) {
        return fallbackComponent || null;
    }
    return ((0, jsx_runtime_1.jsx)(MediaRenderer_js_1.MediaRenderer, { client: contract.client, src: mediaQuery.data.src, poster: mediaQuery.data.poster, ...mediaRendererProps }));
}
/**
 * @internal
 */
function getQueryKey(props) {
    const { chainId, tokenId, mediaResolver, contractAddress } = props;
    return [
        "_internal_nft_media_",
        chainId,
        contractAddress,
        tokenId.toString(),
        {
            resolver: typeof mediaResolver === "object"
                ? mediaResolver
                : typeof mediaResolver === "function"
                    ? (0, function_id_js_1.getFunctionId)(mediaResolver)
                    : undefined,
        },
    ];
}
/**
 * @internal Exported for tests only
 */
async function fetchNftMedia(props) {
    const { mediaResolver, contract, tokenId } = props;
    if (typeof mediaResolver === "object") {
        return mediaResolver;
    }
    if (typeof mediaResolver === "function") {
        return mediaResolver();
    }
    const nft = await (0, utils_js_1.getNFTInfo)({ contract, tokenId }).catch(() => undefined);
    if (!nft) {
        throw new Error("Failed to resolve NFT info");
    }
    const animation_url = nft.metadata.animation_url;
    const image = nft.metadata.image || nft.metadata.image_url;
    if (animation_url) {
        return {
            src: animation_url,
            poster: image || undefined,
        };
    }
    if (image) {
        return {
            src: image,
            poster: undefined,
        };
    }
    throw new Error("Failed to resolve NFT media");
}
//# sourceMappingURL=media.js.map