"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionModeScreen = TransactionModeScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const pay_js_1 = require("../../../../../../analytics/track/pay.js");
const addresses_js_1 = require("../../../../../../constants/addresses.js");
const formatNumber_js_1 = require("../../../../../../utils/formatNumber.js");
const units_js_1 = require("../../../../../../utils/units.js");
const CustomThemeProvider_js_1 = require("../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../core/hooks/others/useChainQuery.js");
const useWalletBalance_js_1 = require("../../../../../core/hooks/others/useWalletBalance.js");
const useActiveAccount_js_1 = require("../../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../../../core/hooks/wallets/useActiveWallet.js");
const wallet_js_1 = require("../../../../../core/utils/wallet.js");
const ErrorState_js_1 = require("../../../../wallets/shared/ErrorState.js");
const LoadingScreen_js_1 = require("../../../../wallets/shared/LoadingScreen.js");
const ChainIcon_js_1 = require("../../../components/ChainIcon.js");
const Img_js_1 = require("../../../components/Img.js");
const Skeleton_js_1 = require("../../../components/Skeleton.js");
const Spacer_js_1 = require("../../../components/Spacer.js");
const TokenIcon_js_1 = require("../../../components/TokenIcon.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const text_js_1 = require("../../../components/text.js");
const TokenSymbol_js_1 = require("../../../components/token/TokenSymbol.js");
const ConnectButton_js_1 = require("../../ConnectButton.js");
const PoweredByTW_js_1 = require("../../PoweredByTW.js");
const OutlineWalletIcon_js_1 = require("../../icons/OutlineWalletIcon.js");
const formatTokenBalance_js_1 = require("../formatTokenBalance.js");
const nativeToken_js_1 = require("../nativeToken.js");
const useBuyTxStates_js_1 = require("./main/useBuyTxStates.js");
const WalletRow_js_1 = require("./swap/WalletRow.js");
function TransactionModeScreen(props) {
    const { payUiOptions, client, payerAccount, supportedDestinations, onContinue, } = props;
    const { data: chainData, error: chainDataError, isLoading: chainDataLoading, refetch: chainDataRefetch, } = (0, useChainQuery_js_1.useChainMetadata)(payUiOptions.transaction.chain);
    const metadata = payUiOptions.metadata;
    const { data: transactionCostAndData, error: transactionCostAndDataError, isLoading: transactionCostAndDataLoading, refetch: transactionCostAndDataRefetch, } = (0, useBuyTxStates_js_1.useTransactionCostAndData)({
        transaction: payUiOptions.transaction,
        account: payerAccount,
        supportedDestinations,
    });
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const sponsoredTransactionsEnabled = (0, wallet_js_1.hasSponsoredTransactionsEnabled)(activeWallet);
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: activeAccount?.address,
        chain: payUiOptions.transaction.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(transactionCostAndData?.token || nativeToken_js_1.NATIVE_TOKEN)
            ? undefined
            : transactionCostAndData?.token.address,
        client: props.client,
    }, {
        enabled: !!transactionCostAndData,
    });
    if (transactionCostAndDataLoading || chainDataLoading) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (!activeAccount) {
        return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                minHeight: "350px",
            }, fullHeight: true, flex: "row", center: "both", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", children: (0, jsx_runtime_1.jsx)(OutlineWalletIcon_js_1.OutlineWalletIcon, { size: index_js_1.iconSize["3xl"] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, color: "primaryText", size: "md", children: "Please connect a wallet to continue" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", style: { width: "100%" }, children: (0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { client: client, theme: theme, ...props.connectOptions }) })] }) }));
    }
    if (transactionCostAndDataError || chainDataError) {
        return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                minHeight: "350px",
            }, fullHeight: true, flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(ErrorState_js_1.ErrorState, { title: transactionCostAndDataError?.message ||
                    chainDataError?.message ||
                    "Something went wrong", onTryAgain: transactionCostAndDataError
                    ? transactionCostAndDataRefetch
                    : chainDataRefetch }) }));
    }
    if (!transactionCostAndData || !chainData) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    const insufficientFunds = balanceQuery.data &&
        balanceQuery.data.value < transactionCostAndData.transactionValueWei;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "lg", children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: metadata?.name || "Transaction" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [metadata?.image ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: client, src: metadata?.image, style: {
                            width: "100%",
                            borderRadius: index_js_1.spacing.md,
                            border: `1px solid ${theme.colors.borderColor}`,
                            backgroundColor: theme.colors.tertiaryBg,
                        } })) : activeAccount ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "sm", children: [insufficientFunds && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "xs", center: true, multiline: true, children: "Insufficient Funds" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", center: true, multiline: true, children: "Select another token or pay with card." })] })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                                    justifyContent: "space-between",
                                    padding: index_js_1.spacing.sm,
                                    marginBottom: index_js_1.spacing.sm,
                                    borderRadius: index_js_1.spacing.md,
                                    backgroundColor: theme.colors.tertiaryBg,
                                    border: `1px solid ${theme.colors.borderColor}`,
                                }, children: [(0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { address: activeAccount?.address, iconSize: "md", client: client }), balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", center: "y", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", weight: 500, children: (0, formatTokenBalance_js_1.formatTokenBalance)(balanceQuery.data, false) }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: transactionCostAndData.token, chain: payUiOptions.transaction.chain, size: "xs", color: "secondaryText" })] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "70px", height: index_js_1.fontSize.xs }))] })] })) : null, (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", weight: 700, children: "Price" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { chain: payUiOptions.transaction.chain, client: props.client, size: "sm", token: transactionCostAndData.token }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", size: "md", weight: 700, children: [String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toTokens)(transactionCostAndData.transactionValueWei, transactionCostAndData.decimals)), 6)), " ", transactionCostAndData.token.symbol] })] }) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: "Gas Fees" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: sponsoredTransactionsEnabled ? "success" : "primaryText", size: "xs", children: sponsoredTransactionsEnabled
                                            ? "Sponsored"
                                            : `${String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toTokens)(transactionCostAndData.gasCostWei, chainData.nativeCurrency.decimals)), 6))} ${chainData.nativeCurrency.symbol}` }) }) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: "Network" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [(0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { chainIconUrl: chainData.icon?.url, size: "xs", client: props.client }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", style: { textAlign: "right" }, children: chainData.name })] }) })] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), payerAccount ? ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: () => {
                    let totalCostWei = insufficientFunds
                        ? transactionCostAndData.transactionValueWei -
                            (balanceQuery.data?.value || 0n)
                        : transactionCostAndData.transactionValueWei;
                    if (transactionCostAndData.token.address === addresses_js_1.NATIVE_TOKEN_ADDRESS &&
                        !sponsoredTransactionsEnabled) {
                        totalCostWei += transactionCostAndData.gasCostWei;
                    }
                    (0, pay_js_1.trackPayEvent)({
                        event: "choose_payment_method_transaction_mode",
                        client,
                        walletAddress: payerAccount.address,
                        walletType: activeWallet?.id,
                        toChainId: payUiOptions.transaction.chain.id,
                        toToken: transactionCostAndData.token.address,
                        amountWei: totalCostWei.toString(),
                    });
                    onContinue((0, units_js_1.toTokens)(totalCostWei, transactionCostAndData.decimals), payUiOptions.transaction.chain, transactionCostAndData.token);
                }, children: "Choose Payment Method" })) : ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { ...props.connectOptions, client: client, theme: theme, connectButton: {
                        style: {
                            width: "100%",
                        },
                    } }) })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), payUiOptions.showThirdwebBranding !== false && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, { link: "https://playground.thirdweb.com/connect/pay?utm_source=ub_text" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" })] }))] }));
}
//# sourceMappingURL=TransactionModeScreen.js.map