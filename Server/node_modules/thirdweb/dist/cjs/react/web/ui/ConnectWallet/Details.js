"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyledChevronRightIcon = exports.ConnectedWalletDetails = void 0;
exports.detailsBtn_formatFiatBalanceForButton = detailsBtn_formatFiatBalanceForButton;
exports.detailsBtn_formatTokenBalanceForButton = detailsBtn_formatTokenBalanceForButton;
exports.DetailsModal = DetailsModal;
exports.NetworkSwitcherButton = NetworkSwitcherButton;
exports.ConnectedToSmartWallet = ConnectedToSmartWallet;
exports.InAppWalletUserInfo = InAppWalletUserInfo;
exports.SwitchNetworkButton = SwitchNetworkButton;
exports.useWalletDetailsModal = useWalletDetailsModal;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const pay_js_1 = require("../../../../analytics/track/pay.js");
const contract_js_1 = require("../../../../contract/contract.js");
const storage_js_1 = require("../../../../react/core/utils/storage.js");
const address_js_1 = require("../../../../utils/address.js");
const is_contract_deployed_js_1 = require("../../../../utils/bytecode/is-contract-deployed.js");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const types_js_1 = require("../../../../wallets/types.js");
const provider_js_1 = require("../../../core/account/provider.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const useActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useActiveWalletChain.js");
const useAdminWallet_js_1 = require("../../../core/hooks/wallets/useAdminWallet.js");
const useDisconnect_js_1 = require("../../../core/hooks/wallets/useDisconnect.js");
const useSwitchActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useSwitchActiveWalletChain.js");
const RootElementContext_js_1 = require("../../../core/providers/RootElementContext.js");
const account_js_1 = require("../../../core/utils/account.js");
const isSmartWallet_js_1 = require("../../../core/utils/isSmartWallet.js");
const wallet_js_1 = require("../../../core/utils/wallet.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const ChainActiveDot_js_1 = require("../components/ChainActiveDot.js");
const CopyIcon_js_1 = require("../components/CopyIcon.js");
const IconContainer_js_1 = require("../components/IconContainer.js");
const Modal_js_1 = require("../components/Modal.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const Spacer_js_1 = require("../components/Spacer.js");
const Spinner_js_1 = require("../components/Spinner.js");
const Tooltip_js_1 = require("../components/Tooltip.js");
const WalletImage_js_1 = require("../components/WalletImage.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const fallbackChainIcon_js_1 = require("../components/fallbackChainIcon.js");
const text_js_1 = require("../components/text.js");
const animations_js_1 = require("../design-system/animations.js");
const elements_js_1 = require("../design-system/elements.js");
const address_js_2 = require("../prebuilt/Account/address.js");
const avatar_js_1 = require("../prebuilt/Account/avatar.js");
const balance_js_1 = require("../prebuilt/Account/balance.js");
const blobbie_js_1 = require("../prebuilt/Account/blobbie.js");
const name_js_1 = require("../prebuilt/Account/name.js");
const icon_js_1 = require("../prebuilt/Chain/icon.js");
const name_js_2 = require("../prebuilt/Chain/name.js");
const provider_js_2 = require("../prebuilt/Chain/provider.js");
const MenuButton_js_1 = require("./MenuButton.js");
const screen_js_1 = require("./Modal/screen.js");
const NetworkSelector_js_1 = require("./NetworkSelector.js");
const TransactionsScreen_js_1 = require("./TransactionsScreen.js");
const constants_js_1 = require("./constants.js");
const CoinsIcon_js_1 = require("./icons/CoinsIcon.js");
const FundsIcon_js_1 = require("./icons/FundsIcon.js");
const OutlineWalletIcon_js_1 = require("./icons/OutlineWalletIcon.js");
const getConnectLocale_js_1 = require("./locale/getConnectLocale.js");
const LazyBuyScreen_js_1 = require("./screens/Buy/LazyBuyScreen.js");
const WalletManagerScreen_js_1 = require("./screens/Details/WalletManagerScreen.js");
const LinkProfileScreen_js_1 = require("./screens/LinkProfileScreen.js");
const LinkedProfilesScreen_js_1 = require("./screens/LinkedProfilesScreen.js");
const ManageWalletScreen_js_1 = require("./screens/ManageWalletScreen.js");
const PrivateKey_js_1 = require("./screens/PrivateKey.js");
const ReceiveFunds_js_1 = require("./screens/ReceiveFunds.js");
const SendFunds_js_1 = require("./screens/SendFunds.js");
const ViewAssets_js_1 = require("./screens/ViewAssets.js");
const ViewNFTs_js_1 = require("./screens/ViewNFTs.js");
const ViewTokens_js_1 = require("./screens/ViewTokens.js");
const WalletConnectReceiverScreen_js_1 = require("./screens/WalletConnectReceiverScreen.js");
const TW_CONNECTED_WALLET = "tw-connected-wallet";
const LocalhostChainId = 1337;
/**
 * @internal
 */
const ConnectedWalletDetails = (props) => {
    const { connectLocale: locale, client } = props;
    const setRootEl = (0, react_1.useContext)(RootElementContext_js_1.SetRootElementContext);
    const walletChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    function closeModal() {
        setRootEl(null);
    }
    function openModal() {
        setRootEl((0, jsx_runtime_1.jsx)(DetailsModal, { client: client, locale: locale, detailsModal: props.detailsModal, theme: props.theme, supportedTokens: props.supportedTokens, supportedNFTs: props.supportedNFTs, closeModal: closeModal, onDisconnect: props.onDisconnect, chains: props.chains, displayBalanceToken: props.detailsButton?.displayBalanceToken, connectOptions: props.connectOptions, assetTabs: props.detailsModal?.assetTabs }));
    }
    const isNetworkMismatch = props.chain && walletChain && walletChain.id !== props.chain.id;
    if (props.detailsButton?.render) {
        return (
        // biome-ignore lint/a11y/useKeyWithClickEvents: ok
        (0, jsx_runtime_1.jsx)("div", { onClick: openModal, children: (0, jsx_runtime_1.jsx)(props.detailsButton.render, {}) }));
    }
    if (props.chain && isNetworkMismatch) {
        return ((0, jsx_runtime_1.jsx)(SwitchNetworkButton, { style: props.switchButton?.style, className: props.switchButton?.className, switchNetworkBtnTitle: props.switchButton?.label, targetChain: props.chain, connectLocale: locale }));
    }
    const combinedClassName = `${TW_CONNECTED_WALLET} ${props.detailsButton?.className || ""}`;
    const tokenAddress = props.detailsButton?.displayBalanceToken?.[Number(walletChain?.id)];
    return ((0, jsx_runtime_1.jsxs)(WalletInfoButton, { type: "button", className: combinedClassName, style: props.detailsButton?.style, "data-test": "connected-wallet-details", onClick: openModal, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    borderRadius: "100%",
                    overflow: "hidden",
                    width: "35px",
                    height: "35px",
                }, children: props.detailsButton?.connectedAccountAvatarUrl ? ((0, jsx_runtime_1.jsx)("img", { alt: "", src: props.detailsButton.connectedAccountAvatarUrl, style: {
                        height: "100%",
                        width: "100%",
                        objectFit: "cover",
                    } })) : ((0, jsx_runtime_1.jsx)(avatar_js_1.AccountAvatar, { className: `${TW_CONNECTED_WALLET}__account_avatar`, loadingComponent: (0, jsx_runtime_1.jsx)(blobbie_js_1.AccountBlobbie, { size: 35, className: `${TW_CONNECTED_WALLET}__account_avatar` }), fallbackComponent: (0, jsx_runtime_1.jsx)(blobbie_js_1.AccountBlobbie, { size: 35, className: `${TW_CONNECTED_WALLET}__account_avatar` }), queryOptions: {
                        refetchOnWindowFocus: false,
                        refetchOnMount: false,
                    }, style: {
                        height: "100%",
                        width: "100%",
                        objectFit: "cover",
                    } })) }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "4xs", style: {
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                    borderRadius: `0 ${index_js_1.radius.md} ${index_js_1.radius.md} 0`,
                }, children: [props.detailsButton?.connectedAccountName ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "primaryText", weight: 500, className: `${TW_CONNECTED_WALLET}__address`, children: props.detailsButton.connectedAccountName })) : ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "primaryText", weight: 500, className: `${TW_CONNECTED_WALLET}__address`, children: (0, jsx_runtime_1.jsx)(name_js_1.AccountName, { loadingComponent: (0, jsx_runtime_1.jsx)(address_js_2.AccountAddress, { formatFn: address_js_1.shortenAddress }), fallbackComponent: (0, jsx_runtime_1.jsx)(address_js_2.AccountAddress, { formatFn: address_js_1.shortenAddress }) }) })), (0, jsx_runtime_1.jsx)(text_js_1.Text, { className: `${TW_CONNECTED_WALLET}__balance`, size: "xs", color: "secondaryText", weight: 400, style: {
                            display: "flex",
                            gap: "2px",
                            alignItems: "center",
                        }, children: props.detailsButton?.showBalanceInFiat ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { chain: walletChain, loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "50px" }), fallbackComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "50px" }), tokenAddress: tokenAddress }), (0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { chain: walletChain, tokenAddress: tokenAddress, showBalanceInFiat: "USD", formatFn: detailsBtn_formatFiatBalanceForButton, loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "20px" }) })] })) : ((0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { chain: walletChain, loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "70px" }), fallbackComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "70px" }), formatFn: detailsBtn_formatTokenBalanceForButton, tokenAddress: tokenAddress })) })] })] }));
};
exports.ConnectedWalletDetails = ConnectedWalletDetails;
/**
 * @internal Exported for tests
 */
function detailsBtn_formatFiatBalanceForButton(props) {
    return ` (${(0, account_js_1.formatAccountFiatBalance)({ ...props, decimals: 0 })})`;
}
/**
 * @internal Exported for test
 */
function detailsBtn_formatTokenBalanceForButton(props) {
    return `${(0, account_js_1.formatAccountTokenBalance)({ ...props, decimals: props.balance < 1 ? 5 : 4 })}`;
}
/**
 * @internal Exported for tests only
 */
function DetailsModal(props) {
    const [screen, setScreen] = (0, react_1.useState)("main");
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    const [isOpen, setIsOpen] = (0, react_1.useState)(true);
    const { client, locale } = props;
    const walletChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const theme = (0, CustomThemeProvider_js_1.parseTheme)(props.theme);
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const chainFaucetsQuery = (0, useChainQuery_js_1.useChainFaucets)(walletChain);
    const disableSwitchChain = !activeWallet?.switchChain;
    const screenSetup = (0, screen_js_1.useSetupScreen)({
        size: "compact",
        welcomeScreen: undefined,
        wallets: activeWallet ? [activeWallet] : [],
    });
    const closeModal = (0, react_1.useCallback)(() => {
        setIsOpen(false);
        (0, constants_js_1.onModalUnmount)(() => {
            props.closeModal();
        });
    }, [props.closeModal]);
    function handleDisconnect(info) {
        setIsOpen(false);
        props.closeModal();
        props.onDisconnect(info);
    }
    (0, react_1.useEffect)(() => {
        if (!activeAccount) {
            closeModal();
        }
    }, [activeAccount, closeModal]);
    const { hideSendFunds, hideReceiveFunds, hideBuyFunds } = props.detailsModal || {};
    const hideAllButtons = hideSendFunds && hideReceiveFunds && hideBuyFunds;
    const avatarContent = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            position: "relative",
            height: `${index_js_1.iconSize.xl}px`,
            width: `${index_js_1.iconSize.xl}px`,
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    width: "100%",
                    height: "100%",
                    borderRadius: "100%",
                    overflow: "hidden",
                }, children: props.detailsModal?.connectedAccountAvatarUrl ? ((0, jsx_runtime_1.jsx)("img", { src: props.detailsModal.connectedAccountAvatarUrl, style: {
                        height: "100%",
                        width: "100%",
                        objectFit: "cover",
                    }, alt: "" })) : (activeAccount && ((0, jsx_runtime_1.jsx)(avatar_js_1.AccountAvatar, { loadingComponent: (0, jsx_runtime_1.jsx)(blobbie_js_1.AccountBlobbie, { size: Number(index_js_1.iconSize.xxl) }), fallbackComponent: (0, jsx_runtime_1.jsx)(blobbie_js_1.AccountBlobbie, { size: Number(index_js_1.iconSize.xxl) }), style: {
                        height: "100%",
                        width: "100%",
                        objectFit: "cover",
                    } }))) }), !props.detailsModal?.hideSwitchWallet ? ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    position: "absolute",
                    bottom: -2,
                    right: -2,
                }, children: (0, jsx_runtime_1.jsx)(IconContainer_js_1.IconContainer, { style: {
                        background: theme.colors.modalBg,
                    }, padding: "4px", children: activeWallet && ((0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { style: { borderRadius: 0 }, id: activeWallet.id, client: client, size: "12" })) }) })) : null] }));
    let content = ((0, jsx_runtime_1.jsxs)("div", { className: `${TW_CONNECTED_WALLET}__default_modal_screen`, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "lg", gap: "sm", flex: "row", center: "y", style: {
                    paddingTop: index_js_1.spacing.lg,
                    paddingBottom: hideAllButtons ? index_js_1.spacing.md : index_js_1.spacing.lg,
                }, children: [props.detailsModal?.hideSwitchWallet ? (avatarContent) : ((0, jsx_runtime_1.jsx)(Tooltip_js_1.ToolTip, { tip: "Switch wallet", children: (0, jsx_runtime_1.jsx)("div", { style: {
                                cursor: "pointer",
                            }, onKeyDown: (e) => {
                                if (e.key === "w") {
                                    setScreen("wallet-manager");
                                }
                            }, onClick: () => {
                                setScreen("wallet-manager");
                            }, children: avatarContent }) })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", children: [(0, jsx_runtime_1.jsxs)("div", { style: {
                                    display: "flex",
                                    gap: index_js_1.spacing.xxs,
                                    alignItems: "center",
                                }, children: [props.detailsModal?.connectedAccountName ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", weight: 500, size: "md", children: props.detailsModal.connectedAccountName })) : ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", weight: 500, size: "md", children: (0, jsx_runtime_1.jsx)(name_js_1.AccountName, { loadingComponent: (0, jsx_runtime_1.jsx)(address_js_2.AccountAddress, { formatFn: address_js_1.shortenAddress }), fallbackComponent: (0, jsx_runtime_1.jsx)(address_js_2.AccountAddress, { formatFn: address_js_1.shortenAddress }) }) })), (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { children: (0, jsx_runtime_1.jsx)(CopyIcon_js_1.CopyIcon, { text: activeAccount?.address || "", tip: locale.copyAddress }) })] }), (0, jsx_runtime_1.jsx)(InAppWalletUserInfo, { client: client, locale: locale })] })] }), !hideAllButtons && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "lg", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
                                display: "flex",
                                gap: index_js_1.spacing.xs,
                            }, children: [!hideSendFunds && ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                        fontSize: index_js_1.fontSize.sm,
                                        display: "flex",
                                        gap: index_js_1.spacing.xs,
                                        alignItems: "center",
                                        padding: index_js_1.spacing.sm,
                                        flex: 1,
                                    }, onClick: () => {
                                        setScreen("send");
                                    }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.PaperPlaneIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                                                    transform: "translateY(-10%) rotate(-45deg) ",
                                                } }) }), locale.send] })), !hideReceiveFunds && ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                        fontSize: index_js_1.fontSize.sm,
                                        display: "flex",
                                        gap: index_js_1.spacing.xs,
                                        alignItems: "center",
                                        padding: index_js_1.spacing.sm,
                                        flex: 1,
                                    }, onClick: () => {
                                        setScreen("receive");
                                    }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.PinBottomIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) }), locale.receive] })), !hideBuyFunds && ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                        fontSize: index_js_1.fontSize.sm,
                                        display: "flex",
                                        gap: index_js_1.spacing.xs,
                                        alignItems: "center",
                                        padding: index_js_1.spacing.sm,
                                        flex: 1,
                                    }, onClick: () => {
                                        (0, pay_js_1.trackPayEvent)({
                                            event: "details_modal_buy_click",
                                            client: client,
                                            walletAddress: activeAccount?.address,
                                            walletType: activeWallet?.id,
                                        });
                                        setScreen("buy");
                                    }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.PlusIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) }), locale.buy] }))] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "md", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", style: {
                            gap: "1px",
                        }, children: [(0, jsx_runtime_1.jsx)(NetworkSwitcherButton, { client: props.client, setScreen: () => setScreen("network-switcher"), disableSwitchChain: disableSwitchChain, showBalanceInFiat: props.detailsModal?.showBalanceInFiat, displayBalanceToken: props.displayBalanceToken }), (0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    setScreen("transactions");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.TextAlignJustifyIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: locale.transactions }) })] }), (props.assetTabs === undefined || props.assetTabs.length > 0) && ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    setScreen("view-assets");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(CoinsIcon_js_1.CoinsIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: locale.viewFunds.viewAssets })] })), (0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    setScreen("manage-wallet");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(OutlineWalletIcon_js_1.OutlineWalletIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: props.locale.manageWallet.title })] }), (props.detailsModal?.showTestnetFaucet ?? false) &&
                                (chainFaucetsQuery.faucets.length > 0 ||
                                    walletChain?.id === LocalhostChainId) && ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuLink, { href: chainFaucetsQuery.faucets ? chainFaucetsQuery.faucets[0] : "#", target: "_blank", as: "a", style: {
                                    textDecoration: "none",
                                    color: "inherit",
                                }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "both", color: "secondaryText", children: (0, jsx_runtime_1.jsx)(FundsIcon_js_1.FundsIcon, { size: index_js_1.iconSize.md }) }), locale.requestTestnetFunds] })), props.detailsModal?.footer && ((0, jsx_runtime_1.jsx)(props.detailsModal.footer, { close: closeModal }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] }), props.detailsModal?.hideDisconnect !== true && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "md", children: (0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { "data-variant": "danger", type: "button", onClick: () => {
                                if (activeWallet && activeAccount) {
                                    disconnect(activeWallet);
                                    handleDisconnect({
                                        account: activeAccount,
                                        wallet: activeWallet,
                                    });
                                }
                            }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ExitIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: locale.disconnectWallet })] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" })] }))] }));
    if (screen === "transactions") {
        content = ((0, jsx_runtime_1.jsx)(TransactionsScreen_js_1.TransactionsScreen, { title: locale.buy, onBack: () => setScreen("main"), closeModal: closeModal, locale: locale, setScreen: setScreen, client: client }));
    }
    if (screen === "wallet-manager" &&
        activeAccount &&
        walletChain &&
        activeWallet) {
        content = ((0, jsx_runtime_1.jsx)(WalletManagerScreen_js_1.WalletManagerScreen, { onBack: () => setScreen("main"), accountAbstraction: props.connectOptions?.accountAbstraction, appMetadata: props.connectOptions?.appMetadata, chain: props.connectOptions?.chain, chains: props.connectOptions?.chains, client: client, hiddenWallets: props.connectOptions?.hiddenWallets, connectLocale: locale, recommendedWallets: props.connectOptions?.recommendedWallets, showAllWallets: !!props.connectOptions?.showAllWallets, walletConnect: props.connectOptions?.walletConnect, wallets: props.connectOptions?.wallets, activeAccount: activeAccount, activeChain: walletChain, activeWallet: activeWallet }));
    }
    if (screen === "network-switcher") {
        content = ((0, jsx_runtime_1.jsx)(NetworkSelector_js_1.NetworkSelectorContent
        // add currently connected chain to the list of chains if it's not already in the list
        , { 
            // add currently connected chain to the list of chains if it's not already in the list
            chains: walletChain &&
                props.chains.find((c) => c.id === walletChain.id) === undefined
                ? [walletChain, ...props.chains]
                : props.chains, closeModal: closeModal, networkSelector: props.detailsModal?.networkSelector, onBack: () => {
                setScreen("main");
            }, connectLocale: locale, client: client }));
    }
    else if (screen === "view-assets") {
        content = ((0, jsx_runtime_1.jsx)(ViewAssets_js_1.ViewAssets, { supportedTokens: props.supportedTokens, supportedNFTs: props.supportedNFTs, onBack: () => {
                setScreen("main");
            }, theme: props.theme, setScreen: setScreen, client: client, connectLocale: locale, assetTabs: props.detailsModal?.assetTabs }));
    }
    else if (screen === "view-nfts") {
        content = ((0, jsx_runtime_1.jsx)(ViewNFTs_js_1.ViewNFTs, { theme: props.theme, supportedNFTs: props.supportedNFTs, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    else if (screen === "view-tokens") {
        content = ((0, jsx_runtime_1.jsx)(ViewTokens_js_1.ViewTokens, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    else if (screen === "private-key") {
        content = ((0, jsx_runtime_1.jsx)(PrivateKey_js_1.PrivateKey, { theme: props.theme, onBack: () => {
                setScreen("manage-wallet");
            }, wallet: activeWallet, client: client, connectLocale: locale }));
    }
    else if (screen === "manage-wallet") {
        content = ((0, jsx_runtime_1.jsx)(ManageWalletScreen_js_1.ManageWalletScreen, { onBack: () => {
                setScreen("main");
            }, locale: locale, closeModal: closeModal, client: client, setScreen: setScreen }));
    }
    else if (screen === "wallet-connect-receiver") {
        content = ((0, jsx_runtime_1.jsx)(WalletConnectReceiverScreen_js_1.WalletConnectReceiverScreen, { onBack: () => {
                setScreen("manage-wallet");
            }, chains: props.chains, client: client }));
    }
    else if (screen === "linked-profiles") {
        content = ((0, jsx_runtime_1.jsx)(LinkedProfilesScreen_js_1.LinkedProfilesScreen, { onBack: () => setScreen("manage-wallet"), client: client, locale: locale, setScreen: setScreen }));
    }
    else if (screen === "link-profile") {
        content = ((0, jsx_runtime_1.jsx)(LinkProfileScreen_js_1.LinkProfileScreen, { onBack: () => {
                setScreen("linked-profiles");
            }, client: client, locale: locale, walletConnect: props.connectOptions?.walletConnect }));
    }
    // send funds
    else if (screen === "send") {
        content = ((0, jsx_runtime_1.jsx)(SendFunds_js_1.SendFunds, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    // receive funds
    else if (screen === "receive") {
        content = ((0, jsx_runtime_1.jsx)(ReceiveFunds_js_1.ReceiveFunds, { walletId: activeWallet?.id, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    // thirdweb pay
    else if (screen === "buy") {
        content = ((0, jsx_runtime_1.jsx)(LazyBuyScreen_js_1.LazyBuyScreen, { title: locale.buy, isEmbed: false, client: client, onBack: () => setScreen("main"), supportedTokens: props.supportedTokens, connectLocale: locale, payOptions: props.detailsModal?.payOptions || {
                mode: "fund_wallet",
            }, hiddenWallets: props.detailsModal?.hiddenWallets, theme: typeof props.theme === "string" ? props.theme : props.theme.type, onDone: closeModal, connectOptions: undefined }));
    }
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: props.theme, children: (0, jsx_runtime_1.jsx)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { theme: props.theme, isOpen: false, children: (0, jsx_runtime_1.jsx)(screen_js_1.ScreenSetupContext.Provider, { value: screenSetup, children: (0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { size: "compact", open: isOpen, setOpen: (_open) => {
                        if (!_open) {
                            closeModal();
                            if (props.detailsModal?.onClose) {
                                props.detailsModal?.onClose(screen);
                            }
                        }
                    }, children: activeAccount?.address && ((0, jsx_runtime_1.jsx)(provider_js_1.AccountProvider, { address: activeAccount.address, client: client, children: content })) }) }) }) }));
}
/**
 * When this button is clicked, it will switch to the screen where users
 * can select a chain to switch to.
 * @internal
 */
function NetworkSwitcherButton(props) {
    const { disableSwitchChain, setScreen, showBalanceInFiat, client } = props;
    const walletChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    if (!walletChain) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { type: "button", disabled: disableSwitchChain, onClick: () => {
            setScreen("network-switcher");
        }, "data-variant": "primary", className: "tw-internal-network-switcher-button", children: [(0, jsx_runtime_1.jsxs)(provider_js_2.ChainProvider, { chain: walletChain, children: [(0, jsx_runtime_1.jsx)("div", { style: {
                            display: "flex",
                            alignItems: "center",
                            position: "relative",
                        }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
                                position: "relative",
                                display: "flex",
                                flexShrink: 0,
                                alignItems: "center",
                            }, children: [(0, jsx_runtime_1.jsx)(icon_js_1.ChainIcon, { client: client, loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: `${index_js_1.iconSize.md}px`, width: `${index_js_1.iconSize.md}px` }), fallbackComponent: (0, jsx_runtime_1.jsx)("img", { src: fallbackChainIcon_js_1.fallbackChainIcon, alt: "", style: {
                                            width: `${index_js_1.iconSize.md}px`,
                                            height: `${index_js_1.iconSize.md}px`,
                                        } }), style: {
                                        width: `${index_js_1.iconSize.md}px`,
                                        height: `${index_js_1.iconSize.md}px`,
                                    } }), (0, jsx_runtime_1.jsx)(ChainActiveDot_js_1.ChainActiveDot, { className: "tw-chain-active-dot-details-button" })] }) }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", size: "md", multiline: true, children: [(0, jsx_runtime_1.jsx)(name_js_2.ChainName, { loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "16px", width: "150px" }), fallbackComponent: (0, jsx_runtime_1.jsxs)("span", { children: ["Unknown chain #", walletChain?.id] }) }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "secondaryText", size: "xs", children: showBalanceInFiat ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { fallbackComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "70px" }), loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "70px" }), chain: walletChain, tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)], formatFn: (props) => (0, account_js_1.formatAccountTokenBalance)({ ...props, decimals: 7 }) }), " ", (0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "30px" }), chain: walletChain, tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)], formatFn: (props) => ` (${(0, account_js_1.formatAccountFiatBalance)({ ...props, decimals: 3 })})`, showBalanceInFiat: "USD" })] })) : ((0, jsx_runtime_1.jsx)(balance_js_1.AccountBalance, { fallbackComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "100px" }), loadingComponent: (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "100px" }), formatFn: (props) => (0, account_js_1.formatAccountTokenBalance)({ ...props, decimals: 7 }), chain: walletChain, tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)] })) })] })] }), (0, jsx_runtime_1.jsx)(exports.StyledChevronRightIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                    flexShrink: 0,
                    marginLeft: "auto",
                } })] }));
}
const WalletInfoButton = /* @__PURE__ */ (0, elements_js_1.StyledButton)((_) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        background: theme.colors.connectedButtonBg,
        overflow: "hidden",
        borderRadius: index_js_1.radius.md,
        cursor: "pointer",
        display: "inline-flex",
        gap: index_js_1.spacing.xs,
        padding: index_js_1.spacing.xs,
        alignItems: "center",
        minWidth: "165px",
        height: "50px",
        boxSizing: "border-box",
        border: `1px solid ${theme.colors.borderColor}`,
        WebkitTapHighlightColor: "transparent",
        lineHeight: "normal",
        animation: `${animations_js_1.fadeInAnimation} 300ms ease`,
        "&:hover": {
            transition: "background 250ms ease",
            background: theme.colors.connectedButtonBgHover,
        },
    };
});
/**
 * @internal Export for tests
 */
exports.StyledChevronRightIcon = (0, styled_1.default)(
/* @__PURE__ */ react_icons_1.ChevronRightIcon)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        color: theme.colors.secondaryText,
    };
});
/**
 * @internal Exported for test
 */
function ConnectedToSmartWallet(props) {
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const isSmartWallet = (0, isSmartWallet_js_1.hasSmartAccount)(activeWallet);
    const chain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const { client, connectLocale: locale } = props;
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (activeAccount && isSmartWallet && activeAccount.address && chain) {
            const contract = (0, contract_js_1.getContract)({
                address: activeAccount.address,
                chain,
                client,
            });
            (0, is_contract_deployed_js_1.isContractDeployed)(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSmartWallet]);
    const content = ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "3xs", center: "y", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", weight: 400, color: "secondaryText", children: locale.connectedToSmartWallet }) }));
    if (chain && activeAccount && isSmartWallet) {
        return ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: isSmartWalletDeployed ? ((0, jsx_runtime_1.jsx)(text_js_1.Link, { color: "secondaryText", hoverColor: "primaryText", href: `https://thirdweb.com/${chain.id}/${activeAccount.address}/account`, target: "_blank", size: "sm", children: content })) : ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", children: [" ", content] })) }));
    }
    return null;
}
/**
 * @internal Exported for tests
 */
function InAppWalletUserInfo(props) {
    const { client, locale } = props;
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const adminWallet = (0, useAdminWallet_js_1.useAdminWallet)();
    const { data: walletInfo } = (0, wallet_js_1.useWalletInfo)(activeWallet?.id);
    const isSmartWallet = (0, isSmartWallet_js_1.hasSmartAccount)(activeWallet);
    const { data: walletName } = (0, react_query_1.useQuery)({
        queryKey: [
            "wallet-name",
            { walletId: activeWallet?.id, walletAddress: account?.address },
        ],
        queryFn: async () => {
            const lastAuthProvider = await (0, storage_js_1.getLastAuthProvider)(webStorage_js_1.webLocalStorage);
            if (lastAuthProvider === "guest") {
                return "Guest";
            }
            if (lastAuthProvider &&
                (activeWallet?.id === "inApp" || activeWallet?.id === "smart") &&
                types_js_1.socialAuthOptions.includes(lastAuthProvider)) {
                return (lastAuthProvider.slice(0, 1).toUpperCase() + lastAuthProvider.slice(1));
            }
            return walletInfo?.name;
        },
        enabled: !!activeWallet?.id && !!walletInfo,
    });
    const userInfoQuery = (0, react_query_1.useQuery)({
        queryKey: ["in-app-wallet-user", client, account?.address],
        queryFn: async () => {
            const isInAppWallet = adminWallet &&
                (adminWallet.id === "inApp" || adminWallet.id.startsWith("ecosystem."));
            if (!isInAppWallet) {
                return null;
            }
            let ecosystem;
            if ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(adminWallet)) {
                const ecosystemWallet = adminWallet;
                const partnerId = ecosystemWallet.getConfig()?.partnerId;
                ecosystem = {
                    id: ecosystemWallet.id,
                    partnerId,
                };
            }
            const { getUserEmail, getUserPhoneNumber } = await Promise.resolve().then(() => require("../../../../wallets/in-app/web/lib/auth/index.js"));
            const [email, phone] = await Promise.all([
                getUserEmail({
                    client: client,
                    ecosystem,
                }),
                getUserPhoneNumber({
                    client: client,
                    ecosystem,
                }),
            ]);
            return email || phone || null;
        },
        enabled: !!adminWallet,
    });
    if (!userInfoQuery.data && isSmartWallet) {
        return (0, jsx_runtime_1.jsx)(ConnectedToSmartWallet, { client: client, connectLocale: locale });
    }
    if (userInfoQuery.data || walletName) {
        return ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", weight: 400, children: userInfoQuery.data || walletName }));
    }
    return ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "50px", height: "10px", className: "InAppWalletUserInfo__skeleton" }));
}
/**
 * @internal Exported for tests
 */
function SwitchNetworkButton(props) {
    const switchChain = (0, useSwitchActiveWalletChain_js_1.useSwitchActiveWalletChain)();
    const [switching, setSwitching] = (0, react_1.useState)(false);
    const locale = props.connectLocale;
    const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;
    return ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { className: `tw-connect-wallet--switch-network ${props.className || ""}`, variant: "primary", type: "button", "data-is-loading": switching, "data-test": "switch-network-button", disabled: switching, onClick: async () => {
            setSwitching(true);
            try {
                await switchChain(props.targetChain);
            }
            catch (e) {
                console.error(e);
            }
            setSwitching(false);
        }, style: {
            minWidth: "140px",
            ...props.style,
        }, "aria-label": switching ? locale.switchingNetwork : undefined, children: switching ? ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })) : (switchNetworkBtnTitle) }));
}
/**
 * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useWalletDetailsModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const detailsModal = useWalletDetailsModal();
 *
 *   function handleClick() {
 *      detailsModal.open({ client, theme: 'light' });
 *   }
 *
 *   return <button onClick={handleClick}> Show Wallet Details </button>
 * }
 * ```
 *
 * ### Callback for when the modal is closed
 * ```tsx
 * detailsModal.open({
 *   client,
 *   onClose: (screen: string) => console.log({ screen })
 * });
 * ```
 *
 * @wallet
 */
function useWalletDetailsModal() {
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const setRootEl = (0, react_1.useContext)(RootElementContext_js_1.SetRootElementContext);
    function closeModal() {
        setRootEl(null);
    }
    function openModal(props) {
        if (!account) {
            throw new Error("Wallet is not connected.");
        }
        (0, getConnectLocale_js_1.getConnectLocale)(props.locale || "en_US")
            .then((locale) => {
            setRootEl((0, jsx_runtime_1.jsx)(DetailsModal, { client: props.client, locale: locale, detailsModal: {
                    footer: props.footer,
                    hideDisconnect: props.hideDisconnect,
                    hideSwitchWallet: props.hideSwitchWallet,
                    networkSelector: props.networkSelector,
                    payOptions: props.payOptions,
                    showTestnetFaucet: props.showTestnetFaucet,
                    connectedAccountName: props.connectedAccountName,
                    connectedAccountAvatarUrl: props.connectedAccountAvatarUrl,
                    hideBuyFunds: props.hideBuyFunds,
                    hideReceiveFunds: props.hideReceiveFunds,
                    hideSendFunds: props.hideSendFunds,
                    assetTabs: props.assetTabs,
                    onClose: props.onClose,
                }, displayBalanceToken: props.displayBalanceToken, theme: props.theme || "dark", supportedTokens: props.supportedTokens, supportedNFTs: props.supportedNFTs, closeModal: closeModal, onDisconnect: (info) => {
                    props.onDisconnect?.(info);
                    closeModal();
                }, chains: props.chains || [], connectOptions: props.connectOptions }));
        })
            .catch(() => {
            closeModal();
        });
    }
    return {
        open: openModal,
    };
}
//# sourceMappingURL=Details.js.map