"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapDetailsScreen = SwapDetailsScreen;
exports.SwapTxDetailsTable = SwapTxDetailsTable;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const utils_js_1 = require("../../../../../../../chains/utils.js");
const url_js_1 = require("../../../../../../../utils/url.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useBuyWithCryptoStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const WalletRow_js_1 = require("../swap/WalletRow.js");
const TokenInfoRow_js_1 = require("./TokenInfoRow.js");
const statusMeta_js_1 = require("./statusMeta.js");
function SwapDetailsScreen(props) {
    const { status: initialStatus, client } = props;
    const statusQuery = (0, useBuyWithCryptoStatus_js_1.useBuyWithCryptoStatus)(initialStatus.source?.transactionHash
        ? {
            client: client,
            transactionHash: initialStatus.source.transactionHash,
            chainId: initialStatus.source.token.chainId,
        }
        : undefined);
    const status = (statusQuery.data?.status !== "NOT_FOUND" ? statusQuery.data : undefined) ||
        initialStatus;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Transaction Details", onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(SwapTxDetailsTable, { type: "status", status: status, client: client }) })] }));
}
function SwapTxDetailsTable(props) {
    let uiData;
    let showStatusRow = true;
    if (props.type === "status") {
        const status = props.status;
        if (props.hideStatusRow) {
            showStatusRow = false;
        }
        const isPartialSuccess = status.status === "COMPLETED" && status.subStatus === "PARTIAL_SUCCESS";
        uiData = {
            fromToken: {
                chainId: status.quote.fromToken.chainId,
                symbol: status.quote.fromToken.symbol || "",
                address: status.quote.fromToken.tokenAddress,
                amount: status.quote.fromAmount,
            },
            quotedToToken: {
                chainId: status.quote.toToken.chainId,
                symbol: status.quote.toToken.symbol || "",
                address: status.quote.toToken.tokenAddress,
                amount: status.quote.toAmount,
            },
            gotToken: status.destination
                ? {
                    chainId: status.destination.token.chainId,
                    symbol: status.destination.token.symbol || "",
                    address: status.destination.token.tokenAddress,
                    amount: status.destination.amount,
                }
                : undefined,
            statusMeta: (0, statusMeta_js_1.getBuyWithCryptoStatusMeta)(status),
            estimatedDuration: status.quote.estimated.durationSeconds || 0,
            isPartialSuccess,
            destinationTxHash: status.destination?.transactionHash,
            sourceTxHash: status.source?.transactionHash,
            fromAddress: status.fromAddress,
            toAddress: status.toAddress,
        };
    }
    else {
        const quote = props.quote;
        uiData = {
            fromToken: {
                chainId: quote.swapDetails.fromToken.chainId,
                symbol: quote.swapDetails.fromToken.symbol || "",
                address: quote.swapDetails.fromToken.tokenAddress,
                amount: quote.swapDetails.fromAmount,
            },
            quotedToToken: {
                chainId: quote.swapDetails.toToken.chainId,
                symbol: quote.swapDetails.toToken.symbol || "",
                address: quote.swapDetails.toToken.tokenAddress,
                amount: quote.swapDetails.toAmount,
            },
            isPartialSuccess: false,
            estimatedDuration: quote.swapDetails.estimated.durationSeconds || 0,
            fromAddress: quote.swapDetails.fromAddress,
            toAddress: quote.swapDetails.toAddress,
        };
    }
    const { client } = props;
    const { fromToken, quotedToToken: toToken, statusMeta, sourceTxHash, destinationTxHash, isPartialSuccess, gotToken, } = uiData;
    const fromChainId = fromToken.chainId;
    const toChainId = toToken.chainId;
    const fromChainName = (0, useChainQuery_js_1.useChainName)((0, utils_js_1.getCachedChain)(fromChainId));
    const fromChainExplorers = (0, useChainQuery_js_1.useChainExplorers)((0, utils_js_1.getCachedChain)(fromChainId));
    const toChainName = (0, useChainQuery_js_1.useChainName)((0, utils_js_1.getCachedChain)(toChainId));
    const toChainExplorers = (0, useChainQuery_js_1.useChainExplorers)((0, utils_js_1.getCachedChain)(toChainId));
    const lineSpacer = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] }));
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(TokenInfoRow_js_1.TokenInfoRow, { chainId: fromToken.chainId, client: client, label: "Paid", tokenAmount: fromToken.amount, tokenSymbol: fromToken.symbol || "", tokenAddress: fromToken.address }), lineSpacer, isPartialSuccess && gotToken ? (
            // Expected + Got
            (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(TokenInfoRow_js_1.TokenInfoRow, { chainId: toToken.chainId, client: client, label: isPartialSuccess ? "Expected" : "Received", tokenAmount: toToken.amount, tokenSymbol: toToken.symbol || "", tokenAddress: toToken.address }), lineSpacer, (0, jsx_runtime_1.jsx)(TokenInfoRow_js_1.TokenInfoRow, { chainId: gotToken.chainId, client: client, label: "Got", tokenAmount: gotToken.amount, tokenSymbol: gotToken.symbol || "", tokenAddress: gotToken.address })] })) : (
            // Receive
            (0, jsx_runtime_1.jsx)(TokenInfoRow_js_1.TokenInfoRow, { chainId: toToken.chainId, client: client, label: "Received", tokenAmount: toToken.amount, tokenSymbol: toToken.symbol || "", tokenAddress: toToken.address })), (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [lineSpacer, (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                            justifyContent: "space-between",
                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Recipient" }), (0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { address: uiData.toAddress, iconSize: "sm", client: client })] })] }), statusMeta && showStatusRow && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [lineSpacer, (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                            justifyContent: "space-between",
                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Status" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "3xs", center: "y", style: {
                                    alignItems: "flex-end",
                                }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: statusMeta.color, size: "sm", children: statusMeta.status }) })] })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), fromChainExplorers.explorers?.[0]?.url && sourceTxHash && ((0, jsx_runtime_1.jsxs)(buttons_js_1.ButtonLink, { fullWidth: true, variant: "outline", href: (0, url_js_1.formatExplorerTxUrl)(fromChainExplorers.explorers[0]?.url, sourceTxHash), target: "_blank", gap: "xs", style: {
                    fontSize: index_js_1.fontSize.sm,
                    padding: index_js_1.spacing.sm,
                }, children: ["View on ", fromChainName.name, " Explorer", (0, jsx_runtime_1.jsx)(react_icons_1.ExternalLinkIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] })), destinationTxHash &&
                sourceTxHash !== destinationTxHash &&
                toChainExplorers?.explorers?.[0]?.url && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(buttons_js_1.ButtonLink, { fullWidth: true, variant: "outline", href: (0, url_js_1.formatExplorerTxUrl)(toChainExplorers.explorers[0]?.url, destinationTxHash), target: "_blank", gap: "xs", style: {
                            fontSize: index_js_1.fontSize.sm,
                            padding: index_js_1.spacing.sm,
                        }, children: ["View on ", toChainName.name, " Explorer", (0, jsx_runtime_1.jsx)(react_icons_1.ExternalLinkIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] })] }))] }));
}
//# sourceMappingURL=SwapDetailsScreen.js.map