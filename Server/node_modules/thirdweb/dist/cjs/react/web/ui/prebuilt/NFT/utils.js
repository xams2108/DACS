"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTInfo = getNFTInfo;
const getNFT_js_1 = require("../../../../../extensions/erc721/read/getNFT.js");
const getNFT_js_2 = require("../../../../../extensions/erc1155/read/getNFT.js");
const withCache_js_1 = require("../../../../../utils/promise/withCache.js");
/**
 * @internal
 */
async function getNFTInfo(options) {
    return (0, withCache_js_1.withCache)(async () => {
        const nft = await Promise.allSettled([
            (0, getNFT_js_1.getNFT)({
                ...options,
                useIndexer: false, // TODO (insight): switch this call to only call insight once
            }),
            (0, getNFT_js_2.getNFT)({
                ...options,
                useIndexer: false, // TODO (insight): switch this call to only call insight once
            }),
        ]).then(([possibleNFT721, possibleNFT1155]) => {
            // getNFT extension always return an NFT object
            // so we need to check if the tokenURI exists
            if (possibleNFT721.status === "fulfilled" &&
                possibleNFT721.value.tokenURI) {
                return possibleNFT721.value;
            }
            if (possibleNFT1155.status === "fulfilled" &&
                possibleNFT1155.value.tokenURI) {
                return possibleNFT1155.value;
            }
            throw new Error("Failed to load NFT metadata");
        });
        return nft;
    }, {
        cacheKey: `nft_info:${options.contract.chain.id}:${options.contract.address}:${options.tokenId.toString()}`,
        cacheTime: 15 * 60 * 1000,
    });
}
//# sourceMappingURL=utils.js.map