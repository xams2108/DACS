"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTDescription = NFTDescription;
exports.fetchNftDescription = fetchNftDescription;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const function_id_js_1 = require("../../../../../utils/function-id.js");
const provider_js_1 = require("./provider.js");
const utils_js_1 = require("./utils.js");
/**
 * This component fetches and displays an NFT's description. It inherits all the attributes of a <span>
 * so you can style it just like how you would style a <span> element.
 * @returns A <span> element containing the description of the NFT
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription />
 * </NFTProvider>
 * ```
 *
 * ### Show a loading sign while the description is being fetched
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription loadingComponent={<YourLoadingSign />} />
 * </NFTProvider>
 * ```
 *
 * ### Show something in case the description failed to resolve
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription fallbackComponent={<span>Failed to load description</span>} />
 * </NFTProvider>
 * ```
 *
 * ### Custom query options for useQuery (tanstack-query)
 * ```tsx
 * import { NFTProvider, NFTDescription } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTDescription queryOptions={{ retry: 3, enabled: false, }} />
 * </NFTProvider>
 * ```
 *
 * ### Override the description with the `descriptionResolver` prop
 * If you already have the url, you can skip the network requests and pass it directly to the NFTDescription
 * ```tsx
 * <NFTDescription descriptionResolver="The desc of the NFT" />
 * ```
 *
 * You can also pass in your own custom (async) function that retrieves the description
 * ```tsx
 * const getDescription = async () => {
 *   // ...
 *   return description;
 * };
 *
 * <NFTDescription descriptionResolver={getDescription} />
 * ```
 * @component
 * @nft
 * @beta
 */
function NFTDescription({ loadingComponent, fallbackComponent, queryOptions, descriptionResolver, ...restProps }) {
    const { contract, tokenId } = (0, provider_js_1.useNFTContext)();
    const descQuery = (0, react_query_1.useQuery)({
        queryKey: [
            "_internal_nft_description_",
            contract.chain.id,
            contract.address,
            tokenId.toString(),
            {
                resolver: typeof descriptionResolver === "string"
                    ? descriptionResolver
                    : typeof descriptionResolver === "function"
                        ? (0, function_id_js_1.getFunctionId)(descriptionResolver)
                        : undefined,
            },
        ],
        queryFn: async () => fetchNftDescription({ descriptionResolver, contract, tokenId }),
        ...queryOptions,
    });
    if (descQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!descQuery.data) {
        return fallbackComponent || null;
    }
    return (0, jsx_runtime_1.jsx)("span", { ...restProps, children: descQuery.data });
}
/**
 * @internal Exported for tests
 */
async function fetchNftDescription(props) {
    const { descriptionResolver, contract, tokenId } = props;
    if (typeof descriptionResolver === "string") {
        return descriptionResolver;
    }
    if (typeof descriptionResolver === "function") {
        return descriptionResolver();
    }
    const nft = await (0, utils_js_1.getNFTInfo)({ contract, tokenId }).catch(() => undefined);
    if (!nft) {
        throw new Error("Failed to resolve NFT info");
    }
    if (typeof nft.metadata.description !== "string") {
        throw new Error("Failed to resolve NFT description");
    }
    return nft.metadata.description;
}
//# sourceMappingURL=description.js.map