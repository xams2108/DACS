"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenName = TokenName;
exports.fetchTokenName = fetchTokenName;
exports.getQueryKeys = getQueryKeys;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const utils_js_1 = require("../../../../../chains/utils.js");
const addresses_js_1 = require("../../../../../constants/addresses.js");
const contract_js_1 = require("../../../../../contract/contract.js");
const getContractMetadata_js_1 = require("../../../../../extensions/common/read/getContractMetadata.js");
const name_js_1 = require("../../../../../extensions/common/read/name.js");
const function_id_js_1 = require("../../../../../utils/function-id.js");
const provider_js_1 = require("./provider.js");
/**
 * This component fetches then shows the name of a token. For ERC20 tokens, it calls the `name` function in the ERC20 contract.
 * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>
 *
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { TokenProvider, TokenName } from "thirdweb/react";
 * import { ethereum } from "thirdweb/chains";
 *
 * <TokenProvider {...props}>
 *   <TokenName  />
 * </TokenProvider>
 * ```
 * Result:
 * ```html
 * <span>Ether</span>
 * ```
 *
 * ### Custom name resolver
 * By default TokenName will call the `name` method of the token contract.
 * However if you have a different way to fetch the name, you can pass the function to the `nameResolver` prop.
 * Note: nameResolver should either be a string or a function (async) that returns a string.
 * ```tsx
 * async function fetchNameMethod() {
 *   // your own fetching logic
 *   return "the token name";
 * }
 *
 * <TokenName nameResolver={fetchNameMethod} />
 * ```
 *
 * Alternatively you can also pass in a string directly:
 * ```tsx
 * <TokenName nameResolver="USD Coin Circle" />
 * ```
 *
 *
 * ### Format the name (capitalize, truncate, etc.)
 * The TokenName component accepts a `formatFn` which takes in a string and outputs a string
 * The function is used to modify the name of the token
 *
 * ```tsx
 * const concatStr = (str: string):string => str + "Token"
 *
 * <TokenName formatFn={concatStr} />
 * ```
 *
 * Result:
 * ```html
 * <span>Ether Token</span>
 * ```
 *
 * ### Show a loading sign when the name is being fetched
 * ```tsx
 * import { TokenProvider, TokenName } from "thirdweb/react";
 *
 * <TokenProvider address="0x...">
 *   <TokenName loadingComponent={<Spinner />} />
 * </TokenProvider>
 * ```
 *
 * ### Fallback to something when the name fails to resolve
 * ```tsx
 * <TokenProvider address="0x...">
 *   <TokenName fallbackComponent={"Failed to load"} />
 * </TokenProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <TokenName
 *   queryOptions={{
 *     enabled: isEnabled,
 *     retry: 4,
 *   }}
 * />
 * ```
 *
 * @component
 * @token
 * @beta
 */
function TokenName({ nameResolver, formatFn, loadingComponent, fallbackComponent, queryOptions, ...restProps }) {
    const { address, client, chain } = (0, provider_js_1.useTokenContext)();
    const nameQuery = (0, react_query_1.useQuery)({
        queryKey: getQueryKeys({ chainId: chain.id, nameResolver, address }),
        queryFn: async () => fetchTokenName({ address, chain, client, nameResolver }),
        ...queryOptions,
    });
    if (nameQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!nameQuery.data) {
        return fallbackComponent || null;
    }
    if (formatFn && typeof formatFn === "function") {
        return (0, jsx_runtime_1.jsx)("span", { ...restProps, children: formatFn(nameQuery.data) });
    }
    return (0, jsx_runtime_1.jsx)("span", { ...restProps, children: nameQuery.data });
}
/**
 * @internal Exported for tests only
 */
async function fetchTokenName(props) {
    const { nameResolver, address, client, chain } = props;
    if (typeof nameResolver === "string") {
        return nameResolver;
    }
    if (typeof nameResolver === "function") {
        return nameResolver();
    }
    if (address.toLowerCase() === addresses_js_1.NATIVE_TOKEN_ADDRESS.toLowerCase()) {
        // Don't wanna use `getChainName` because it has some side effect (it catches error and defaults to "ETH")
        return (0, utils_js_1.getChainMetadata)(chain).then((data) => data.nativeCurrency.name);
    }
    // Try to fetch the name from both the `name` function and the contract metadata
    // then prioritize its result
    const contract = (0, contract_js_1.getContract)({ address, client, chain });
    const [_name, contractMetadata] = await Promise.all([
        (0, name_js_1.name)({ contract }).catch(() => undefined),
        (0, getContractMetadata_js_1.getContractMetadata)({ contract }).catch(() => undefined),
    ]);
    if (typeof _name === "string") {
        return _name;
    }
    if (typeof contractMetadata?.name === "string") {
        return contractMetadata.name;
    }
    throw new Error("Failed to resolve name from both name() and contract metadata");
}
/**
 * @internal
 */
function getQueryKeys(props) {
    const { chainId, address, nameResolver } = props;
    return [
        "_internal_token_name_",
        chainId,
        address,
        {
            resolver: typeof nameResolver === "string"
                ? nameResolver
                : typeof nameResolver === "function"
                    ? (0, function_id_js_1.getFunctionId)(nameResolver)
                    : undefined,
        },
    ];
}
//# sourceMappingURL=name.js.map