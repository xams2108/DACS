"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSiweAuth = useSiweAuth;
const react_query_1 = require("@tanstack/react-query");
const utils_js_1 = require("../../../../chains/utils.js");
/**
 * @internal
 */
function useSiweAuth(activeWallet, activeAccount, authOptions) {
    const requiresAuth = !!authOptions;
    const queryClient = (0, react_query_1.useQueryClient)();
    const isLoggedInQuery = (0, react_query_1.useQuery)({
        queryKey: ["siwe_auth", "isLoggedIn", activeAccount?.address],
        enabled: requiresAuth && !!activeAccount?.address,
        queryFn: () => {
            // these cases should never be hit but just in case...
            if (!authOptions || !activeAccount?.address) {
                return false;
            }
            return authOptions.isLoggedIn(activeAccount.address);
        },
        gcTime: 0,
        placeholderData: false,
        refetchOnWindowFocus: false,
    });
    const loginMutation = (0, react_query_1.useMutation)({
        mutationKey: ["siwe_auth", "login", activeAccount?.address],
        mutationFn: async () => {
            if (!authOptions) {
                throw new Error("No auth options provided");
            }
            if (!activeWallet) {
                throw new Error("No active wallet");
            }
            const chain = activeWallet.getChain();
            if (!chain) {
                throw new Error("No active chain");
            }
            if (!activeAccount) {
                throw new Error("No active account");
            }
            const [payload, { signLoginPayload }] = await Promise.all([
                authOptions.getLoginPayload({
                    address: activeAccount.address,
                    chainId: chain.id,
                }),
                Promise.resolve().then(() => require("../../../../auth/core/sign-login-payload.js")),
            ]);
            if (payload.chain_id) {
                await activeWallet.switchChain((0, utils_js_1.getCachedChain)(Number(payload.chain_id)));
            }
            const signedPayload = await signLoginPayload({
                payload,
                account: activeAccount,
            });
            return await authOptions.doLogin(signedPayload);
        },
        onSuccess: () => {
            return queryClient.invalidateQueries({
                queryKey: ["siwe_auth", "isLoggedIn"],
            });
        },
    });
    const logoutMutation = (0, react_query_1.useMutation)({
        mutationKey: ["siwe_auth", "logout", activeAccount?.address],
        mutationFn: async () => {
            if (!authOptions) {
                throw new Error("No auth options provided");
            }
            return await authOptions.doLogout();
        },
        onSuccess: () => {
            return queryClient.invalidateQueries({
                queryKey: ["siwe_auth", "isLoggedIn"],
            });
        },
    });
    return {
        // is auth even enabled
        requiresAuth,
        // login
        doLogin: loginMutation.mutateAsync,
        isLoggingIn: loginMutation.isPending,
        // logout
        doLogout: logoutMutation.mutateAsync,
        isLoggingOut: logoutMutation.isPending,
        // checking if logged in
        isLoggedIn: isLoggedInQuery.data,
        isLoading: isLoggedInQuery.isFetching,
        isPending: isLoggedInQuery.isPending,
    };
}
//# sourceMappingURL=useSiweAuth.js.map