"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOwnedNFTs = getOwnedNFTs;
const index_js_1 = require("../../../insight/index.js");
const getNFT_js_1 = require("./getNFT.js");
const getOwnedTokenIds_js_1 = require("./getOwnedTokenIds.js");
/**
 * Retrieves the owned NFTs for a given owner.
 * This extension only works with ERC721 contracts that support the [`tokenOfOwnerByIndex`](https://portal.thirdweb.com/references/typescript/v5/erc721/tokenOfOwnerByIndex) method
 * @param options - The options for retrieving the owned NFTs.
 * @returns A promise that resolves to an array of NFTs owned by the specified owner.
 * @extension ERC721
 * @example
 * ```ts
 * import { getOwnedNFTs } from "thirdweb/extensions/erc721";
 *
 * const ownedNFTs = await getOwnedNFTs({
 *  contract,
 *  owner: "0x1234...",
 * });
 * ```
 */
async function getOwnedNFTs(options) {
    const { useIndexer = true } = options;
    if (useIndexer) {
        try {
            return await getOwnedNFTsFromInsight(options);
        }
        catch {
            return await getOwnedNFTsFromRPC(options);
        }
    }
    return await getOwnedNFTsFromRPC(options);
}
async function getOwnedNFTsFromRPC(options) {
    const tokenIds = await (0, getOwnedTokenIds_js_1.getOwnedTokenIds)(options);
    return Promise.all(tokenIds.map((tokenId) => (0, getNFT_js_1.getNFT)({
        contract: options.contract,
        tokenId,
        useIndexer: false,
    }).then((nft) => ({
        ...nft,
        // add the owner to the NFT since we know it
        owner: options.owner,
    }))));
}
async function getOwnedNFTsFromInsight(options) {
    const limit = 50;
    const nfts = [];
    let page = 0;
    let hasMore = true;
    // TODO (insight): add support for contract address filters
    while (hasMore) {
        const pageResults = await (0, index_js_1.getOwnedNFTs)({
            client: options.contract.client,
            chains: [options.contract.chain],
            ownerAddress: options.owner,
            queryOptions: {
                limit,
                page,
            },
        });
        nfts.push(...pageResults);
        // If we got fewer results than the limit, we've reached the end
        if (pageResults.length < limit) {
            hasMore = false;
        }
        else {
            page++;
        }
    }
    const results = nfts;
    return results
        .filter((n) => n.tokenAddress.toLowerCase() === options.contract.address.toLowerCase())
        .map((result) => ({
        ...result,
        owner: options.owner,
    }));
}
//# sourceMappingURL=getOwnedNFTs.js.map