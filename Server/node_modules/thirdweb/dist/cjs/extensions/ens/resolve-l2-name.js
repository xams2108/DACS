"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveL2Name = resolveL2Name;
const ox__AbiParameters = require("ox/AbiParameters");
const ox__Bytes = require("ox/Bytes");
const ox__Ens = require("ox/Ens");
const ox__Hash = require("ox/Hash");
const ox__Hex = require("ox/Hex");
const viem_1 = require("viem");
const contract_js_1 = require("../../contract/contract.js");
const withCache_js_1 = require("../../utils/promise/withCache.js");
const name_js_1 = require("./__generated__/L2Resolver/read/name.js");
/**
 * Convert an address to a reverse node for ENS resolution
 *
 * @internal
 */
const convertReverseNodeToBytes = (address, chainId) => {
    const addressFormatted = address.toLocaleLowerCase();
    // We temporarily need to use the raw hashing function from noble due to a bug in ox
    const addressNode = ox__Hex.fromBytes(ox__Hash.keccak256(ox__Bytes.fromString(addressFormatted.slice(2))));
    const cointype = (0x80000000 | chainId) >>> 0;
    const chainCoinType = cointype.toString(16).toLocaleUpperCase();
    const reverseNode = ox__Ens.namehash(`${chainCoinType.toLocaleUpperCase()}.reverse`);
    const addressReverseNode = ox__Hash.keccak256(ox__AbiParameters.encodePacked(["bytes32", "bytes32"], [reverseNode, addressNode]));
    viem_1.keccak256;
    return addressReverseNode;
};
/**
 * Resolves the L2 name for a specified address.
 * @param options - The options for resolving an L2 ENS address.
 * @example
 * ```ts
 * import { resolveL2Name } from "thirdweb/extensions/ens";
 * const name = await resolveL2Name({
 *    client,
 *    address: "0x1234...",
 *    resolverAddress: "0x...",
 *    resolverChain: base,
 * });
 * ```
 *
 * Resolve a Basename.
 * ```ts
 * import { resolveL2Name, BASENAME_RESOLVER_ADDRESS } from "thirdweb/extensions/ens";
 * import { base } from "thirdweb/chains";
 * const name = await resolveL2Name({
 *    client,
 *    address: "0x1234...",
 *    resolverAddress: BASENAME_RESOLVER_ADDRESS,
 *    resolverChain: base,
 * });
 * ```
 * @extension ENS
 * @returns A promise that resolves to the Ethereum address.
 */
async function resolveL2Name(options) {
    const { client, address, resolverAddress, resolverChain } = options;
    return (0, withCache_js_1.withCache)(async () => {
        const contract = (0, contract_js_1.getContract)({
            client,
            chain: resolverChain,
            address: resolverAddress,
        });
        const reverseName = convertReverseNodeToBytes(address, resolverChain.id || 1);
        const resolvedName = await (0, name_js_1.name)({
            contract,
            node: reverseName,
        }).catch((e) => {
            if ("data" in e && e.data === "0x7199966d") {
                return null;
            }
            throw e;
        });
        if (resolvedName === "") {
            return null;
        }
        return resolvedName;
    }, {
        cacheKey: `ens:name:${resolverChain}:${address}`,
        // 1min cache
        cacheTime: 60 * 1000,
    });
}
//# sourceMappingURL=resolve-l2-name.js.map