"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactions = getTransactions;
/**
 * Get transactions for a wallet
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const transactions = await Insight.getTransactions({
 *   client,
 *   walletAddress: "0x1234567890123456789012345678901234567890",
 *   chains: [sepolia],
 * });
 * ```
 * @insight
 */
async function getTransactions(args) {
    const [{ getV1WalletsByWalletAddressTransactions }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify },] = await Promise.all([
        Promise.resolve().then(() => require("@thirdweb-dev/insight")),
        Promise.resolve().then(() => require("../utils/domains.js")),
        Promise.resolve().then(() => require("../utils/fetch.js")),
        Promise.resolve().then(() => require("./common.js")),
        Promise.resolve().then(() => require("../utils/json.js")),
    ]);
    await assertInsightEnabled(args.chains);
    const threeMonthsAgoInSeconds = Math.floor((Date.now() - 3 * 30 * 24 * 60 * 60 * 1000) / 1000);
    const { client, walletAddress, chains, queryOptions } = args;
    const defaultQueryOptions = {
        chain: chains.map((chain) => chain.id),
        filter_block_timestamp_gte: threeMonthsAgoInSeconds,
        limit: 100,
    };
    const result = await getV1WalletsByWalletAddressTransactions({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        query: {
            ...defaultQueryOptions,
            ...queryOptions,
        },
        path: {
            wallet_address: walletAddress,
        },
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    return result.data.data || [];
}
//# sourceMappingURL=get-transactions.js.map