declare type Candle = {
    o: number;
    h: number;
    l: number;
    c: number;
    v: number;
    time: number;
};
/**
 * Is an indicator that gives a data representation of how much volume occurs
 * at each individual price over a certain period of time (session)
 */
export declare class VolumeProfile {
    private precision;
    private valueToRoundWith;
    private source;
    private sum;
    private sessionPricesLookup;
    private sessionVolumes;
    private lastPrice;
    private prevCandle;
    constructor(precision?: number, source?: (candle: Candle) => number);
    /**
     * Get volume profile for current session
     */
    getSession(candle: Candle, cleanOffset?: number): Map<any, any>;
    /**
     * Get session avg volume
     */
    getSessionAvg(): number;
    /**
     * Get unformatted (raw) data for session
     */
    getRawSession(): Record<number, number>;
    /**
     * Add value to session
     */
    nextValue(candle: Candle): void;
    /**
     * Round price value
     */
    private roundPrice;
    /**
     * Add volume to current session
     */
    private addToSession;
    /**
     * Percent change
     */
    private diffPercent;
}
export {};
