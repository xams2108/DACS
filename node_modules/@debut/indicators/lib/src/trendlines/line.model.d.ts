import { LineDirective, Point } from './types';
/**
 * Line Model class.
 * this.index - index in lineDirectives array
 */
export declare class LineModel {
    type: 'h' | 'l';
    index: number;
    length: number;
    startPoint: Point;
    prevPoint: Point;
    thisPoint: Point;
    nextPoint: Point;
    candlePoint: Point;
    forked: boolean;
    forkedAt: number;
    forkedValue: number;
    lastForkY: number;
    k: number;
    private b;
    private step;
    rollback: {
        k: number;
        b: number;
        length: number;
        lastForkTime: number;
        lastForkValue: number;
    } | null;
    constructor(h: any, l: any, i: any, step: any, index: any, prevPoint?: any);
    init(h: any, l: any, i: any): void;
    /**
     * Update line object. Returns LineDirectives - actions list for the next candle based on prediction
     * @param h
     * @param l
     * @param i
     */
    update(h: any, l: any, i: any): LineDirective;
    /**
     * Update timescale
     * TODO operate in different time scale
     * @param step
     */
    updateStep(step: any): void;
}
