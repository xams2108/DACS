import { IndicatorConstructor } from './sampler';
/**
 * Level creation for dynamic data, upper and lower (configurated)
 */
export declare class UniLevel<T extends IndicatorConstructor> {
    redunant: number;
    private multiplier;
    private offset;
    private prevValue;
    private lastUpperValue;
    private lastLowerValue;
    private samplerUp;
    private samplerLow;
    constructor(redunant: number, indicator: T, samples: number, multiplier?: number, offset?: number);
    create(...args: ConstructorParameters<T>): void;
    nextValue(value: number): number[];
}
/**
 * Smoothed level creation for dynamic data
 * @deprecated
 */
export declare class Level {
    period: number;
    samples: number;
    redunant: number;
    private type;
    private sample1Up;
    private sample2Up;
    private sample3Up;
    private sample1Low;
    private sample2Low;
    private sample3Low;
    private upper;
    private lower;
    private lastUpperValue;
    private lastLowerValue;
    constructor(period: number, samples: number, redunant?: number, type?: 'WEMA' | 'EMA' | 'SMA');
    nextValue(value: number): {
        upper: number;
        lower: number;
    };
    getUp(value: number): number;
    getDown(value: number): number;
    private createSample;
}
