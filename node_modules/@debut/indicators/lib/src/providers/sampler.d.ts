export interface IndicatorInstance {
    nextValue: (value: number) => number;
    momentValue: (value: number) => number;
}
export interface IndicatorConstructor {
    new (...args: any[]): IndicatorInstance;
}
/**
 * Sampler class for using with simple indicators like SMA, EMA, which nextValue arguments is number and
 * return type also number. Can be user for replace SMA(SMA(SMA(SMA))) calls (sma x4 sample)
 */
export declare class Sampler<T extends IndicatorConstructor> {
    private indicator;
    private samples;
    private _indicators;
    constructor(indicator: T, samples: number);
    /**
     * Create indicator instances for next usage, pass period and other
     * indicator constructor parameters
     */
    create(...args: ConstructorParameters<T>): void;
    /**
     * Calculate next values to get all samples of current idicator
     */
    nextValue(value: number): number;
    /**
     * Get immediate value
     */
    momentValue(value: number): number;
}
