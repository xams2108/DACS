declare type Comparator = (a: number, b: number) => number;
/**
 * Heap
 */
export declare class Heap {
    compare: Comparator;
    private limit;
    private heapArray;
    private heapBuffer;
    /**
     * Heap instance constructor.
     * @param  {Function} compare Optional comparison function, defaults to Heap.minComparator<number>
     */
    constructor(compare?: Comparator, limit?: number);
    /**
     * Min number heap comparison function, default.
     * @param  {Number} a     First element
     * @param  {Number} b     Second element
     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up
     */
    static minComparator(a: number, b: number): number;
    /**
     * Max number heap comparison function.
     * @param  {Number} a     First element
     * @param  {Number} b     Second element
     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up
     */
    static maxComparator(a: number, b: number): number;
    /**
     * Is all elements ready and filled inside of period (limit)?
     */
    filled(): boolean;
    /**
     * Top node. Aliases: `element`.
     * Same as: `top(1)[0]`
     */
    peek(): number;
    /**
     * Pushes element(s) to the heap.
     */
    push(element: number): boolean;
    /**
     * Extract the top node (root). Aliases: `poll`.
     * @return {any} Extracted top node, undefined if empty
     */
    pop(): number | undefined;
    /**
     * Remove an element from the heap.
     */
    remove(element: number): boolean;
    /**
     * Pop the current peek value, and add the new item.
     */
    private replace;
    /**
     * Move a node to a new index, switching places
     * @param  {Number} j First node index
     * @param  {Number} k Another node index
     */
    _moveNode(j: number, k: number): void;
    /**
     * Move a node down the tree (to the leaves) to find a place where the heap is sorted.
     * @param  {Number} i Index of the node
     */
    _sortNodeDown(i: number): void;
    /**
     * Move a node up the tree (to the root) to find a place where the heap is sorted.
     * @param  {Number} i Index of the node
     */
    _sortNodeUp(i: number): void;
    /**
     * Get the elements of these node's children
     * @param  {Number} idx Node index
     * @return {Array(any)}  Children elements
     */
    private getChildrenOf;
}
export {};
