{"version":3,"sources":["../src/mergeHeaders.ts","../src/getSpec.ts","../src/getLogs.ts","../src/plugins/@hey-api/client-core/config.ts","../src/plugins/@hey-api/client-core/utils.ts","../src/compiler/classes.ts","../src/utils/regexp.ts","../src/utils/escape.ts","../src/compiler/utils.ts","../src/utils/config.ts","../src/compiler/types.ts","../src/compiler/module.ts","../src/compiler/convert.ts","../src/compiler/return.ts","../src/compiler/transform.ts","../src/compiler/typedef.ts","../src/compiler/index.ts","../src/generate/utils.ts","../src/generate/client.ts","../src/utils/url.ts","../src/utils/ref.ts","../src/utils/stringCase.ts","../src/plugins/shared/utils/ref.ts","../src/plugins/@hey-api/typescript/ref.ts","../src/plugins/@hey-api/client-core/client.ts","../src/plugins/@hey-api/client-core/createClientConfig.ts","../src/plugins/@hey-api/client-core/plugin.ts","../src/plugins/@hey-api/client-axios/config.ts","../src/plugins/@hey-api/client-fetch/config.ts","../src/plugins/@hey-api/client-next/config.ts","../src/plugins/@hey-api/client-nuxt/config.ts","../src/plugins/@hey-api/legacy-angular/config.ts","../src/plugins/@hey-api/legacy-axios/config.ts","../src/plugins/@hey-api/legacy-fetch/config.ts","../src/plugins/@hey-api/legacy-node/config.ts","../src/plugins/@hey-api/legacy-xhr/config.ts","../src/openApi/shared/utils/identifier.ts","../src/plugins/@hey-api/schemas/plugin.ts","../src/generate/files.ts","../src/ir/context.ts","../src/openApi/shared/utils/filter.ts","../src/openApi/shared/utils/parameter.ts","../src/openApi/common/parser/sanitize.ts","../src/openApi/shared/utils/operation.ts","../src/ir/mediaType.ts","../src/openApi/2.0.x/parser/mediaType.ts","../src/ir/pagination.ts","../src/ir/utils.ts","../src/openApi/shared/utils/discriminator.ts","../src/openApi/shared/utils/schema.ts","../src/openApi/2.0.x/parser/schema.ts","../src/openApi/2.0.x/parser/pagination.ts","../src/openApi/2.0.x/parser/operation.ts","../src/openApi/2.0.x/parser/parameter.ts","../src/openApi/2.0.x/parser/server.ts","../src/openApi/2.0.x/parser/index.ts","../src/openApi/3.0.x/parser/mediaType.ts","../src/openApi/3.0.x/parser/schema.ts","../src/openApi/3.0.x/parser/pagination.ts","../src/openApi/3.0.x/parser/operation.ts","../src/openApi/3.0.x/parser/parameter.ts","../src/openApi/3.0.x/parser/requestBody.ts","../src/openApi/3.0.x/parser/server.ts","../src/openApi/3.0.x/parser/index.ts","../src/openApi/3.1.x/parser/mediaType.ts","../src/openApi/3.1.x/parser/schema.ts","../src/openApi/3.1.x/parser/pagination.ts","../src/openApi/3.1.x/parser/operation.ts","../src/openApi/3.1.x/parser/parameter.ts","../src/openApi/3.1.x/parser/requestBody.ts","../src/openApi/3.1.x/parser/server.ts","../src/openApi/3.1.x/parser/index.ts","../src/utils/const.ts","../src/utils/transform.ts","../src/utils/unique.ts","../src/utils/sort.ts","../src/utils/enum.ts","../src/utils/meta.ts","../src/utils/type.ts","../src/openApi/common/parser/operation.ts","../src/openApi/index.ts","../src/plugins/@hey-api/schemas/plugin-legacy.ts","../src/plugins/@hey-api/schemas/config.ts","../src/ir/parameter.ts","../src/ir/schema.ts","../src/ir/operation.ts","../src/utils/postprocess.ts","../src/plugins/zod/plugin.ts","../src/plugins/@hey-api/transformers/plugin.ts","../src/plugins/@hey-api/sdk/constants.ts","../src/plugins/@hey-api/sdk/plugin-legacy.ts","../src/plugins/@hey-api/sdk/typeOptions.ts","../src/plugins/@hey-api/sdk/plugin.ts","../src/plugins/@hey-api/sdk/config.ts","../src/plugins/@hey-api/typescript/plugin-legacy.ts","../src/plugins/@hey-api/transformers/plugin-legacy.ts","../src/plugins/@hey-api/transformers/config.ts","../src/plugins/shared/utils/case.ts","../src/plugins/@hey-api/typescript/clientOptions.ts","../src/plugins/@hey-api/typescript/plugin.ts","../src/plugins/@hey-api/typescript/config.ts","../src/plugins/@tanstack/query-core/infiniteQueryOptions.ts","../src/plugins/@tanstack/query-core/useType.ts","../src/plugins/@tanstack/query-core/queryKey.ts","../src/plugins/@tanstack/query-core/mutationOptions.ts","../src/plugins/@tanstack/query-core/queryOptions.ts","../src/plugins/@tanstack/query-core/plugin.ts","../src/plugins/@tanstack/query-core/plugin-legacy.ts","../src/plugins/@tanstack/angular-query-experimental/config.ts","../src/plugins/@tanstack/react-query/config.ts","../src/plugins/@tanstack/solid-query/config.ts","../src/plugins/@tanstack/svelte-query/config.ts","../src/plugins/@tanstack/vue-query/config.ts","../src/plugins/fastify/plugin.ts","../src/plugins/fastify/config.ts","../src/plugins/zod/config.ts","../src/plugins/index.ts","../src/initConfigs.ts"],"names":["mergeHeaders","headers","mergedHeaders","header","iterator","key","value","v","getSpec","fetchOptions","inputPath","timeout","watch","refParser","$RefParser","resolvedInput","getResolvedInput","arrayBuffer","hasChanged","response","request","sendRequest","error","eTag","lastModified","content","getLogs","userConfig","logs","clientDefaultConfig","clientId","getClientBaseUrlKey","config","client","getClientPlugin","name","plugin","illegalStartCharactersRegExp","numberRegExp","reservedBrowserGlobalsRegExp","reservedJavaScriptGlobalsRegExp","reservedJavaScriptKeywordsRegExp","reservedNodeGlobalsRegExp","reservedTypeScriptKeywordsRegExp","validTypescriptIdentifierRegExp","escapeName","unescapeName","escapeComment","_l","w","EOL","_config","getConfig","setConfig","isLegacyClient","legacyNameFromConfig","printer","ts","createSourceFile","sourceText","blankSourceFile","unescapeUnicode","_","hex","tsNodeToString","node","unescape","result","stringToTsNodes","createIdentifier","text","ots","alias","asType","nameNode","aliasNode","hasBothQuotes","hasNewlines","hasUnescapedBackticks","isBacktickEscaped","createStringLiteral","isTsNode","isType","processCommentObject","commentObject","lines","line","jsdocTexts","index","jsdoc","cleanedJsdoc","addLeadingComments","comments","isObjectStyle","comment","commentObjects","createTypeNode","base","args","createTypeReferenceNode","arg","createPropertyAccessChain","expression","createPropertyAccessExpression","isOptional","nodeExpression","nodeName","createNull","toExpression","identifiers","isValueAccess","shorthand","createArrayLiteralExpression","createObjectType","parts","toAccessLevelModifiers","access","keyword","modifiers","toParameterDeclarations","parameters","parameter","createParameterDeclaration","param","createKeywordTypeNode","kind","toTypeParameters","types","createTypeParameterDeclaration","createTypeOperatorNode","operator","type","operatorKeyword","constraint","defaultType","createMappedTypeNode","members","nameType","questionToken","readonlyToken","typeParameter","createLiteralTypeNode","literal","createArrowFunction","async","multiLine","returnType","statements","createBlock","createAnonymousFunction","elements","createAwaitExpression","createFunctionTypeNode","typeParameters","obj","properties","canShorthand","assignment","nameIdentifier","createAsExpression","initializer","createPropertyAssignment","createEnumDeclaration","enumMemberComments","enumMember","createEnumMember","createNamespaceDeclaration","createIndexedAccessTypeNode","indexType","objectType","isSingleQuote","createConditionalExpression","condition","whenFalse","whenTrue","createTypeOfExpression","createTypeAliasDeclaration","exportType","typeArguments","typeName","createTypeParenthesizedNode","required","createNewExpression","argumentsArray","createForOfStatement","awaitModifier","statement","createAssignment","left","right","createRegularExpressionLiteral","flags","createTemplateLiteralType","spans","spanText","item","span","createExportAllDeclaration","module","createCallExpression","functionName","createNamedExportDeclarations","exports","exportedTypes","hasNonTypeExport","exportClause","moduleSpecifier","createConstVariable","assertion","destructure","exportConst","declaration","createNamedImportDeclarations","imports","importedTypes","hasNonTypeImport","namedBindings","importClause","createConstructorDeclaration","accessLevel","createMethodDeclaration","isStatic","createClassDeclaration","decorator","m","member","expressionToStatement","createReturnStatement","createReturnFunctionCall","createReturnVariable","createSafeAccessExpression","path","element","createAccessExpression","createPropertyAccessExpressions","expressions","createBinaryExpression","createIfStatement","elseStatement","thenStatement","createDateTransformMutation","safeAccessExpression","accessExpression","createFunctionTransformMutation","transformerName","createArrayTransformMutation","createDateTransformerExpression","parameterName","createArrayMapTransform","transformExpression","nullNode","maybeNullable","isNullable","createTypeInterfaceNode","indexProperty","useLegacyResolution","property","signature","indexSignature","createTypeUnionNode","nodes","createTypeIntersectionNode","createTypeTupleNode","createTypeRecordNode","keys","values","keyNode","valueNode","createTypeArrayNode","compiler","ensureDirSync","fs","relativeModulePath","moduleOutput","sourceOutput","outputParts","getClientSrcPath","pluginFilePathComponents","clientModulePath","clientSrcPath","outputPath","clientApi","parseUrlRegExp","parseUrl","errorResponse","match","host","protocol","irRef","isRefOpenApiComponent","$ref","refToParts","refToName","resolveRef","spec","current","part","p","uppercaseRegExp","lowercaseRegExp","identifierRegExp","separatorsRegExp","leadingSeparatorsRegExp","separatorsAndIdentifierRegExp","numbersAndIdentifierRegExp","preserveCase","_case","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","isLastLastCharPreserved","separator","character","nextIndex","nextCharacter","isSeparatorBeforeNextCharacter","characterLower","characterUpper","stringCase","stripLeadingSeparators","identifier","offset","operationIrRef","id","affix","typesId","refIdentifier","onGet","importIdentifierData","context","file","operation","identifierData","importIdentifierError","identifierError","importIdentifierResponse","identifierResponse","resolveBaseUrlString","baseUrl","servers","createClient","clientModule","createConfig","clientOptions","createClientConfig","defaultValues","resolvedBaseUrl","url","createConfigParameters","createClientConfigType","configType","defaultClientOptions","defaultClientOptionsType","tType","typeCreateClientConfig","clientPluginHandler","defaultConfig","regexps","ensureValidIdentifier","regexp","schemasId","stripSchema","schema","schemaToJsonSchemaDraft_04","_schema","schemaToJsonSchemaDraft_05","schemaToJsonSchema2020_12","schemaName","customName","schemasV2_0_X","schemasV3_0_X","schemasV3_1_X","handler","TypeScriptFile","dir","exportFromIndex","identifierCase","namespace","refValue","ensureUniqueIdentifier","importedItem","moduleMap","splitNameAndExtension","filePath","configFileParts","cfgParts","thisPathParts","filePathParts","relativePath","pathArray","relativePathToFile","relativeFolder","fileName","options","extension","output","importsStringArray","_module","count","create","nameTransformer","nameWithTransform","nameWithCasing","nameValue","IRContext","event","callbackFn","outputDir","createdFile","isFiltersMatch","filters","filter","field","canProcessRef","excludeFilters","includeFilters","state","createFilter","matcher","createFilters","matchers","mergeParametersObjects","source","target","ensureValidTypeScriptJavaScriptIdentifier","replaced","sanitizeNamespaceIdentifier","sanitizeOperationParameterName","withoutBrackets","ensureUniqueOperationId","method","operationIds","operationKey","operationToId","urlWithoutPlaceholders","fileLikeRegExp","jsonMimeRegExp","multipartFormDataMimeRegExp","textMimeRegExp","xWwwFormUrlEncodedMimeRegExp","octetStreamMimeRegExp","isMediaTypeFileLike","mediaType","mediaTypeToIrMediaType","contentToSchema","mediaTypeObject","mimeTypes","DEFAULT_PAGINATION_KEYWORDS","getPaginationKeywordsRegExp","keywords","pattern","addItemsToSchema","items","logicalOperator","mutateSchemaOneItem","discriminatorValues","mapping","mergeSchemaAccessScopes","a","b","mergedScopes","scope","getSchemaType","parseSchemaJsDoc","irSchema","parseSchemaMeta","parseArray","schemaItems","irItemsSchema","schemaToIrSchema","ofArray","parseBoolean","parseNumber","parseObject","schemaProperties","irPropertySchema","irAdditionalPropertiesSchema","parseString","initIrSchema","parseAllOf","schemaType","compositionSchemas","compositionSchema","irCompositionSchema","ref","valueSchemas","irDiscriminatorSchema","irRefSchema","irObjectSchema","parseOneType","requiredProperty","finalCompositionSchema","nestedItems","parseEnum","enumValue","typeOfEnumValue","enumType","irTypeSchema","parseRef","refSchema","parseNullableType","typeIrSchema","parseType","parseUnknown","parseSchema","isPaginationType","paginationField","finalSchema","allOf","pagination","parseOperationJsDoc","irOperation","initIrOperation","operationToIrOperation","securitySchemesMap","isRequestBodyRequired","requestBodyObject","requestBodyObjectRequired","requestBodyParameter","requestBody","responseObject","securitySchemeObjects","securityRequirementObject","securitySchemeObject","irSecuritySchemeObject","parseOperation","defaultExplode","collectionFormat","defaultStyle","_in","parametersArrayToObject","parametersObject","parameterOrReference","parameterToIrParameter","style","irParameter","parseServers","schemes","scheme","parseV2_0_X","shouldProcessRef","pathItem","finalPathItem","commonOperation","operationArgs","$refDelete","$refGet","$refHead","$refOptions","$refPatch","$refPost","$refPut","parseAnyOf","parseOneOf","defaultAllowReserved","explode","parseParameter","requestBodyToIrRequestBody","irRequestBody","parseRequestBody","parseV3_0_X","securityOrReference","requestBodyOrReference","$refTrace","getSchemaTypes","irItemSchema","parseNull","schemaTypes","irResolvedRefSchema","parseManyTypes","nonNullCompositionSchemas","parseV3_1_X","refSchemasPartial","transformServiceName","transformTypeName","cleanAndTransformTypeName","transformed","unique","arr","sort","nameA","nameB","sorterByName","sortByName","enumKey","enumUnionType","enums","enumerator","union","enumEntry","getSchemasMeta","definitionName","isModelDate","model","typeReference","typeNode","meta","typeArray","toType","typeEnum","typeDict","typeUnionOrIntersection","typeInterface","isLegacy","maybeRequired","transformTypeKeyName","setUniqueTypeName","unsetUniqueTypeName","getOperationKey","isOperationParameterRequired","parseOpenApiSpec","ensureValidSchemaOutput","parentKey","toSchemaName","validName","handlerLegacy","files","openApi","addSchema","definition","hasParameterGroupObjectRequired","parameterGroup","hasParametersObjectRequired","parameterWithPagination","deduplicateSchema","uniqueItems","typeIds","typeId","liftedSchema","hasOperationDataRequired","operationPagination","body","resolvedSchema","paginationProp","statusCodeToGroup","statusCode","operationResponsesMap","errors","responses","defaultResponse","inferred","description","errorKeys","errorUnion","responseKeys","responseUnion","getServiceName","zodId","andIdentifier","coerceIdentifier","defaultIdentifier","intersectionIdentifier","lazyIdentifier","lengthIdentifier","literalIdentifier","maxIdentifier","minIdentifier","objectIdentifier","optionalIdentifier","readonlyIdentifier","regexIdentifier","unionIdentifier","zIdentifier","arrayTypeToZodSchema","arrayExpression","unknownTypeToZodSchema","itemExpressions","schemaToZodSchema","booleanTypeToZodSchema","enumTypeToZodSchema","enumMembers","enumExpression","neverTypeToZodSchema","nullTypeToZodSchema","numberParameter","isBigInt","numberTypeToZodSchema","numberExpression","objectTypeToZodSchema","isRequired","propertyExpression","propertyName","stringTypeToZodSchema","stringExpression","tupleTypeToZodSchema","tupleElements","undefinedTypeToZodSchema","voidTypeToZodSchema","schemaTypeToZodSchema","operationToZodSchema","optional","anyType","isCircularReference","identifierRef","zodSchema","itemTypes","firstSchema","callParameter","bigIntExpressions","dataExpression","bigIntCallExpression","dateExpressions","identifierDate","operationTransformerIrRef","schemaIrRef","schemaResponseTransformerRef","transformersId","dataVariableName","ensureStatements","isNodeReturnStatement","schemaResponseTransformerNodes","processSchemaType","callExpression","mapCallbackStatements","stmt","propertyAccessExpression","propertyNodes","noNullableTypesInSchema","x","arrayNodes","identifierItem","identifierResponseTransformer","responseTransformerNode","nuxtTypeComposable","nuxtTypeDefault","nuxtTypeResponse","sdkId","generateImport","onImport","setUniqueTypeNameArgs","created","modelResponseTransformerTypeName","operationDataTypeName","operationErrorTypeName","operationResponseTransformerTypeName","operationResponseTypeName","operationOptionsLegacyParserType","importedType","throwOnError","optionsName","toOperationParamType","getDefaultPrintable","typePath","toOperationReturnType","toOperationComment","params","successResponses","toRequestOptions","onClientImport","responseTransformerName","contents","toObj","prev","curr","errorResponses","serviceFunctionIdentifier","handleIllegal","toOperationStatements","errorType","responseType","processService","onNode","service","clientPlugin","throwOnErrorTypeGeneric","compileFunctionParams","sdkOutput","imported","createTypeOptions","isNuxtClient","tDataShape","clientType","typeOptions","operationOptionsType","getResponseType","contentType","cleanContent","securitySchemeObjectToAuthObject","operationAuth","auth","authObject","operationStatements","isRequiredOptions","requestOptions","identifierTransformer","identifierSchema","heyApiClient","optionsClient","generateClassSdk","sdks","uniqueTags","tag","generateFlatSdk","treeName","emptyModel","generateEnum","leadingComment","generateType","onCreated","processComposition","props","enumDeclarations","processType","processEnum","processScopedEnum","processModel","processServiceTypes","pathsMap","pathMap","methodMap","bodyParameters","bodyParameter","headerParameters","pathParameters","queryParameters","operationProperties","_method","methodParameters","operationName","reqKey","reqResParameters","code","resKey","isVoidResponse","getRefModels","refModel","ensureModelResponseTransformerExists","modelName","generateResponseTransformer","processArray","refModels","nameModelResponseTransformer","processProperty","onRemoveNode","nonVoidResponses","nameCreated","fieldName","stringType","serverToBaseUrlType","server","createClientOptions","typeClientOptions","scopeToRef","accessScope","refParts","nameBuilder","processedName","processNameBuilder","shouldSkipSchema","addJavaScriptEnum","enumObject","schemaToEnumObject","typeofItems","typeOfItemConst","addTypeEnum","schemaToType","addTypeScriptEnum","arrayTypeToIdentifier","booleanTypeToIdentifier","enumTypeToIdentifier","isRefComponent","shouldExportEnum","objectNode","enumNode","numberTypeToIdentifier","objectTypeToIdentifier","indexPropertyItems","hasOptionalProperties","hasSkippedProperties","stringTypeToIdentifier","tupleTypeToIdentifier","schemaTypeToIdentifier","irParametersToIrSchema","operationToDataType","data","dataRequired","operationToType","identifierErrors","errorsType","keyofType","identifierResponses","responsesType","isSchemaSplit","scopes","hasSchemaScope","finalRef","useTypeData","useTypeError","typeError","axiosError","useTypeResponse","createQueryKeyFn","queryKeyName","TOptionsType","infiniteIdentifier","optionsIdentifier","createQueryKeyFunction","identifierCreateQueryKey","fn","createQueryKeyLiteral","isInfinite","createQueryKeyType","queryKeyType","queryKeyFunctionIdentifier","queryKeyStatement","typeQueryKey","typeData","identifierQueryKey","createInfiniteParamsFn","infiniteQueryOptionsFn","createInfiniteParamsFunction","infiniteQueryOptionsFunctionIdentifier","createInfiniteQueryOptions","queryFn","typeResponse","typePageObjectParam","typePageParam","infiniteQueryKeyName","mutationOptionsFn","mutationOptionsFunctionIdentifier","createMutationOptions","mutationsType","mutationType","queryOptionsFn","queryOptionsFunctionIdentifier","createQueryOptions","toInfiniteQueryOptionsName","toMutationOptionsName","toQueryOptionsName","toQueryKeyName","getPaginationIn","createTypeData","typesModulePath","nameTypeData","createTypeError","pluginName","nameTypeError","createTypeResponse","nameTypeResponse","typeInfiniteData","hasCreateInfiniteParamsFunction","hasCreateQueryKeyParamsFunction","hasInfiniteQueries","hasMutations","hasQueries","processedOperations","hasUsedQueryFn","paginationParameter","fastifyId","operationToRouteHandler","fileTypes","errorsTypeReference","responsesTypeReference","replyTypes","routeHandlers","routeHandler","defaultPluginConfigs","defaultPlugins","getInput","input","getPluginsConfig","pluginConfigs","userPlugins","userPluginsConfig","circularReferenceTracker","pluginOrder","plugins","dfs","defaultOptions","userOptions","nativePluginOption","dependency","errorMessage","userPlugin","getOutput","isPluginClient","getPlugins","definedPlugins","getWatch","initConfigs","configurationFile","configFromFile","loadConfig","configFile","dryRun","experimentalParser","exportCore","useOptions"],"mappings":"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","file":"internal.cjs","sourcesContent":["// copy-pasted from @hey-api/client-fetch\nexport const mergeHeaders = (\n  ...headers: Array<RequestInit['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n","import {\n  $RefParser,\n  getResolvedInput,\n  type JSONSchema,\n  sendRequest,\n} from '@hey-api/json-schema-ref-parser';\n\nimport { mergeHeaders } from './mergeHeaders';\nimport type { Config } from './types/config';\nimport type { WatchValues } from './types/types';\n\ninterface SpecResponse {\n  data: JSONSchema;\n  error?: undefined;\n  response?: undefined;\n}\n\ninterface SpecError {\n  data?: undefined;\n  error: 'not-modified' | 'not-ok';\n  response: Response;\n}\n\n/**\n * @internal\n */\nexport const getSpec = async ({\n  fetchOptions,\n  inputPath,\n  timeout,\n  watch,\n}: {\n  fetchOptions?: RequestInit;\n  inputPath: Config['input']['path'];\n  timeout: number;\n  watch: WatchValues;\n}): Promise<SpecResponse | SpecError> => {\n  const refParser = new $RefParser();\n  const resolvedInput = getResolvedInput({ pathOrUrlOrSchema: inputPath });\n\n  let arrayBuffer: ArrayBuffer | undefined;\n  // boolean signals whether the file has **definitely** changed\n  let hasChanged: boolean | undefined;\n  let response: Response | undefined;\n\n  if (resolvedInput.type === 'url') {\n    // do NOT send HEAD request on first run or if unsupported\n    if (watch.lastValue && watch.isHeadMethodSupported !== false) {\n      try {\n        const request = await sendRequest({\n          fetchOptions: {\n            method: 'HEAD',\n            ...fetchOptions,\n            headers: mergeHeaders(fetchOptions?.headers, watch.headers),\n          },\n          timeout,\n          url: resolvedInput.path,\n        });\n\n        if (request.response.status >= 300) {\n          return {\n            error: 'not-ok',\n            response: request.response,\n          };\n        }\n\n        response = request.response;\n      } catch (error) {\n        return {\n          error: 'not-ok',\n          response: new Response(error.message),\n        };\n      }\n\n      if (!response.ok && watch.isHeadMethodSupported) {\n        // assume the server is no longer running\n        // do nothing, it might be restarted later\n        return {\n          error: 'not-ok',\n          response,\n        };\n      }\n\n      if (watch.isHeadMethodSupported === undefined) {\n        watch.isHeadMethodSupported = response.ok;\n      }\n\n      if (response.status === 304) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n\n      if (hasChanged === undefined) {\n        const eTag = response.headers.get('ETag');\n        if (eTag) {\n          hasChanged = eTag !== watch.headers.get('If-None-Match');\n\n          if (hasChanged) {\n            watch.headers.set('If-None-Match', eTag);\n          }\n        }\n      }\n\n      if (hasChanged === undefined) {\n        const lastModified = response.headers.get('Last-Modified');\n        if (lastModified) {\n          hasChanged = lastModified !== watch.headers.get('If-Modified-Since');\n\n          if (hasChanged) {\n            watch.headers.set('If-Modified-Since', lastModified);\n          }\n        }\n      }\n\n      // we definitely know the input has not changed\n      if (hasChanged === false) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n    }\n\n    try {\n      const request = await sendRequest({\n        fetchOptions: {\n          method: 'GET',\n          ...fetchOptions,\n        },\n        timeout,\n        url: resolvedInput.path,\n      });\n\n      if (request.response.status >= 300) {\n        return {\n          error: 'not-ok',\n          response: request.response,\n        };\n      }\n\n      response = request.response;\n    } catch (error) {\n      return {\n        error: 'not-ok',\n        response: new Response(error.message),\n      };\n    }\n\n    if (!response.ok) {\n      // assume the server is no longer running\n      // do nothing, it might be restarted later\n      return {\n        error: 'not-ok',\n        response,\n      };\n    }\n\n    arrayBuffer = response.body\n      ? await response.arrayBuffer()\n      : new ArrayBuffer(0);\n\n    if (hasChanged === undefined) {\n      const content = new TextDecoder().decode(arrayBuffer);\n      hasChanged = content !== watch.lastValue;\n      watch.lastValue = content;\n    }\n  } else {\n    // we do not support watch mode for files or raw spec data\n    if (!watch.lastValue) {\n      watch.lastValue = resolvedInput.type;\n    } else {\n      hasChanged = false;\n    }\n  }\n\n  if (hasChanged === false) {\n    return {\n      error: 'not-modified',\n      response: response!,\n    };\n  }\n\n  const data = await refParser.bundle({\n    arrayBuffer,\n    pathOrUrlOrSchema: undefined,\n    resolvedInput,\n  });\n\n  return {\n    data,\n  };\n};\n","import type { Config, UserConfig } from './types/config';\n\nexport const getLogs = (userConfig: UserConfig | undefined): Config['logs'] => {\n  let logs: Config['logs'] = {\n    file: true,\n    level: 'info',\n    path: process.cwd(),\n  };\n  if (typeof userConfig?.logs === 'string') {\n    logs.path = userConfig.logs;\n  } else {\n    logs = {\n      ...logs,\n      ...userConfig?.logs,\n    };\n  }\n  return logs;\n};\n","export const clientDefaultConfig = {\n  _dependencies: ['@hey-api/typescript'],\n  _tags: ['client'],\n  baseUrl: true,\n  bundle: false,\n  exportFromIndex: false,\n  output: 'client',\n} as const;\n","import type { Config } from '../../../types/config';\nimport type { PluginClientNames } from '../../types';\n\nexport const clientId = 'client';\n\ntype Plugins = Required<Config>['plugins'];\n\nexport const getClientBaseUrlKey = (config: Config) => {\n  const client = getClientPlugin(config);\n  if (\n    client.name === '@hey-api/client-axios' ||\n    client.name === '@hey-api/client-nuxt'\n  ) {\n    return 'baseURL';\n  }\n  return 'baseUrl';\n};\n\nexport const getClientPlugin = (\n  config: Config,\n): Required<Plugins>[PluginClientNames] => {\n  for (const name of config.pluginOrder) {\n    const plugin = config.plugins[name];\n    if (plugin?._tags?.includes('client')) {\n      return plugin as Required<Plugins>[PluginClientNames];\n    }\n  }\n\n  return {\n    // @ts-expect-error\n    name: '',\n  };\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport {\n  type AccessLevel,\n  createBlock,\n  createTypeNode,\n  type FunctionParameter,\n  type FunctionTypeParameter,\n  toAccessLevelModifiers,\n  toExpression,\n  toParameterDeclarations,\n  toTypeParameters,\n} from './types';\nimport type { Comments } from './utils';\nimport { addLeadingComments, createIdentifier, isType } from './utils';\n\n/**\n * Create a class constructor declaration.\n * @param accessLevel - the access level of the constructor.\n * @param comment - comment to add to function.\n * @param multiLine - if it should be multi line.\n * @param parameters - parameters for the constructor.\n * @param statements - statements to put in the constructor body.\n * @returns ts.ConstructorDeclaration\n */\nexport const createConstructorDeclaration = ({\n  accessLevel,\n  comment,\n  multiLine = true,\n  parameters = [],\n  statements = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  statements?: ts.Statement[];\n}) => {\n  const node = ts.factory.createConstructorDeclaration(\n    toAccessLevelModifiers(accessLevel),\n    toParameterDeclarations(parameters),\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create a class method declaration.\n * @param accessLevel - the access level of the method.\n * @param comment - comment to add to function.\n * @param isStatic - if the function is static.\n * @param multiLine - if it should be multi line.\n * @param name - name of the method.\n * @param parameters - parameters for the method.\n * @param returnType - the return type of the method.\n * @param statements - statements to put in the constructor body.\n * @returns ts.MethodDeclaration\n */\nexport const createMethodDeclaration = ({\n  accessLevel,\n  comment,\n  isStatic = false,\n  multiLine = true,\n  name,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  isStatic?: boolean;\n  multiLine?: boolean;\n  name: string;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  let modifiers = toAccessLevelModifiers(accessLevel);\n\n  if (isStatic) {\n    modifiers = [\n      ...modifiers,\n      ts.factory.createModifier(ts.SyntaxKind.StaticKeyword),\n    ];\n  }\n\n  const node = ts.factory.createMethodDeclaration(\n    modifiers,\n    undefined,\n    createIdentifier({ text: name }),\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\ntype ClassDecorator = {\n  args: any[];\n  name: string;\n};\n\n/**\n * Create a class declaration.\n * @param decorator - the class decorator\n * @param members - elements in the class.\n * @param name - name of the class.\n * @returns ts.ClassDeclaration\n */\nexport const createClassDeclaration = ({\n  decorator,\n  members = [],\n  name,\n}: {\n  decorator?: ClassDecorator;\n  members?: ts.ClassElement[];\n  name: string;\n}) => {\n  let modifiers: ts.ModifierLike[] = [\n    ts.factory.createModifier(ts.SyntaxKind.ExportKeyword),\n  ];\n\n  if (decorator) {\n    modifiers = [\n      ts.factory.createDecorator(\n        createCallExpression({\n          functionName: decorator.name,\n          parameters: decorator.args\n            .map((arg) => toExpression({ value: arg }))\n            .filter(isType<ts.Expression>),\n        }),\n      ),\n      ...modifiers,\n    ];\n  }\n\n  // Add newline between each class member.\n  let m: ts.ClassElement[] = [];\n  members.forEach((member) => {\n    // @ts-expect-error\n    m = [...m, member, createIdentifier({ text: '\\n' })];\n  });\n\n  return ts.factory.createClassDeclaration(\n    modifiers,\n    createIdentifier({ text: name }),\n    [],\n    [],\n    m,\n  );\n};\n","/**\n * Matches characters from the start as long as they're not allowed.\n */\nexport const illegalStartCharactersRegExp = /^[^$_\\p{ID_Start}]+/u;\n\n/**\n * Matches string if it contains only digits and optionally decimal point or\n * leading minus sign.\n */\nexport const numberRegExp = /^-?\\d+(\\.\\d+)?$/;\n\nexport const reservedBrowserGlobalsRegExp =\n  /^(document|history|location|navigator|window)$/g;\n\nexport const reservedJavaScriptGlobalsRegExp =\n  /^(console|Array|Date|Error|Function|JSON|Map|Math|Object|Promise|RegExp|Set|WeakMap|WeakSet)$/g;\n\nexport const reservedJavaScriptKeywordsRegExp =\n  /^(arguments|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|from|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/g;\n\nexport const reservedNodeGlobalsRegExp = /^(global|process|Buffer)$/g;\n\nexport const reservedTypeScriptKeywordsRegExp =\n  /^(any|as|bigint|boolean|namespace|never|null|number|string|symbol|type|undefined|unknown|void)$/g;\n\n/**\n * Javascript identifier regexp pattern retrieved from\n * {@link} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const validTypescriptIdentifierRegExp =\n  /^[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*$/u;\n","import { EOL } from 'os';\n\nimport { validTypescriptIdentifierRegExp } from './regexp';\n\nexport const escapeName = (value: string): string => {\n  if (value || value === '') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    const validName = validTypescriptIdentifierRegExp.test(value);\n    if (!validName) {\n      return `'${value}'`;\n    }\n  }\n  return value;\n};\n\nexport const unescapeName = (value: string): string => {\n  if (value && value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, value.length - 1);\n  }\n  return value;\n};\n\nexport const escapeComment = (value: string) =>\n  value\n    .replace(/\\*\\//g, '*')\n    .replace(/\\/\\*/g, '*')\n    .replace(/\\r?\\n(.*)/g, (_l, w) => EOL + w.trim());\n","import ts from 'typescript';\n\nimport { getConfig } from '../utils/config';\nimport { unescapeName } from '../utils/escape';\nimport { createStringLiteral } from './types';\n\nexport interface ImportExportItemObject {\n  alias?: string;\n  asType?: boolean;\n  name: string;\n}\n\nconst printer = ts.createPrinter({\n  newLine: ts.NewLineKind.LineFeed,\n  removeComments: false,\n});\n\nexport const createSourceFile = (sourceText: string) =>\n  ts.createSourceFile(\n    '',\n    sourceText,\n    ts.ScriptTarget.ESNext,\n    false,\n    ts.ScriptKind.TS,\n  );\n\nconst blankSourceFile = createSourceFile('');\n\nconst unescapeUnicode = (value: string) =>\n  value.replace(/\\\\u([0-9a-fA-F]{4})/g, (_, hex: string) =>\n    String.fromCharCode(Number.parseInt(hex, 16)),\n  );\n\n/**\n * Print a TypeScript node to a string.\n * @param node the node to print\n * @returns string\n */\nexport function tsNodeToString({\n  node,\n  unescape = false,\n}: {\n  node: ts.Node;\n  unescape?: boolean;\n}): string {\n  const result = printer.printNode(\n    ts.EmitHint.Unspecified,\n    node,\n    blankSourceFile,\n  );\n\n  if (!unescape) {\n    return result;\n  }\n\n  try {\n    /**\n     * TypeScript Compiler API escapes unicode characters by default and there\n     * is no way to disable this behavior\n     * {@link https://github.com/microsoft/TypeScript/issues/36174}\n     */\n    return unescapeUnicode(result);\n  } catch {\n    if (getConfig().logs.level === 'debug') {\n      console.warn('Could not decode value:', result);\n    }\n    return result;\n  }\n}\n\n/**\n * Convert a string to a TypeScript Node\n * @param value the string to convert.\n * @returns ts.Node\n */\nexport function stringToTsNodes(value: string): ts.Node {\n  const file = createSourceFile(value);\n  return file.statements[0]!;\n}\n\nexport const createIdentifier = ({ text }: { text: string }) => {\n  const identifier = ts.factory.createIdentifier(text);\n  return identifier;\n};\n\n/**\n * ots for @hey-api/openapi-ts are helpers to reduce repetition of basic TypeScript\n * factory functions.\n */\nexport const ots = {\n  /**\n   * Create a boolean expression based on value.\n   */\n  boolean: (value: boolean) =>\n    value ? ts.factory.createTrue() : ts.factory.createFalse(),\n  export: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createExportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createExportSpecifier(asType, undefined, nameNode);\n  },\n  import: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createImportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createImportSpecifier(asType, undefined, nameNode);\n  },\n  /**\n   * Create a numeric expression, handling negative numbers.\n   */\n  number: (value: number) => {\n    if (value < 0) {\n      return ts.factory.createPrefixUnaryExpression(\n        ts.SyntaxKind.MinusToken,\n        ts.factory.createNumericLiteral(Math.abs(value)),\n      );\n    }\n    return ts.factory.createNumericLiteral(value);\n  },\n  /**\n   * Create a string literal. This handles strings that start with '`' or \"'\".\n   */\n  string: (value: string, unescape = false) => {\n    let text = value;\n    if (unescape) {\n      text = unescapeName(text);\n    }\n    const hasBothQuotes = text.includes(\"'\") && text.includes('\"');\n    const hasNewlines = text.includes('\\n');\n    const hasUnescapedBackticks = text.startsWith('`');\n    const isBacktickEscaped = text.startsWith('\\\\`') && text.endsWith('\\\\`');\n    if (\n      (hasNewlines || hasBothQuotes || hasUnescapedBackticks) &&\n      !isBacktickEscaped\n    ) {\n      text = `\\`${text.replace(/(?<!\\\\)`/g, '\\\\`').replace(/\\${/g, '\\\\${')}\\``;\n    }\n    if (text.startsWith('`')) {\n      return createIdentifier({ text });\n    }\n    return createStringLiteral({ text });\n  },\n};\n\nexport const isTsNode = (node: any): node is ts.Expression =>\n  node !== null &&\n  typeof node === 'object' &&\n  typeof node.kind === 'number' &&\n  typeof node.flags === 'number' &&\n  typeof node.pos === 'number' &&\n  typeof node.end === 'number';\n\nexport const isType = <T>(value: T | undefined): value is T =>\n  value !== undefined;\n\ntype CommentLines = Array<string | null | false | undefined>;\ntype CommentObject = {\n  jsdoc?: boolean;\n  lines: CommentLines;\n};\nexport type Comments = CommentLines | Array<CommentObject>;\n\nconst processCommentObject = ({\n  commentObject,\n  node,\n}: {\n  commentObject: CommentObject;\n  node: ts.Node;\n}) => {\n  const lines = commentObject.lines.filter(\n    (line) => Boolean(line) || line === '',\n  ) as string[];\n  if (!lines.length) {\n    return;\n  }\n\n  if (!commentObject.jsdoc) {\n    for (const line of lines) {\n      ts.addSyntheticLeadingComment(\n        node,\n        ts.SyntaxKind.SingleLineCommentTrivia,\n        ` ${line}`,\n        true,\n      );\n    }\n    return;\n  }\n\n  const jsdocTexts = lines.map((line, index) => {\n    let text = line;\n    if (index !== lines.length) {\n      text = `${text}\\n`;\n    }\n    const jsdocText = ts.factory.createJSDocText(text);\n    return jsdocText;\n  });\n\n  const jsdoc = ts.factory.createJSDocComment(\n    ts.factory.createNodeArray(jsdocTexts),\n    undefined,\n  );\n\n  const cleanedJsdoc = tsNodeToString({ node: jsdoc, unescape: true })\n    .replace('/*', '')\n    .replace('*  */', '');\n\n  ts.addSyntheticLeadingComment(\n    node,\n    ts.SyntaxKind.MultiLineCommentTrivia,\n    cleanedJsdoc,\n    true,\n  );\n};\n\nexport const addLeadingComments = ({\n  comments = [],\n  node,\n}: {\n  comments?: Comments;\n  node: ts.Node;\n}) => {\n  const isObjectStyle = Boolean(\n    comments.find((comment) => typeof comment === 'object' && comment),\n  );\n\n  let commentObjects = comments as Array<CommentObject>;\n  if (!isObjectStyle) {\n    commentObjects = [\n      {\n        jsdoc: true,\n        lines: comments as CommentLines,\n      },\n    ];\n  }\n\n  for (const commentObject of commentObjects) {\n    processCommentObject({\n      commentObject,\n      node,\n    });\n  }\n};\n","import { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { Config } from '../types/config';\n\nlet _config: Config;\n\nexport const getConfig = () => {\n  const config = _config;\n  const plugin = getClientPlugin(config);\n  // patch legacy config to avoid breaking handlebars\n  // @ts-expect-error\n  config.client = plugin;\n  return config;\n};\n\nexport const setConfig = (config: Config) => {\n  _config = config;\n  return getConfig();\n};\n\nexport const isLegacyClient = (config: Config) => {\n  const plugin = getClientPlugin(config);\n  return plugin.name.startsWith('legacy/');\n};\n\n/**\n * Wrap legacy `name` option so we don't use it when not using legacy clients.\n */\nexport const legacyNameFromConfig = (config: Config) => {\n  if (!isLegacyClient(config)) {\n    return;\n  }\n\n  return config.name;\n};\n","import ts from 'typescript';\n\nimport { escapeName } from '../utils/escape';\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  isTsNode,\n  isType,\n  ots,\n} from './utils';\n\nexport type AccessLevel = 'public' | 'protected' | 'private';\n\nexport type FunctionParameter =\n  | {\n      accessLevel?: AccessLevel;\n      default?: any;\n      isReadOnly?: boolean;\n      isRequired?: boolean;\n      name: string;\n      type?: any | ts.TypeNode;\n    }\n  | {\n      destructure: ReadonlyArray<FunctionParameter>;\n    };\n\nexport interface FunctionTypeParameter {\n  default?: any;\n  extends?: string | ts.TypeNode;\n  name: string | ts.Identifier;\n}\n\nexport const createTypeNode = (\n  base: any | ts.TypeNode,\n  args?: (any | ts.TypeNode)[],\n): ts.TypeNode => {\n  if (ts.isTypeNode(base)) {\n    return base;\n  }\n\n  if (typeof base === 'number') {\n    return ts.factory.createLiteralTypeNode(ots.number(base));\n  }\n\n  return createTypeReferenceNode({\n    typeArguments: args?.map((arg) => createTypeNode(arg)),\n    typeName: base,\n  });\n};\n\nexport const createPropertyAccessChain = ({\n  expression,\n  name,\n}: {\n  expression: ts.Expression;\n  name: string | ts.MemberName;\n}) => {\n  const node = ts.factory.createPropertyAccessChain(\n    expression,\n    ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n    name,\n  );\n  return node;\n};\n\nexport const createPropertyAccessExpression = ({\n  expression,\n  isOptional,\n  name,\n}: {\n  expression: string | ts.Expression;\n  isOptional?: boolean;\n  name: string | ts.MemberName;\n}):\n  | ts.PropertyAccessChain\n  | ts.PropertyAccessExpression\n  | ts.ElementAccessExpression => {\n  const nodeExpression =\n    typeof expression === 'string'\n      ? createIdentifier({ text: expression })\n      : expression;\n\n  if (isOptional) {\n    return createPropertyAccessChain({\n      expression: nodeExpression,\n      name,\n    });\n  }\n\n  if (typeof name === 'string') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    if (!validTypescriptIdentifierRegExp.test(name)) {\n      // TODO: parser - this should escape name only for new parser\n      if (!name.startsWith(\"'\") && !name.endsWith(\"'\")) {\n        // eslint-disable-next-line no-useless-escape\n        name = `\\'${name}\\'`;\n      }\n      const nodeName = createIdentifier({ text: name });\n      return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n    }\n  }\n\n  const nodeName =\n    typeof name === 'string' ? createIdentifier({ text: name }) : name;\n\n  return ts.factory.createPropertyAccessExpression(nodeExpression, nodeName);\n};\n\nexport const createNull = (): ts.NullLiteral => ts.factory.createNull();\n\n/**\n * Convert an unknown value to an expression.\n * @param identifiers - list of keys that are treated as identifiers.\n * @param shorthand - if shorthand syntax is allowed.\n * @param unescape - if string should be unescaped.\n * @param value - the unknown value.\n * @returns ts.Expression\n */\nexport const toExpression = <T = unknown>({\n  identifiers = [],\n  isValueAccess,\n  shorthand,\n  unescape,\n  value,\n}: {\n  identifiers?: string[];\n  isValueAccess?: boolean;\n  shorthand?: boolean;\n  unescape?: boolean;\n  value: T;\n}): ts.Expression | undefined => {\n  if (value === null) {\n    return createNull();\n  }\n\n  if (Array.isArray(value)) {\n    return createArrayLiteralExpression({ elements: value });\n  }\n\n  if (typeof value === 'object') {\n    return createObjectType({\n      identifiers,\n      obj: value,\n      shorthand,\n    });\n  }\n\n  if (typeof value === 'number') {\n    return ots.number(value);\n  }\n\n  if (typeof value === 'boolean') {\n    return ots.boolean(value);\n  }\n\n  if (typeof value === 'string') {\n    if (isValueAccess) {\n      // TODO; handle more than single nested level, i.e. foo.bar.baz\n      const parts = value.split('.');\n      return createPropertyAccessExpression({\n        expression: parts[0]!,\n        name: parts[1]!,\n      });\n    }\n    return ots.string(value, unescape);\n  }\n};\n\n/**\n * Convert AccessLevel to proper TypeScript compiler API modifier.\n * @param access - the access level.\n * @returns ts.ModifierLike[]\n */\nexport const toAccessLevelModifiers = (\n  access?: AccessLevel,\n): ts.ModifierLike[] => {\n  const keyword =\n    access === 'public'\n      ? ts.SyntaxKind.PublicKeyword\n      : access === 'protected'\n        ? ts.SyntaxKind.ProtectedKeyword\n        : access === 'private'\n          ? ts.SyntaxKind.PrivateKeyword\n          : undefined;\n  const modifiers: ts.ModifierLike[] = [];\n  if (keyword) {\n    modifiers.push(ts.factory.createModifier(keyword));\n  }\n  return modifiers;\n};\n\n/**\n * Convert parameters to the declaration array expected by compiler API.\n * @param parameters - the parameters to convert to declarations\n * @returns ts.ParameterDeclaration[]\n */\nexport const toParameterDeclarations = (\n  parameters: ReadonlyArray<FunctionParameter>,\n) =>\n  parameters.map((parameter) => {\n    if ('destructure' in parameter) {\n      return createParameterDeclaration({\n        name: ts.factory.createObjectBindingPattern(\n          parameter.destructure\n            .map((param) => {\n              // TODO: add support for nested destructuring, not needed at the moment\n              if ('destructure' in param) {\n                return;\n              }\n\n              const result = ts.factory.createBindingElement(\n                undefined,\n                undefined,\n                createIdentifier({ text: param.name }),\n                undefined,\n              );\n              return result;\n            })\n            .filter(Boolean) as ts.BindingElement[],\n        ),\n      });\n    }\n\n    let modifiers = toAccessLevelModifiers(parameter.accessLevel);\n\n    if (parameter.isReadOnly) {\n      modifiers = [\n        ...modifiers,\n        ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword),\n      ];\n    }\n\n    return createParameterDeclaration({\n      initializer:\n        parameter.default !== undefined\n          ? toExpression({ value: parameter.default })\n          : undefined,\n      modifiers,\n      name: createIdentifier({ text: parameter.name }),\n      required: parameter.isRequired !== false,\n      type:\n        parameter.type !== undefined\n          ? createTypeNode(parameter.type)\n          : undefined,\n    });\n  });\n\nexport const createKeywordTypeNode = ({\n  keyword,\n}: {\n  keyword:\n    | 'any'\n    | 'boolean'\n    | 'never'\n    | 'number'\n    | 'string'\n    | 'undefined'\n    | 'unknown'\n    | 'void';\n}) => {\n  let kind: ts.KeywordTypeSyntaxKind = ts.SyntaxKind.AnyKeyword;\n  switch (keyword) {\n    case 'boolean':\n      kind = ts.SyntaxKind.BooleanKeyword;\n      break;\n    case 'never':\n      kind = ts.SyntaxKind.NeverKeyword;\n      break;\n    case 'number':\n      kind = ts.SyntaxKind.NumberKeyword;\n      break;\n    case 'string':\n      kind = ts.SyntaxKind.StringKeyword;\n      break;\n    case 'undefined':\n      kind = ts.SyntaxKind.UndefinedKeyword;\n      break;\n    case 'unknown':\n      kind = ts.SyntaxKind.UnknownKeyword;\n      break;\n    case 'void':\n      kind = ts.SyntaxKind.VoidKeyword;\n      break;\n  }\n  return ts.factory.createKeywordTypeNode(kind);\n};\n\nexport const toTypeParameters = (\n  types: (FunctionTypeParameter | ts.TypeParameterDeclaration)[],\n) =>\n  types.map((node) => {\n    // @ts-expect-error\n    if (ts.isTypeParameterDeclaration(node)) {\n      return node;\n    }\n\n    return createTypeParameterDeclaration({\n      // TODO: support other extends values\n      constraint: node.extends\n        ? typeof node.extends === 'string'\n          ? createKeywordTypeNode({ keyword: 'boolean' })\n          : node.extends\n        : undefined,\n      // TODO: support other default types\n      defaultType:\n        node.default !== undefined\n          ? isTsNode(node.default)\n            ? (node.default as unknown as ts.TypeNode)\n            : ts.factory.createLiteralTypeNode(\n                node.default\n                  ? ts.factory.createTrue()\n                  : ts.factory.createFalse(),\n              )\n          : undefined,\n      name: node.name,\n    });\n  });\n\nexport const createTypeOperatorNode = ({\n  operator,\n  type,\n}: {\n  operator: 'keyof' | 'readonly' | 'unique';\n  type: ts.TypeNode;\n}) => {\n  const operatorKeyword =\n    operator === 'keyof'\n      ? ts.SyntaxKind.KeyOfKeyword\n      : operator === 'readonly'\n        ? ts.SyntaxKind.ReadonlyKeyword\n        : ts.SyntaxKind.UniqueKeyword;\n  return ts.factory.createTypeOperatorNode(operatorKeyword, type);\n};\n\nexport const createTypeParameterDeclaration = ({\n  constraint,\n  defaultType,\n  modifiers,\n  name,\n}: {\n  constraint?: ts.TypeNode;\n  defaultType?: ts.TypeNode;\n  modifiers?: Array<ts.Modifier>;\n  name: string | ts.Identifier;\n}) =>\n  ts.factory.createTypeParameterDeclaration(\n    modifiers,\n    name,\n    constraint,\n    defaultType,\n  );\n\nexport const createMappedTypeNode = ({\n  members,\n  nameType,\n  questionToken,\n  readonlyToken,\n  type,\n  typeParameter,\n}: {\n  members?: ts.NodeArray<ts.TypeElement>;\n  nameType?: ts.TypeNode;\n  questionToken?: ts.QuestionToken | ts.PlusToken | ts.MinusToken;\n  readonlyToken?: ts.ReadonlyKeyword | ts.PlusToken | ts.MinusToken;\n  type?: ts.TypeNode;\n  typeParameter: ts.TypeParameterDeclaration;\n}) =>\n  ts.factory.createMappedTypeNode(\n    readonlyToken,\n    typeParameter,\n    nameType,\n    questionToken,\n    type,\n    members,\n  );\n\nexport const createLiteralTypeNode = ({\n  literal,\n}: {\n  literal: ts.LiteralTypeNode['literal'];\n}) => {\n  const node = ts.factory.createLiteralTypeNode(literal);\n  return node;\n};\n\n/**\n * Create arrow function type expression.\n */\nexport const createArrowFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[] | ts.Expression;\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createArrowFunction(\n    async ? [ts.factory.createModifier(ts.SyntaxKind.AsyncKeyword)] : undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    undefined,\n    Array.isArray(statements)\n      ? createBlock({ multiLine, statements })\n      : statements,\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create anonymous function type expression.\n */\nexport const createAnonymousFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createFunctionExpression(\n    async ? [ts.factory.createModifier(ts.SyntaxKind.AsyncKeyword)] : undefined,\n    undefined,\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create Array type expression.\n */\nexport const createArrayLiteralExpression = <T>({\n  elements,\n  multiLine = false,\n}: {\n  /**\n   * The array to create.\n   */\n  elements: T[];\n  /**\n   * Should the array be multi line?\n   *\n   * @default false\n   */\n  multiLine?: boolean;\n}): ts.ArrayLiteralExpression => {\n  const expression = ts.factory.createArrayLiteralExpression(\n    elements\n      .map((value) => (isTsNode(value) ? value : toExpression({ value })))\n      .filter(isType<ts.Expression>),\n    // multiline if array contains objects\n    multiLine ||\n      (!Array.isArray(elements[0]) && typeof elements[0] === 'object'),\n  );\n  return expression;\n};\n\nexport const createAwaitExpression = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => ts.factory.createAwaitExpression(expression);\n\nexport const createFunctionTypeNode = ({\n  parameters = [],\n  returnType,\n  typeParameters,\n}: {\n  parameters?: ts.ParameterDeclaration[];\n  returnType: ts.TypeNode;\n  typeParameters?: ts.TypeParameterDeclaration[];\n}) => {\n  const node = ts.factory.createFunctionTypeNode(\n    typeParameters,\n    parameters,\n    returnType,\n  );\n  return node;\n};\n\nexport type ObjectValue =\n  | {\n      assertion?: 'any' | ts.TypeNode;\n      comments?: Comments;\n      spread: string;\n    }\n  | {\n      comments?: Comments;\n      isValueAccess?: boolean;\n      key: string;\n      shorthand?: boolean;\n      value: any;\n    };\n\ntype ObjectAssignment =\n  | ts.PropertyAssignment\n  | ts.ShorthandPropertyAssignment\n  | ts.SpreadAssignment;\n\n/**\n * Create Object type expression.\n * @param comments - comments to add to each property.\n * @param identifier - keys that should be treated as identifiers.\n * @param multiLine - if the object should be multiline.\n * @param obj - the object to create expression with.\n * @param shorthand - if shorthand syntax should be used.\n * @param unescape - if properties strings should be unescaped.\n * @returns ts.ObjectLiteralExpression\n */\nexport const createObjectType = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments,\n  identifiers = [],\n  multiLine = true,\n  obj,\n  shorthand,\n  unescape = false,\n}: {\n  comments?: Comments;\n  identifiers?: string[];\n  multiLine?: boolean;\n  obj: T;\n  shorthand?: boolean;\n  unescape?: boolean;\n}): ts.ObjectLiteralExpression => {\n  const properties = Array.isArray(obj)\n    ? obj\n        .map((value: ObjectValue) => {\n          // Check key value equality before possibly modifying it\n          let canShorthand = false;\n          if ('key' in value) {\n            const { key } = value;\n            canShorthand = key === value.value;\n            const firstDigitAndNonDigits =\n              key.match(/^[0-9]/) && key.match(/\\D+/g);\n            if (\n              (firstDigitAndNonDigits || key.match(/\\W/g) || key === '') &&\n              !key.startsWith(\"'\") &&\n              !key.endsWith(\"'\")\n            ) {\n              value.key = `'${key}'`;\n            }\n          }\n          let assignment: ObjectAssignment;\n          if ('spread' in value) {\n            const nameIdentifier = isTsNode(value.spread)\n              ? value.spread\n              : createIdentifier({ text: value.spread });\n            assignment = ts.factory.createSpreadAssignment(\n              value.assertion\n                ? createAsExpression({\n                    expression: nameIdentifier,\n                    type:\n                      typeof value.assertion === 'string'\n                        ? createKeywordTypeNode({ keyword: value.assertion })\n                        : value.assertion,\n                  })\n                : nameIdentifier,\n            );\n          } else if (value.shorthand || (shorthand && canShorthand)) {\n            assignment = ts.factory.createShorthandPropertyAssignment(\n              value.value,\n            );\n          } else {\n            let initializer: ts.Expression | undefined = isTsNode(value.value)\n              ? value.value\n              : Array.isArray(value.value)\n                ? createObjectType({\n                    multiLine,\n                    obj: value.value,\n                    shorthand,\n                    unescape,\n                  })\n                : toExpression({\n                    identifiers: identifiers.includes(value.key)\n                      ? Object.keys(value.value)\n                      : [],\n                    isValueAccess: value.isValueAccess,\n                    shorthand,\n                    unescape,\n                    value: value.value,\n                  });\n            if (!initializer) {\n              return undefined;\n            }\n            // Create a identifier if the current key is one and it is not an object\n            if (\n              identifiers.includes(value.key) &&\n              !ts.isObjectLiteralExpression(initializer)\n            ) {\n              initializer = createIdentifier({ text: value.value as string });\n            }\n            assignment = createPropertyAssignment({\n              initializer,\n              name: value.key,\n            });\n          }\n\n          addLeadingComments({\n            comments: value.comments,\n            node: assignment,\n          });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>)\n    : Object.entries(obj)\n        .map(([key, value]) => {\n          // Pass all object properties as identifiers if the whole object is an identifier\n          let initializer: ts.Expression | undefined = toExpression({\n            identifiers: identifiers.includes(key) ? Object.keys(value) : [],\n            shorthand,\n            unescape,\n            value,\n          });\n          if (!initializer) {\n            return undefined;\n          }\n          // Create a identifier if the current key is one and it is not an object\n          if (\n            identifiers.includes(key) &&\n            !ts.isObjectLiteralExpression(initializer)\n          ) {\n            initializer = createIdentifier({ text: value as string });\n          }\n          // Check key value equality before possibly modifying it\n          const canShorthand = key === value;\n          if (\n            key.match(/^[0-9]/) &&\n            key.match(/\\D+/g) &&\n            !key.startsWith(\"'\") &&\n            !key.endsWith(\"'\")\n          ) {\n            key = `'${key}'`;\n          }\n          if (key.match(/\\W/g) && !key.startsWith(\"'\") && !key.endsWith(\"'\")) {\n            key = `'${key}'`;\n          }\n          const assignment =\n            shorthand && canShorthand\n              ? ts.factory.createShorthandPropertyAssignment(value)\n              : createPropertyAssignment({ initializer, name: key });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>);\n\n  const node = ts.factory.createObjectLiteralExpression(\n    properties as any[],\n    multiLine,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create enum declaration. Example `export enum T = { X, Y };`\n * @param comments - comments to add to each property.\n * @param leadingComment - leading comment to add to enum.\n * @param name - the name of the enum.\n * @param obj - the object representing the enum.\n * @returns ts.EnumDeclaration\n */\nexport const createEnumDeclaration = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments: enumMemberComments = {},\n  leadingComment: comments,\n  name,\n  obj,\n}: {\n  comments?: Record<string | number, Comments>;\n  leadingComment?: Comments;\n  name: string;\n  obj: T;\n}): ts.EnumDeclaration => {\n  const members: Array<ts.EnumMember> = Array.isArray(obj)\n    ? obj.map((value) => {\n        const enumMember = createEnumMember({\n          initializer: toExpression({\n            value: value.value,\n          }),\n          name: value.key,\n        });\n\n        addLeadingComments({\n          comments: value.comments,\n          node: enumMember,\n        });\n\n        return enumMember;\n      })\n    : // TODO: parser - deprecate object syntax\n      Object.entries(obj).map(([key, value]) => {\n        const enumMember = ts.factory.createEnumMember(\n          key,\n          toExpression({\n            unescape: true,\n            value,\n          }),\n        );\n\n        addLeadingComments({\n          comments: enumMemberComments[key],\n          node: enumMember,\n        });\n\n        return enumMember;\n      });\n\n  const node = ts.factory.createEnumDeclaration(\n    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],\n    createIdentifier({ text: name }),\n    members,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\nconst createEnumMember = ({\n  initializer,\n  name,\n}: {\n  initializer?: ts.Expression;\n  name: string | ts.PropertyName;\n}) => {\n  let key = name;\n  if (typeof key === 'string') {\n    if (key.startsWith(\"'\") && key.endsWith(\"'\")) {\n      key = createStringLiteral({\n        isSingleQuote: false,\n        text: key,\n      });\n    } else {\n      key = escapeName(key);\n    }\n  }\n  return ts.factory.createEnumMember(key, initializer);\n};\n\n/**\n * Create namespace declaration. Example `export namespace MyNamespace { ... }`\n * @param name - the name of the namespace.\n * @param nodes - the nodes in the namespace.\n * @returns\n */\nexport const createNamespaceDeclaration = ({\n  name,\n  statements,\n}: {\n  name: string;\n  statements: Array<ts.Statement>;\n}) =>\n  ts.factory.createModuleDeclaration(\n    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],\n    createIdentifier({ text: name }),\n    ts.factory.createModuleBlock(statements),\n    ts.NodeFlags.Namespace,\n  );\n\nexport const createIndexedAccessTypeNode = ({\n  indexType,\n  objectType,\n}: {\n  indexType: ts.TypeNode;\n  objectType: ts.TypeNode;\n}) => {\n  const node = ts.factory.createIndexedAccessTypeNode(objectType, indexType);\n  return node;\n};\n\nexport const createStringLiteral = ({\n  isSingleQuote,\n  text,\n}: {\n  isSingleQuote?: boolean;\n  text: string;\n}) => {\n  if (isSingleQuote === undefined) {\n    isSingleQuote = !text.includes(\"'\");\n  }\n  const node = ts.factory.createStringLiteral(text, isSingleQuote);\n  return node;\n};\n\nexport const createConditionalExpression = ({\n  condition,\n  whenFalse,\n  whenTrue,\n}: {\n  condition: ts.Expression;\n  whenFalse: ts.Expression;\n  whenTrue: ts.Expression;\n}) => {\n  const expression = ts.factory.createConditionalExpression(\n    condition,\n    ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    whenTrue,\n    ts.factory.createToken(ts.SyntaxKind.ColonToken),\n    whenFalse,\n  );\n  return expression;\n};\n\nexport const createTypeOfExpression = ({ text }: { text: string }) => {\n  const expression = ts.factory.createTypeOfExpression(\n    createIdentifier({ text }),\n  );\n  return expression;\n};\n\n/**\n * Create a type alias declaration. Example `export type X = Y;`.\n * @param comment (optional) comments to add\n * @param name the name of the type\n * @param type the type\n * @returns ts.TypeAliasDeclaration\n */\nexport const createTypeAliasDeclaration = ({\n  comment,\n  exportType,\n  name,\n  type,\n  typeParameters = [],\n}: {\n  comment?: Comments;\n  exportType?: boolean;\n  name: string;\n  type: string | ts.TypeNode;\n  typeParameters?: FunctionTypeParameter[];\n}): ts.TypeAliasDeclaration => {\n  const node = ts.factory.createTypeAliasDeclaration(\n    exportType\n      ? [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)]\n      : undefined,\n    createIdentifier({ text: name }),\n    toTypeParameters(typeParameters),\n    createTypeNode(type),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\nexport const createTypeReferenceNode = ({\n  typeArguments,\n  typeName,\n}: {\n  typeArguments?: ts.TypeNode[];\n  typeName: string | ts.EntityName;\n}) => {\n  const node = ts.factory.createTypeReferenceNode(typeName, typeArguments);\n  return node;\n};\n\nexport const createTypeParenthesizedNode = ({\n  type,\n}: {\n  type: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParenthesizedType(type);\n  return node;\n};\n\nexport const createParameterDeclaration = ({\n  initializer,\n  modifiers,\n  name,\n  required = true,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifiers?: ts.ModifierLike[];\n  name: string | ts.BindingName;\n  required?: boolean;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParameterDeclaration(\n    modifiers,\n    undefined,\n    name,\n    required ? undefined : ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    type,\n    initializer,\n  );\n  return node;\n};\n\nexport const createNewExpression = ({\n  argumentsArray,\n  expression,\n  typeArguments,\n}: {\n  argumentsArray?: Array<ts.Expression>;\n  expression: ts.Expression;\n  typeArguments?: Array<ts.TypeNode>;\n}) => {\n  const node = ts.factory.createNewExpression(\n    expression,\n    typeArguments,\n    argumentsArray,\n  );\n  return node;\n};\n\nexport const createForOfStatement = ({\n  awaitModifier,\n  expression,\n  initializer,\n  statement,\n}: {\n  // TODO: parser - simplify this to be await?: boolean\n  awaitModifier?: ts.AwaitKeyword;\n  expression: ts.Expression;\n  initializer: ts.ForInitializer;\n  statement: ts.Statement;\n}) => {\n  const node = ts.factory.createForOfStatement(\n    awaitModifier,\n    initializer,\n    expression,\n    statement,\n  );\n  return node;\n};\n\nexport const createAssignment = ({\n  left,\n  right,\n}: {\n  left: ts.Expression;\n  right: ts.Expression;\n}) => ts.factory.createAssignment(left, right);\n\nexport const createBlock = ({\n  multiLine = true,\n  statements,\n}: {\n  multiLine?: boolean;\n  statements: Array<ts.Statement>;\n}) => ts.factory.createBlock(statements, multiLine);\n\nexport const createPropertyAssignment = ({\n  initializer,\n  name,\n}: {\n  initializer: ts.Expression;\n  name: string | ts.PropertyName;\n}) => ts.factory.createPropertyAssignment(name, initializer);\n\nexport const createRegularExpressionLiteral = ({\n  flags = [],\n  text,\n}: {\n  flags?: ReadonlyArray<'g' | 'i' | 'm' | 's' | 'u' | 'y'>;\n  text: string;\n}) => ts.factory.createRegularExpressionLiteral(`/${text}/${flags.join('')}`);\n\nexport const createAsExpression = ({\n  expression,\n  type,\n}: {\n  expression: ts.Expression;\n  type: ts.TypeNode;\n}) => ts.factory.createAsExpression(expression, type);\n\nexport const createTemplateLiteralType = ({\n  value,\n}: {\n  value: ReadonlyArray<string | ts.TypeNode>;\n}) => {\n  const spans: Array<ts.TemplateLiteralTypeSpan> = [];\n  let spanText = '';\n\n  for (const item of value.slice(0).reverse()) {\n    if (typeof item === 'string') {\n      spanText = `${item}${spanText}`;\n    } else {\n      const literal = spans.length\n        ? ts.factory.createTemplateMiddle(spanText)\n        : ts.factory.createTemplateTail(spanText);\n      const span = ts.factory.createTemplateLiteralTypeSpan(item, literal);\n      spans.push(span);\n      spanText = '';\n    }\n  }\n\n  const templateLiteralType = ts.factory.createTemplateLiteralType(\n    ts.factory.createTemplateHead(spanText),\n    spans.reverse(),\n  );\n  return templateLiteralType;\n};\n","import ts from 'typescript';\n\nimport { createAsExpression, createTypeReferenceNode } from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  type ImportExportItemObject,\n  ots,\n} from './utils';\n\n/**\n * Create export all declaration. Example: `export * from './y'`.\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createExportAllDeclaration = ({\n  module,\n}: {\n  module: string;\n}): ts.ExportDeclaration => {\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    false,\n    undefined,\n    ots.string(module),\n  );\n  return statement;\n};\n\nexport type ImportExportItem = ImportExportItemObject | string;\n\nexport const createCallExpression = ({\n  functionName,\n  parameters = [],\n  types,\n}: {\n  functionName:\n    | string\n    | ts.PropertyAccessExpression\n    | ts.PropertyAccessChain\n    | ts.ElementAccessExpression\n    | ts.Expression;\n  parameters?: Array<string | ts.Expression | undefined>;\n  types?: ReadonlyArray<ts.TypeNode>;\n}) => {\n  const expression =\n    typeof functionName === 'string'\n      ? createIdentifier({ text: functionName })\n      : functionName;\n  const argumentsArray = parameters\n    .filter((parameter) => parameter !== undefined)\n    .map((parameter) =>\n      typeof parameter === 'string'\n        ? createIdentifier({ text: parameter })\n        : parameter,\n    );\n  const callExpression = ts.factory.createCallExpression(\n    expression,\n    types,\n    argumentsArray,\n  );\n  return callExpression;\n};\n\n/**\n * Create a named export declaration. Example: `export { X } from './y'`.\n * @param exports - named imports to export\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createNamedExportDeclarations = ({\n  exports,\n  module,\n}: {\n  exports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ExportDeclaration => {\n  const exportedTypes = Array.isArray(exports) ? exports : [exports];\n  const hasNonTypeExport = exportedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = exportedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.export({\n      alias: item.alias,\n      asType: hasNonTypeExport && item.asType,\n      name: item.name,\n    });\n  });\n  const exportClause = ts.factory.createNamedExports(elements);\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    !hasNonTypeExport,\n    exportClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n\n/**\n * Create a const variable. Optionally, it can use const assertion or export\n * statement. Example: `export x = {} as const`.\n * @param assertion use const assertion?\n * @param exportConst export created variable?\n * @param expression expression for the variable.\n * @param name name of the variable.\n * @returns ts.VariableStatement\n */\nexport const createConstVariable = ({\n  assertion,\n  comment,\n  destructure,\n  exportConst,\n  expression,\n  name,\n  typeName,\n}: {\n  assertion?: 'const' | ts.TypeNode;\n  comment?: Comments;\n  destructure?: boolean;\n  exportConst?: boolean;\n  expression: ts.Expression;\n  name: string;\n  // TODO: support a more intuitive definition of generics for example\n  typeName?: string | ts.IndexedAccessTypeNode | ts.TypeNode;\n}): ts.VariableStatement => {\n  const initializer = assertion\n    ? createAsExpression({\n        expression,\n        type:\n          typeof assertion === 'string'\n            ? createTypeReferenceNode({ typeName: assertion })\n            : assertion,\n      })\n    : expression;\n  const nameIdentifier = createIdentifier({ text: name });\n  const declaration = ts.factory.createVariableDeclaration(\n    destructure\n      ? ts.factory.createObjectBindingPattern([\n          ts.factory.createBindingElement(\n            undefined,\n            undefined,\n            nameIdentifier,\n            undefined,\n          ),\n        ])\n      : nameIdentifier,\n    undefined,\n    typeName\n      ? typeof typeName === 'string'\n        ? createTypeReferenceNode({ typeName })\n        : typeName\n      : undefined,\n    initializer,\n  );\n  const statement = ts.factory.createVariableStatement(\n    exportConst\n      ? [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)]\n      : undefined,\n    ts.factory.createVariableDeclarationList([declaration], ts.NodeFlags.Const),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: statement,\n  });\n\n  return statement;\n};\n\n/**\n * Create a named import declaration. Example: `import { X } from './y'`.\n * @param imports - named exports to import\n * @param module - module containing imports\n * @returns ts.ImportDeclaration\n */\nexport const createNamedImportDeclarations = ({\n  imports,\n  module,\n}: {\n  imports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ImportDeclaration => {\n  const importedTypes = Array.isArray(imports) ? imports : [imports];\n  const hasNonTypeImport = importedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = importedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.import({\n      alias: item.alias,\n      asType: hasNonTypeImport && item.asType,\n      name: item.name,\n    });\n  });\n  const namedBindings = ts.factory.createNamedImports(elements);\n  const importClause = ts.factory.createImportClause(\n    !hasNonTypeImport,\n    undefined,\n    namedBindings,\n  );\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createImportDeclaration(\n    undefined,\n    importClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n","import ts from 'typescript';\n\nexport const expressionToStatement = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => {\n  const statement = ts.factory.createExpressionStatement(expression);\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport { createTypeReferenceNode } from './types';\nimport { createIdentifier, isType } from './utils';\n\nexport const createReturnStatement = ({\n  expression,\n}: {\n  expression?: ts.Expression;\n}) => ts.factory.createReturnStatement(expression);\n\n/**\n * Create a return function call statement.\n *\n * @example `return fn<string>(params)`\n *\n * @returns ts.ReturnStatement\n */\nexport const createReturnFunctionCall = ({\n  args = [],\n  name,\n  types = [],\n}: {\n  /**\n   * Arguments to pass to the function.\n   */\n  args: any[];\n  /**\n   * Name of the function to call or expression.\n   */\n  name: string | ts.Expression;\n  /**\n   * List of function types.\n   */\n  types?: string[];\n}) => {\n  const typeArguments = types.map((type) =>\n    createTypeReferenceNode({ typeName: type }),\n  );\n  const argumentsArray = args\n    .map((arg) =>\n      ts.isExpression(arg) ? arg : createIdentifier({ text: arg }),\n    )\n    .filter(isType<ts.Identifier | ts.Expression>);\n  const expression = createCallExpression({\n    functionName: name,\n    parameters: argumentsArray,\n    types: typeArguments,\n  });\n  const statement = createReturnStatement({ expression });\n  return statement;\n};\n\nexport const createReturnVariable = ({\n  expression,\n}: {\n  expression: string | ts.Expression;\n}) => {\n  const statement = createReturnStatement({\n    expression:\n      typeof expression === 'string'\n        ? createIdentifier({ text: expression })\n        : expression,\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport { expressionToStatement } from './convert';\nimport { createCallExpression } from './module';\nimport {\n  createArrowFunction,\n  createBlock,\n  createNewExpression,\n  createPropertyAccessChain,\n  createPropertyAccessExpression,\n} from './types';\nimport { createIdentifier } from './utils';\n\nexport const createSafeAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) => {\n      validTypescriptIdentifierRegExp.lastIndex = 0;\n      if (validTypescriptIdentifierRegExp.test(element)) {\n        return createPropertyAccessChain({\n          expression,\n          name: element,\n        });\n      }\n\n      return ts.factory.createElementAccessChain(\n        expression,\n        ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n        createIdentifier({ text: element }),\n      );\n    },\n    createIdentifier({ text: path[0]! }),\n  );\n\nexport const createAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) =>\n      createPropertyAccessExpression({\n        expression,\n        name: element,\n      }),\n    createIdentifier({ text: path[0]! }),\n  );\n\n/**\n * Handles an array of access expressions instead of nesting them (default TypeScript syntax)\n */\nexport const createPropertyAccessExpressions = ({\n  expressions,\n}: {\n  expressions: Array<string | ts.Expression | ts.MemberName>;\n}): ts.PropertyAccessExpression => {\n  const expression = expressions.reduce((expression, name) => {\n    const node = createPropertyAccessExpression({\n      expression,\n      // @ts-expect-error\n      name,\n    });\n    return node;\n  });\n  return expression as ts.PropertyAccessExpression;\n};\n\nexport const createBinaryExpression = ({\n  left,\n  operator = '=',\n  right,\n}: {\n  left: ts.Expression;\n  operator?: '=' | '===' | 'in' | '??';\n  right: ts.Expression | string;\n}) => {\n  const expression = ts.factory.createBinaryExpression(\n    left,\n    // TODO: add support for other tokens\n    operator === '='\n      ? ts.SyntaxKind.EqualsToken\n      : operator === '==='\n        ? ts.SyntaxKind.EqualsEqualsEqualsToken\n        : operator === '??'\n          ? ts.SyntaxKind.QuestionQuestionToken\n          : ts.SyntaxKind.InKeyword,\n    typeof right === 'string' ? createIdentifier({ text: right }) : right,\n  );\n  return expression;\n};\n\nexport const createIfStatement = ({\n  elseStatement,\n  expression,\n  thenStatement,\n}: {\n  elseStatement?: ts.Statement;\n  expression: ts.Expression;\n  thenStatement: ts.Statement;\n}) => ts.factory.createIfStatement(expression, thenStatement, elseStatement);\n\nexport const createDateTransformMutation = ({\n  path,\n}: {\n  path: string[];\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createBinaryExpression({\n          left: accessExpression,\n          right: createNewExpression({\n            argumentsArray: [accessExpression],\n            expression: createIdentifier({ text: 'Date' }),\n          }),\n        }),\n      }),\n    ],\n  });\n\n  const statement = createIfStatement({\n    expression: safeAccessExpression,\n    thenStatement,\n  });\n\n  return statement;\n};\n\nexport const createFunctionTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createCallExpression({\n          functionName: transformerName,\n          parameters: [accessExpression],\n        }),\n      }),\n    ],\n  });\n\n  const statement = [\n    createIfStatement({\n      expression: safeAccessExpression,\n      thenStatement,\n    }),\n  ];\n\n  return statement;\n};\n\nexport const createArrayTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: ts.factory.createCallChain(\n            createPropertyAccessExpression({\n              expression: accessExpression,\n              name: 'forEach',\n            }),\n            undefined,\n            undefined,\n            [createIdentifier({ text: transformerName })],\n          ),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n\nexport const createDateTransformerExpression = ({\n  parameterName,\n}: {\n  parameterName: string;\n}) => {\n  const expression = createIdentifier({ text: 'Date' });\n  const newExpression = createNewExpression({\n    argumentsArray: [createIdentifier({ text: parameterName })],\n    expression,\n  });\n  return newExpression;\n};\n\nexport const createArrayMapTransform = ({\n  path,\n  transformExpression,\n}: {\n  path: string[];\n  transformExpression: ts.Expression;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: createBinaryExpression({\n            left: accessExpression,\n            right: ts.factory.createCallChain(\n              createPropertyAccessExpression({\n                expression: accessExpression,\n                name: 'map',\n              }),\n              undefined,\n              undefined,\n              [\n                createArrowFunction({\n                  parameters: [\n                    {\n                      name: 'item',\n                    },\n                  ],\n                  statements: transformExpression,\n                }),\n              ],\n            ),\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  createKeywordTypeNode,\n  createParameterDeclaration,\n  createStringLiteral,\n  createTypeNode,\n  createTypeReferenceNode,\n} from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  tsNodeToString,\n} from './utils';\n\nconst nullNode = createTypeReferenceNode({ typeName: 'null' });\n\n// Property of a interface type node.\nexport type Property = {\n  comment?: Comments;\n  isReadOnly?: boolean;\n  isRequired?: boolean;\n  name: string | ts.PropertyName;\n  type: any | ts.TypeNode;\n};\n\n/**\n * Returns a union of provided node with null if marked as nullable,\n * otherwise returns the provided node unmodified.\n */\nconst maybeNullable = ({\n  isNullable,\n  node,\n}: {\n  isNullable?: boolean;\n  node: ts.TypeNode;\n}) => {\n  if (!isNullable) {\n    return node;\n  }\n  return ts.factory.createUnionTypeNode([node, nullNode]);\n};\n\n/**\n * Create a interface type node. Example `{ readonly x: string, y?: number }`\n * @param properties - the properties of the interface.\n * @param isNullable - if the whole interface can be nullable\n * @returns ts.TypeLiteralNode | ts.TypeUnionNode\n */\nexport const createTypeInterfaceNode = ({\n  indexProperty,\n  isNullable,\n  properties,\n  useLegacyResolution,\n}: {\n  /**\n   * Adds an index signature if defined.\n   * @example\n   * ```ts\n   * type IndexProperty = {\n   *   [key: string]: string\n   * }\n   * ```\n   */\n  indexProperty?: Property;\n  isNullable?: boolean;\n  properties: Property[];\n  useLegacyResolution: boolean;\n}) => {\n  const propertyTypes: Array<ts.TypeNode> = [];\n\n  const members: Array<ts.TypeElement> = properties.map((property) => {\n    const modifiers: readonly ts.Modifier[] | undefined = property.isReadOnly\n      ? [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)]\n      : undefined;\n\n    const questionToken: ts.QuestionToken | undefined =\n      property.isRequired !== false\n        ? undefined\n        : ts.factory.createToken(ts.SyntaxKind.QuestionToken);\n\n    const type: ts.TypeNode | undefined = createTypeNode(property.type);\n    propertyTypes.push(type);\n\n    const signature = ts.factory.createPropertySignature(\n      modifiers,\n      useLegacyResolution ||\n        (typeof property.name === 'string' &&\n          property.name.match(validTypescriptIdentifierRegExp)) ||\n        (typeof property.name !== 'string' && ts.isPropertyName(property.name))\n        ? property.name\n        : createStringLiteral({ text: property.name }),\n      questionToken,\n      type,\n    );\n\n    addLeadingComments({\n      comments: property.comment,\n      node: signature,\n    });\n\n    return signature;\n  });\n\n  if (indexProperty) {\n    const modifiers: readonly ts.Modifier[] | undefined =\n      indexProperty.isReadOnly\n        ? [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)]\n        : undefined;\n    const indexSignature = ts.factory.createIndexSignature(\n      modifiers,\n      [\n        createParameterDeclaration({\n          name: createIdentifier({ text: String(indexProperty.name) }),\n          type: createKeywordTypeNode({ keyword: 'string' }),\n        }),\n      ],\n      createTypeNode(indexProperty.type),\n    );\n    members.push(indexSignature);\n  }\n\n  const node = ts.factory.createTypeLiteralNode(members);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type union node. Example `string | number | boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.UnionTypeNode\n */\nexport const createTypeUnionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createUnionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type intersection node. Example `string & number & boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.IntersectionTypeNode | ts.UnionTypeNode\n */\nexport const createTypeIntersectionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createIntersectionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type tuple node. Example `string, number, boolean`\n * @param isNullable if the whole type can be null\n * @param types the types in the union\n * @returns ts.UnionTypeNode\n */\nexport const createTypeTupleNode = ({\n  isNullable = false,\n  types,\n}: {\n  isNullable?: boolean;\n  types: Array<any | ts.TypeNode>;\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createTupleTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type record node. Example `{ [key: string]: string }`\n * @param keys - key types.\n * @param values - value types.\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeRecordNode = (\n  keys: (any | ts.TypeNode)[],\n  values: (any | ts.TypeNode)[],\n  isNullable: boolean = false,\n  useLegacyResolution: boolean = true,\n) => {\n  const keyNode = createTypeUnionNode({\n    types: keys,\n  });\n  const valueNode = createTypeUnionNode({\n    types: values,\n  });\n  // NOTE: We use the syntax `{ [key: string]: string }` because using a Record causes\n  //       invalid types with circular dependencies. This is functionally the same.\n  // Ref: https://github.com/hey-api/openapi-ts/issues/370\n  const node = createTypeInterfaceNode({\n    properties: [\n      {\n        name: `[key: ${tsNodeToString({ node: keyNode, unescape: true })}]`,\n        type: valueNode,\n      },\n    ],\n    useLegacyResolution,\n  });\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type array node. Example `Array<string | number>`\n * @param types - the types\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeArrayNode = (\n  types: (any | ts.TypeNode)[] | ts.TypeNode | string,\n  isNullable: boolean = false,\n) => {\n  const node = createTypeReferenceNode({\n    typeArguments: [\n      // @ts-expect-error\n      Array.isArray(types) ? createTypeUnionNode({ types }) : types,\n    ],\n    typeName: 'Array',\n  });\n  return maybeNullable({ isNullable, node });\n};\n","import * as classes from './classes';\nimport * as convert from './convert';\nimport * as module from './module';\nimport * as _return from './return';\nimport * as transform from './transform';\nimport * as typedef from './typedef';\nimport * as types from './types';\nimport * as utils from './utils';\n\nexport type { Property } from './typedef';\nexport type { FunctionParameter } from './types';\nexport type { Comments } from './utils';\nexport type { ClassElement, Node, TypeNode } from 'typescript';\n\nexport const compiler = {\n  anonymousFunction: types.createAnonymousFunction,\n  arrayLiteralExpression: types.createArrayLiteralExpression,\n  arrowFunction: types.createArrowFunction,\n  asExpression: types.createAsExpression,\n  assignment: types.createAssignment,\n  awaitExpression: types.createAwaitExpression,\n  binaryExpression: transform.createBinaryExpression,\n  block: types.createBlock,\n  callExpression: module.createCallExpression,\n  classDeclaration: classes.createClassDeclaration,\n  conditionalExpression: types.createConditionalExpression,\n  constVariable: module.createConstVariable,\n  constructorDeclaration: classes.createConstructorDeclaration,\n  enumDeclaration: types.createEnumDeclaration,\n  exportAllDeclaration: module.createExportAllDeclaration,\n  exportNamedDeclaration: module.createNamedExportDeclarations,\n  expressionToStatement: convert.expressionToStatement,\n  forOfStatement: types.createForOfStatement,\n  functionTypeNode: types.createFunctionTypeNode,\n  identifier: utils.createIdentifier,\n  ifStatement: transform.createIfStatement,\n  indexedAccessTypeNode: types.createIndexedAccessTypeNode,\n  isTsNode: utils.isTsNode,\n  keywordTypeNode: types.createKeywordTypeNode,\n  literalTypeNode: types.createLiteralTypeNode,\n  mappedTypeNode: types.createMappedTypeNode,\n  methodDeclaration: classes.createMethodDeclaration,\n  namedImportDeclarations: module.createNamedImportDeclarations,\n  namespaceDeclaration: types.createNamespaceDeclaration,\n  newExpression: types.createNewExpression,\n  nodeToString: utils.tsNodeToString,\n  null: types.createNull,\n  objectExpression: types.createObjectType,\n  ots: utils.ots,\n  parameterDeclaration: types.createParameterDeclaration,\n  propertyAccessExpression: types.createPropertyAccessExpression,\n  propertyAccessExpressions: transform.createPropertyAccessExpressions,\n  propertyAssignment: types.createPropertyAssignment,\n  regularExpressionLiteral: types.createRegularExpressionLiteral,\n  returnFunctionCall: _return.createReturnFunctionCall,\n  returnStatement: _return.createReturnStatement,\n  returnVariable: _return.createReturnVariable,\n  safeAccessExpression: transform.createSafeAccessExpression,\n  stringLiteral: types.createStringLiteral,\n  stringToTsNodes: utils.stringToTsNodes,\n  templateLiteralType: types.createTemplateLiteralType,\n  transformArrayMap: transform.createArrayMapTransform,\n  transformArrayMutation: transform.createArrayTransformMutation,\n  transformDateMutation: transform.createDateTransformMutation,\n  transformFunctionMutation: transform.createFunctionTransformMutation,\n  transformNewDate: transform.createDateTransformerExpression,\n  typeAliasDeclaration: types.createTypeAliasDeclaration,\n  typeArrayNode: typedef.createTypeArrayNode,\n  typeInterfaceNode: typedef.createTypeInterfaceNode,\n  typeIntersectionNode: typedef.createTypeIntersectionNode,\n  typeNode: types.createTypeNode,\n  typeOfExpression: types.createTypeOfExpression,\n  typeOperatorNode: types.createTypeOperatorNode,\n  typeParameterDeclaration: types.createTypeParameterDeclaration,\n  typeParenthesizedNode: types.createTypeParenthesizedNode,\n  typeRecordNode: typedef.createTypeRecordNode,\n  typeReferenceNode: types.createTypeReferenceNode,\n  typeTupleNode: typedef.createTypeTupleNode,\n  typeUnionNode: typedef.createTypeUnionNode,\n  valueToExpression: types.toExpression,\n};\n","import type { PathLike } from 'node:fs';\nimport fs from 'node:fs';\n\nexport const ensureDirSync = (path: PathLike) => {\n  if (!fs.existsSync(path)) {\n    fs.mkdirSync(path, { recursive: true });\n  }\n};\n\nexport const removeDirSync = (path: PathLike) => {\n  if (fs.existsSync(path)) {\n    fs.rmSync(path, { force: true, recursive: true });\n  }\n};\n\n/**\n * Construct a relative import path to modules. This is used for example\n * in plugins to import types or SDK module.\n */\nexport const relativeModulePath = ({\n  moduleOutput,\n  sourceOutput,\n}: {\n  /**\n   * Output path to the imported module.\n   * @example\n   * 'types'\n   */\n  moduleOutput: string;\n  /**\n   * Output path to the source module.\n   * @example\n   * '@tanstack/react-query'\n   */\n  sourceOutput: string;\n}): string => {\n  const outputParts = sourceOutput.split('/');\n  const relativePath =\n    Array.from({ length: outputParts.length }).fill('').join('../') || './';\n  return `${relativePath}${moduleOutput}`;\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type { ImportExportItemObject } from '../compiler/utils';\nimport type { Client } from '../plugins/@hey-api/client-core/types';\nimport { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { Plugin } from '../plugins/types';\nimport type { Config } from '../types/config';\nimport { ensureDirSync, relativeModulePath } from './utils';\n\nconst getClientSrcPath = (name: string) => {\n  const pluginFilePathComponents = name.split(path.sep);\n  const clientSrcPath = pluginFilePathComponents\n    .slice(0, pluginFilePathComponents.length - 1)\n    .join(path.sep);\n  return clientSrcPath;\n};\n\n/**\n * Returns path to the client module. When using client packages, this will be\n * simply the name of the package. When bundling a client, this will be a\n * relative path to the bundled client folder.\n */\nexport const clientModulePath = ({\n  config,\n  sourceOutput,\n}: {\n  config: Config;\n  sourceOutput: string;\n}): string => {\n  const client = getClientPlugin(config);\n\n  if ('bundle' in client && client.bundle) {\n    return relativeModulePath({\n      moduleOutput: 'client',\n      sourceOutput,\n    });\n  }\n\n  if (path.isAbsolute(client.name)) {\n    const clientSrcPath = getClientSrcPath(client.name);\n    const outputPath = path.resolve(config.output.path);\n    return path.relative(outputPath, clientSrcPath).replace(/\\\\/g, '/');\n  }\n\n  return client.name;\n};\n\nexport const clientApi = {\n  Options: {\n    asType: true,\n    name: 'Options',\n  },\n  OptionsLegacyParser: {\n    asType: true,\n    name: 'OptionsLegacyParser',\n  },\n} satisfies Record<string, ImportExportItemObject>;\n\n/**\n * Creates a `client` folder containing the same modules as the client package.\n */\nexport const generateClientBundle = ({\n  outputPath,\n  plugin,\n}: {\n  outputPath: string;\n  plugin: Plugin.Config<Client.Config & { name: any }>;\n}): void => {\n  // create folder for client modules\n  const dirPath = path.resolve(outputPath, 'client');\n  ensureDirSync(dirPath);\n\n  let clientSrcPath = '';\n  if (path.isAbsolute(plugin.name)) {\n    clientSrcPath = getClientSrcPath(plugin.name);\n  }\n\n  if (plugin.bundleSource_EXPERIMENTAL && !clientSrcPath) {\n    const clientModulePath = path.normalize(require.resolve(plugin.name));\n    const clientModulePathComponents = clientModulePath.split(path.sep);\n    clientSrcPath = [\n      ...clientModulePathComponents.slice(\n        0,\n        clientModulePathComponents.indexOf('dist'),\n      ),\n      'src',\n    ].join(path.sep);\n  }\n\n  if (clientSrcPath) {\n    fs.cpSync(clientSrcPath, dirPath, {\n      recursive: true,\n    });\n    return;\n  }\n\n  const clientModulePath = path.normalize(require.resolve(plugin.name));\n  const clientModulePathComponents = clientModulePath.split(path.sep);\n  const clientDistPath = clientModulePathComponents\n    .slice(0, clientModulePathComponents.indexOf('dist') + 1)\n    .join(path.sep);\n\n  const indexJsFile =\n    clientModulePathComponents[clientModulePathComponents.length - 1];\n  const distFiles = [indexJsFile!, 'index.d.ts'];\n  if (plugin.name !== '@hey-api/client-nuxt') {\n    distFiles.push('index.d.cts');\n  }\n  for (const file of distFiles) {\n    fs.copyFileSync(\n      path.resolve(clientDistPath, file),\n      path.resolve(dirPath, file),\n    );\n  }\n};\n","const parseUrlRegExp =\n  /^(([^:/?#]+):)?((\\/\\/)?([^:/?#]*)(:?([^/?#]*)))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\ninterface Url {\n  host: string;\n  path: string;\n  port: string;\n  protocol: string;\n}\n\nexport const parseUrl = (value: string): Url => {\n  const errorResponse: Url = {\n    host: '',\n    path: '',\n    port: '',\n    protocol: '',\n  };\n\n  parseUrlRegExp.lastIndex = 0;\n  const match = value.match(parseUrlRegExp);\n\n  if (!match) {\n    return errorResponse;\n  }\n\n  const host = match[5] || '';\n\n  // value is a relative file system path\n  if (host === '.' || host === '..') {\n    return errorResponse;\n  }\n\n  const path = match[8] || '';\n  const protocol = match[2] || '';\n\n  // value is probably a Windows file system path\n  if (protocol.length === 1) {\n    return errorResponse;\n  }\n\n  return {\n    host,\n    path: path === '/' ? '' : path,\n    port: match[7] || '',\n    protocol,\n  };\n};\n","export const irRef = '#/ir/';\n\nexport const isRefOpenApiComponent = ($ref: string): boolean => {\n  const parts = refToParts($ref);\n  // reusable components are nested within components/<namespace>/<name>\n  return parts.length === 3 && parts[0] === 'components';\n};\n\n/**\n * Returns the reusable component name from `$ref`.\n */\nexport const refToName = ($ref: string): string => {\n  const parts = refToParts($ref);\n  const name = parts[parts.length - 1]!;\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  return decodeURI(name);\n};\n\nconst refToParts = ($ref: string): string[] => {\n  // Remove the leading `#` and split by `/` to traverse the object\n  const parts = $ref.replace(/^#\\//, '').split('/');\n  return parts;\n};\n\nexport const resolveRef = <T>({\n  $ref,\n  spec,\n}: {\n  $ref: string;\n  spec: Record<string, any>;\n}): T => {\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  const parts = refToParts(decodeURI($ref));\n\n  let current = spec;\n\n  for (const part of parts) {\n    const p = part as keyof typeof current;\n    if (current[p] === undefined) {\n      throw new Error(`Reference not found: ${$ref}`);\n    }\n    current = current[p];\n  }\n\n  return current as T;\n};\n","import type { StringCase } from '../types/config';\n\nconst uppercaseRegExp = /[\\p{Lu}]/u;\nconst lowercaseRegExp = /[\\p{Ll}]/u;\nconst identifierRegExp = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst separatorsRegExp = /[_.\\- `\\\\[\\]{}\\\\/]+/;\n\nconst leadingSeparatorsRegExp = new RegExp(`^${separatorsRegExp.source}`);\nconst separatorsAndIdentifierRegExp = new RegExp(\n  `${separatorsRegExp.source}${identifierRegExp.source}`,\n  'gu',\n);\nconst numbersAndIdentifierRegExp = new RegExp(\n  `\\\\d+${identifierRegExp.source}`,\n  'gu',\n);\n\nconst preserveCase = ({\n  case: _case,\n  string,\n}: {\n  readonly case: StringCase;\n  string: string;\n}) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  let isLastLastCharPreserved = false;\n\n  const separator =\n    _case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE' ? '_' : '-';\n\n  for (let index = 0; index < string.length; index++) {\n    const character = string[index]!;\n    isLastLastCharPreserved =\n      index > 2 ? string[index - 3] === separator : true;\n\n    let nextIndex = index + 1;\n    let nextCharacter = string[nextIndex];\n    separatorsRegExp.lastIndex = 0;\n    while (nextCharacter && separatorsRegExp.test(nextCharacter)) {\n      nextIndex += 1;\n      nextCharacter = string[nextIndex];\n    }\n    const isSeparatorBeforeNextCharacter = nextIndex !== index + 1;\n\n    lowercaseRegExp.lastIndex = 0;\n    uppercaseRegExp.lastIndex = 0;\n    if (\n      uppercaseRegExp.test(character) &&\n      (isLastCharLower ||\n        (nextCharacter &&\n          !isSeparatorBeforeNextCharacter &&\n          nextCharacter !== 's' &&\n          lowercaseRegExp.test(nextCharacter)))\n    ) {\n      // insert separator behind character\n      string = `${string.slice(0, index)}${separator}${string.slice(index)}`;\n      index++;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = false;\n      isLastCharUpper = true;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      lowercaseRegExp.test(character) &&\n      !isLastLastCharPreserved &&\n      // naive detection of plurals\n      !(\n        character === 's' &&\n        (!nextCharacter || nextCharacter.toLocaleLowerCase() !== nextCharacter)\n      )\n    ) {\n      // insert separator 2 characters behind\n      string = `${string.slice(0, index - 1)}${separator}${string.slice(index - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = true;\n      isLastCharUpper = false;\n    } else {\n      const characterLower = character.toLocaleLowerCase();\n      const characterUpper = character.toLocaleUpperCase();\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower =\n        characterLower === character && characterUpper !== character;\n      isLastCharUpper =\n        characterUpper === character && characterLower !== character;\n    }\n  }\n\n  return string;\n};\n\nexport const stringCase = ({\n  case: _case,\n  stripLeadingSeparators = true,\n  value,\n}: {\n  readonly case: StringCase | undefined;\n  /**\n   * If leading separators have a semantic meaning, we might not want to\n   * remove them.\n   */\n  stripLeadingSeparators?: boolean;\n  value: string;\n}): string => {\n  let result = value.trim();\n\n  if (!result.length) {\n    return '';\n  }\n\n  if (!_case || _case === 'preserve') {\n    return result;\n  }\n\n  if (result.length === 1) {\n    separatorsRegExp.lastIndex = 0;\n    if (separatorsRegExp.test(result)) {\n      return '';\n    }\n\n    return _case === 'PascalCase' || _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n  }\n\n  const hasUpperCase = result !== result.toLocaleLowerCase();\n\n  if (hasUpperCase) {\n    result = preserveCase({ case: _case, string: result });\n  }\n\n  if (stripLeadingSeparators || result[0] !== value[0]) {\n    result = result.replace(leadingSeparatorsRegExp, '');\n  }\n\n  result =\n    _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n\n  if (_case === 'PascalCase') {\n    result = `${result.charAt(0).toLocaleUpperCase()}${result.slice(1)}`;\n  }\n\n  if (_case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE') {\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (offset === 0 && !stripLeadingSeparators) {\n          return match;\n        }\n        return `_${identifier}`;\n      },\n    );\n\n    if (result[result.length - 1] === '_') {\n      // strip trailing underscore\n      result = result.slice(0, result.length - 1);\n    }\n  } else {\n    separatorsAndIdentifierRegExp.lastIndex = 0;\n    numbersAndIdentifierRegExp.lastIndex = 0;\n\n    result = result.replaceAll(\n      numbersAndIdentifierRegExp,\n      (match, _, offset) => {\n        if (['_', '-', '.'].includes(result.charAt(offset + match.length))) {\n          return match;\n        }\n\n        return match.toLocaleUpperCase();\n      },\n    );\n\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (\n          offset === 0 &&\n          !stripLeadingSeparators &&\n          match[0] &&\n          value.startsWith(match[0])\n        ) {\n          return match;\n        }\n        return identifier.toLocaleUpperCase();\n      },\n    );\n  }\n\n  return result;\n};\n","import type { StringCase } from '../../../types/config';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nexport const operationIrRef = ({\n  case: _case = 'PascalCase',\n  id,\n  type,\n}: OperationIRRef & {\n  readonly case?: StringCase;\n  type: 'data' | 'error' | 'errors' | 'response' | 'responses';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'Data';\n      break;\n    case 'error':\n      // error union\n      affix = 'Error';\n      break;\n    case 'errors':\n      // errors map\n      affix = 'Errors';\n      break;\n    case 'response':\n      // response union\n      affix = 'Response';\n      break;\n    case 'responses':\n      // responses map\n      affix = 'Responses';\n      break;\n  }\n  return `${irRef}${stringCase({\n    case: _case,\n    value: id,\n  })}-${affix}`;\n};\n","import type { Identifier, TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { operationIrRef } from '../../shared/utils/ref';\n\nexport const typesId = 'types';\n\nfunction refIdentifier<T extends Identifier>(\n  identifier: T,\n  onGet?: (identifier: T) => void,\n): T {\n  return {\n    ...identifier,\n    get name() {\n      onGet?.(identifier);\n      return identifier.name;\n    },\n  };\n}\n\nexport const importIdentifierData = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierData = context.file({ id: typesId })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierData, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n\nexport const importIdentifierError = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierError = context.file({ id: typesId })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'error' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierError, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n\nexport const importIdentifierResponse = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierResponse = context.file({ id: typesId })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'response' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierResponse, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { parseUrl } from '../../../utils/url';\nimport { clientId, getClientBaseUrlKey } from '../client-core/utils';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\n\nconst resolveBaseUrlString: PluginHandler<string | undefined> = ({\n  context,\n  plugin,\n}) => {\n  const { baseUrl } = plugin;\n\n  if (baseUrl === false) {\n    return;\n  }\n\n  if (typeof baseUrl === 'string') {\n    return baseUrl;\n  }\n\n  const { servers } = context.ir;\n\n  if (!servers) {\n    return;\n  }\n\n  return servers[typeof baseUrl === 'number' ? baseUrl : 0]?.url;\n};\n\nexport const createClient: PluginHandler = ({ context, plugin }) => {\n  const file = context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const createClient = file.import({\n    module: clientModule,\n    name: 'createClient',\n  });\n  const createConfig = file.import({\n    module: clientModule,\n    name: 'createConfig',\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context, id: typesId }),\n    name: 'ClientOptions',\n  });\n\n  const createClientConfig = plugin.runtimeConfigPath\n    ? file.import({\n        module: file.relativePathToFile({\n          context,\n          id: plugin.runtimeConfigPath,\n        }),\n        name: 'createClientConfig',\n      })\n    : undefined;\n\n  const defaultValues: Array<unknown> = [];\n\n  const resolvedBaseUrl = resolveBaseUrlString({ context, plugin });\n  if (resolvedBaseUrl) {\n    const url = parseUrl(resolvedBaseUrl);\n    if (url.protocol && url.host && !resolvedBaseUrl.includes('{')) {\n      defaultValues.push({\n        key: getClientBaseUrlKey(context.config),\n        value: resolvedBaseUrl,\n      });\n    }\n  }\n\n  if ('throwOnError' in plugin && plugin.throwOnError) {\n    defaultValues.push({\n      key: 'throwOnError',\n      value: true,\n    });\n  }\n\n  const createConfigParameters = [\n    compiler.callExpression({\n      functionName: createConfig.name,\n      parameters: defaultValues.length\n        ? [compiler.objectExpression({ obj: defaultValues })]\n        : undefined,\n      types: [compiler.typeReferenceNode({ typeName: clientOptions.name })],\n    }),\n  ];\n\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.callExpression({\n      functionName: createClient.name,\n      parameters: createClientConfig\n        ? [\n            compiler.callExpression({\n              functionName: createClientConfig.name,\n              parameters: createConfigParameters,\n            }),\n          ]\n        : createConfigParameters,\n    }),\n    name: 'client',\n  });\n  file.add(statement);\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { clientId } from '../client-core/utils';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\n\nexport const createClientConfigType: PluginHandler = ({ context }) => {\n  const file = context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context, id: typesId }),\n    name: 'ClientOptions',\n  });\n  const configType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Config',\n  });\n  const defaultClientOptions = file.import({\n    alias: 'DefaultClientOptions',\n    asType: true,\n    module: clientModule,\n    name: 'ClientOptions',\n  });\n\n  const defaultClientOptionsType = compiler.typeReferenceNode({\n    typeName: defaultClientOptions.name,\n  });\n  const tType = compiler.typeReferenceNode({ typeName: 'T' });\n\n  const typeCreateClientConfig = compiler.typeAliasDeclaration({\n    comment: [\n      'The `createClientConfig()` function will be called on client initialization',\n      \"and the returned object will become the client's initial configuration.\",\n      '',\n      'You may want to initialize your client this way instead of calling',\n      \"`setConfig()`. This is useful for example if you're using Next.js\",\n      'to ensure your client always has the correct values.',\n    ],\n    exportType: true,\n    name: 'CreateClientConfig',\n    type: compiler.functionTypeNode({\n      parameters: [\n        compiler.parameterDeclaration({\n          name: 'override',\n          required: false,\n          type: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeIntersectionNode({\n                types: [defaultClientOptionsType, tType],\n              }),\n            ],\n            typeName: configType.name,\n          }),\n        }),\n      ],\n      returnType: compiler.typeReferenceNode({\n        typeArguments: [\n          compiler.typeIntersectionNode({\n            types: [\n              compiler.typeReferenceNode({\n                typeArguments: [defaultClientOptionsType],\n                typeName: 'Required',\n              }),\n              tType,\n            ],\n          }),\n        ],\n        typeName: configType.name,\n      }),\n    }),\n    typeParameters: [\n      {\n        default: compiler.typeReferenceNode({ typeName: clientOptions.name }),\n        extends: defaultClientOptionsType,\n        name: 'T',\n      },\n    ],\n  });\n\n  file.add(typeCreateClientConfig);\n};\n","import { clientId } from '../client-core/utils';\nimport { createClient } from './client';\nimport { createClientConfigType } from './createClientConfig';\nimport type { PluginHandler } from './types';\n\nexport const clientPluginHandler: PluginHandler = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: clientId,\n    path: plugin.output,\n  });\n\n  createClientConfigType({ context, plugin });\n  createClient({ context, plugin });\n};\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-axios',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-fetch',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-next',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-next` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-nuxt',\n};\n\n/**\n * Type helper for `@hey-api/client-nuxt` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/angular',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/angular` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/axios',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/fetch',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/node',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/node` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/xhr',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/xhr` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import {\n  illegalStartCharactersRegExp,\n  reservedBrowserGlobalsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedJavaScriptKeywordsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n} from '../../../utils/regexp';\n\nconst regexps = [\n  reservedJavaScriptKeywordsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedBrowserGlobalsRegExp,\n];\n\nexport const ensureValidIdentifier = (name: string): string => {\n  let identifier = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n\n  illegalStartCharactersRegExp.lastIndex = 0;\n  if (illegalStartCharactersRegExp.test(identifier)) {\n    return `_${identifier}`;\n  }\n\n  for (const regexp of regexps) {\n    if (identifier.startsWith('_')) {\n      return identifier;\n    }\n\n    identifier = identifier.replace(regexp, '_$1');\n  }\n\n  return identifier;\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaObject as OpenApiV2_0_XSchemaObject } from '../../../openApi/2.0.x/types/spec';\nimport type {\n  ReferenceObject as OpenApiV3_0_XReferenceObject,\n  SchemaObject as OpenApiV3_0_XSchemaObject,\n} from '../../../openApi/3.0.x/types/spec';\nimport type { SchemaObject as OpenApiV3_1_XSchemaObject } from '../../../openApi/3.1.x/types/spec';\nimport { ensureValidIdentifier } from '../../../openApi/shared/utils/identifier';\nimport type { OpenApi } from '../../../openApi/types';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst schemasId = 'schemas';\n\nconst stripSchema = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XSchemaObject\n    | OpenApiV3_0_XSchemaObject\n    | OpenApiV3_1_XSchemaObject;\n}) => {\n  if (plugin.type === 'form') {\n    if (schema.description) {\n      delete schema.description;\n    }\n\n    if (schema['x-enum-descriptions']) {\n      delete schema['x-enum-descriptions'];\n    }\n\n    if (schema['x-enum-varnames']) {\n      delete schema['x-enum-varnames'];\n    }\n\n    if (schema['x-enumNames']) {\n      delete schema['x-enumNames'];\n    }\n\n    if (schema.title) {\n      delete schema.title;\n    }\n  }\n};\n\nconst schemaToJsonSchemaDraft_04 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV2_0_XSchemaObject;\n}): OpenApiV2_0_XSchemaObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as unknown as OpenApiV2_0_XSchemaObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.items as OpenApiV2_0_XSchemaObject,\n    });\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_04({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchemaDraft_05 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject;\n}): OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  if ('$ref' in schema) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_05({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchema2020_12 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV3_1_XSchemaObject;\n}): OpenApiV3_1_XSchemaObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_1_XSchemaObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  stripSchema({ plugin, schema });\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.prefixItems) {\n    schema.prefixItems = schema.prefixItems.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchema2020_12({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaName = ({\n  name,\n  plugin,\n  schema,\n}: {\n  name: string;\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XSchemaObject\n    | OpenApiV3_0_XReferenceObject\n    | OpenApiV3_0_XSchemaObject\n    | OpenApiV3_1_XSchemaObject;\n}): string => {\n  const customName = plugin.nameBuilder?.(name, schema) ?? `${name}Schema`;\n  return ensureValidIdentifier(customName);\n};\n\nconst schemasV2_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V2_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.definitions) {\n    return;\n  }\n\n  for (const name in context.spec.definitions) {\n    const schema = context.spec.definitions[name]!;\n    const obj = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_1_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_1_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: schemasId,\n    path: plugin.output,\n  });\n\n  if ('swagger' in context.spec) {\n    schemasV2_0_X({\n      context: context as IR.Context<OpenApi.V2_0_X>,\n      plugin,\n    });\n    return;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      schemasV3_0_X({\n        context: context as IR.Context<OpenApi.V3_0_X>,\n        plugin,\n      });\n      break;\n    case '3.1.0':\n    case '3.1.1':\n      schemasV3_1_X({\n        context: context as IR.Context<OpenApi.V3_1_X>,\n        plugin,\n      });\n      break;\n    default:\n      break;\n  }\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type ts from 'typescript';\n\nimport { compiler } from '../compiler';\nimport { type ImportExportItemObject, tsNodeToString } from '../compiler/utils';\nimport type { IR } from '../ir/types';\nimport { ensureValidIdentifier } from '../openApi/shared/utils/identifier';\nimport type { StringCase } from '../types/config';\nimport { stringCase } from '../utils/stringCase';\nimport { ensureDirSync } from './utils';\n\nexport interface Identifier {\n  /**\n   * Did this function add a new property to the file's `identifiers` map?\n   */\n  created: boolean;\n  /**\n   * The resolved identifier name. False means the identifier has been blacklisted.\n   */\n  name: string | false;\n}\n\ntype Namespace = Record<\n  string,\n  Pick<Identifier, 'name'> & {\n    /**\n     * Ref to the type in OpenAPI specification.\n     */\n    $ref: string;\n  }\n>;\n\ninterface Namespaces {\n  /**\n   * Type namespace. Types, interfaces, and type aliases exist here.\n   * @example\n   * ```ts\n   * export type Foo = string;\n   * ```\n   */\n  type: Namespace;\n  /**\n   * Value namespace. Variables, functions, classes, and constants exist here.\n   * @example\n   * ```js\n   * export const foo = '';\n   * ```\n   */\n  value: Namespace;\n}\n\nexport type FileImportResult = Pick<ImportExportItemObject, 'asType' | 'name'>;\n\nexport class TypeScriptFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  private _exportFromIndex: boolean;\n  private _headers: Array<string> = [];\n  private _id: string;\n  private _identifierCase: StringCase | undefined;\n  private _imports = new Map<string, Map<string, ImportExportItemObject>>();\n  private _items: Array<ts.Node | string> = [];\n  private _name: string;\n  private _path: string;\n\n  public namespaces: Namespaces = {\n    type: {},\n    value: {},\n  };\n  /**\n   * Path relative to the client output root.\n   */\n  // TODO: parser - add relative path property for quick access, currently\n  // everything is resolved into an absolute path with cwd\n  // public relativePath: string;\n\n  public constructor({\n    dir,\n    exportFromIndex = false,\n    header = true,\n    id,\n    identifierCase,\n    name,\n  }: {\n    dir: string;\n    /**\n     * Should the exports from this file be re-exported in the index barrel file?\n     */\n    exportFromIndex?: boolean;\n    header?: boolean;\n    /**\n     * Unique file ID. Used to generate correct relative paths to the file.\n     * This should be refactored later as it's basically the file name unless\n     * nested inside another folder.\n     */\n    id: string;\n    identifierCase?: StringCase;\n    name: string;\n  }) {\n    this._exportFromIndex = exportFromIndex;\n    this._id = id;\n    this._identifierCase = identifierCase;\n    this._name = this._setName(name);\n    this._path = path.resolve(dir, this._name);\n\n    if (header) {\n      this._headers.push(\n        '// This file is auto-generated by @hey-api/openapi-ts',\n      );\n    }\n  }\n\n  public add(...nodes: Array<ts.Node | string>) {\n    this._items = this._items.concat(nodes);\n  }\n\n  /**\n   * Prevents a specific identifier from being created. This is useful for\n   * transformers where we know a certain transformer won't be needed, and\n   * we want to avoid attempting to create since we know it won't happen.\n   */\n  public blockIdentifier({\n    $ref,\n    namespace,\n  }: Pick<EnsureUniqueIdentifierData, '$ref'> & {\n    namespace: keyof Namespaces;\n  }): Identifier {\n    const refValue = this.namespaces[namespace][$ref];\n    if (!refValue) {\n      throw new Error(\n        `Identifier for $ref ${$ref} in namespace ${namespace} not found`,\n      );\n    }\n\n    refValue.name = false;\n\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  public get exportFromIndex(): boolean {\n    return this._exportFromIndex;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public identifier({\n    namespace,\n    ...args\n  }: Omit<EnsureUniqueIdentifierData, 'case' | 'namespace'> & {\n    namespace: keyof Namespaces;\n  }): Identifier {\n    return ensureUniqueIdentifier({\n      case: this._identifierCase,\n      namespace: this.namespaces[namespace],\n      ...args,\n    });\n  }\n\n  /**\n   * Adds an import to the provided module. Handles duplication, returns added\n   * import. Returns the imported name. If we import an aliased export, `name`\n   * will be equal to the specified `alias`.\n   */\n  public import({\n    module,\n    ...importedItem\n  }: ImportExportItemObject & {\n    module: string;\n  }): FileImportResult {\n    let moduleMap = this._imports.get(module);\n\n    if (!moduleMap) {\n      moduleMap = new Map<string, ImportExportItemObject>();\n      this._imports.set(module, moduleMap);\n    }\n\n    const match = moduleMap.get(importedItem.name);\n    if (match) {\n      return {\n        ...match,\n        name: match.alias || match.name,\n      };\n    }\n\n    moduleMap.set(importedItem.name, importedItem);\n    return {\n      ...importedItem,\n      name: importedItem.alias || importedItem.name,\n    };\n  }\n\n  public isEmpty() {\n    return !this._items.length;\n  }\n\n  public nameWithoutExtension() {\n    const { name } = splitNameAndExtension(this._name);\n    return name;\n  }\n\n  public relativePathToFile({\n    context,\n    id,\n  }: {\n    context: IR.Context;\n    id: string;\n  }): string {\n    let filePath = '';\n\n    // relative file path\n    if (id.startsWith('.')) {\n      let configFileParts: Array<string> = [];\n      // if providing a custom configuration file, relative paths must resolve\n      // relative to the configuration file.\n      if (context.config.configFile) {\n        const cfgParts = context.config.configFile.split('/');\n        configFileParts = cfgParts.slice(0, cfgParts.length - 1);\n      }\n      filePath = path.resolve(process.cwd(), ...configFileParts, id);\n    } else {\n      const file = context.file({ id });\n      if (!file) {\n        throw new Error(`File with id ${id} does not exist`);\n      }\n      filePath = file._path;\n    }\n\n    const thisPathParts = this._path.split(path.sep);\n    const filePathParts = filePath.split(path.sep);\n\n    let index = -1;\n    let relativePath = '';\n    for (const part of thisPathParts) {\n      index += 1;\n      if (filePathParts[index] !== part) {\n        const pathArray = Array.from({\n          length: thisPathParts.length - index,\n        }).fill('');\n        const relativePathToFile = filePathParts.slice(index);\n        const relativeFolder = relativePathToFile.slice(\n          0,\n          relativePathToFile.length - 1,\n        );\n        if (relativeFolder.length) {\n          relativeFolder.push('');\n        }\n        relativePath =\n          (pathArray.join('../') || './') + relativeFolder.join('/');\n        break;\n      }\n    }\n\n    const fileName = filePathParts[filePathParts.length - 1]!;\n    // TODO: parser - cache responses\n    return `${relativePath}${splitNameAndExtension(fileName).name}`;\n  }\n\n  public remove(options?: Parameters<typeof fs.rmSync>[1]) {\n    fs.rmSync(this._path, options);\n  }\n\n  /**\n   * Removes last node form the stack. Works as undo.\n   */\n  public removeNode() {\n    this._items = this._items.slice(0, this._items.length - 1);\n  }\n\n  private _setName(fileName: string) {\n    if (fileName.includes('index')) {\n      return fileName;\n    }\n\n    const { extension, name } = splitNameAndExtension(fileName);\n    return [name, 'gen', extension].filter(Boolean).join('.');\n  }\n\n  public toString(separator: string = '\\n') {\n    let output: string[] = [];\n    if (this._headers.length) {\n      output.push(this._headers.join('\\n'));\n    }\n    const importsStringArray: string[] = [];\n    for (const [_module, moduleMap] of this._imports.entries()) {\n      const imports = Array.from(moduleMap.values());\n      const node = compiler.namedImportDeclarations({\n        imports,\n        module: _module,\n      });\n      importsStringArray.push(tsNodeToString({ node }));\n    }\n    if (importsStringArray.length) {\n      output.push(importsStringArray.join('\\n'));\n    }\n    output = output.concat(\n      this._items.map((node) =>\n        typeof node === 'string'\n          ? node\n          : tsNodeToString({ node, unescape: true }),\n      ),\n    );\n    return output.join(separator);\n  }\n\n  public write(separator = '\\n') {\n    if (this.isEmpty()) {\n      this.remove({ force: true });\n      return;\n    }\n\n    let dir = this._path;\n    if (typeof this._path === 'string') {\n      const parts = this._path.split(path.sep);\n      dir = parts.slice(0, parts.length - 1).join(path.sep);\n    }\n    ensureDirSync(dir);\n    fs.writeFileSync(this._path, this.toString(separator));\n  }\n}\n\ninterface EnsureUniqueIdentifierData {\n  $ref: string;\n  case: StringCase | undefined;\n  count?: number;\n  create?: boolean;\n  /**\n   * Transforms name obtained from `$ref` before it's passed to `stringCase()`.\n   */\n  nameTransformer?: (name: string) => string;\n  namespace: Namespace;\n}\n\nconst ensureUniqueIdentifier = ({\n  $ref,\n  case: identifierCase,\n  count = 1,\n  create = false,\n  nameTransformer,\n  namespace,\n}: EnsureUniqueIdentifierData): Identifier => {\n  const parts = $ref.split('/');\n  const name = parts[parts.length - 1] || '';\n\n  if (!name) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const refValue = namespace[$ref];\n  if (refValue) {\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  const nameWithTransform = nameTransformer?.(name) ?? name;\n  let nameWithCasing = stringCase({\n    case: identifierCase,\n    value: nameWithTransform,\n  });\n\n  if (count > 1) {\n    nameWithCasing = `${nameWithCasing}${count}`;\n  }\n\n  let nameValue = namespace[nameWithCasing];\n  if (nameValue) {\n    if (nameValue.$ref === $ref) {\n      return {\n        created: false,\n        name: nameValue.name,\n      };\n    }\n\n    return ensureUniqueIdentifier({\n      $ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!create) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  nameValue = {\n    $ref,\n    name: ensureValidIdentifier(nameWithCasing),\n  };\n  namespace[nameWithCasing] = nameValue;\n  namespace[nameValue.$ref] = nameValue;\n\n  return {\n    created: true,\n    name: nameValue.name,\n  };\n};\n\nconst splitNameAndExtension = (fileName: string) => {\n  const match = fileName.match(/\\.[0-9a-z]+$/i);\n  const extension = match ? match[0].slice(1) : '';\n  const name = fileName.slice(\n    0,\n    fileName.length - (extension ? extension.length + 1 : 0),\n  );\n  return { extension, name };\n};\n","import path from 'node:path';\n\nimport { TypeScriptFile } from '../generate/files';\nimport type { Config, StringCase } from '../types/config';\nimport type { Files } from '../types/utils';\nimport { resolveRef } from '../utils/ref';\nimport type { IR } from './types';\n\ninterface ContextFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  exportFromIndex?: boolean;\n  /**\n   * Unique file identifier.\n   */\n  id: string;\n  /**\n   * Define casing for identifiers in this file.\n   */\n  identifierCase?: StringCase;\n  /**\n   * Relative file path to the output path.\n   * @example\n   * 'bar/foo.ts'\n   */\n  path: string;\n}\n\ninterface Events {\n  /**\n   * Called after parsing.\n   */\n  after: () => void;\n  /**\n   * Called before parsing.\n   */\n  before: () => void;\n  operation: (args: {\n    method: keyof IR.PathItemObject;\n    operation: IR.OperationObject;\n    path: string;\n  }) => void;\n  parameter: (args: {\n    $ref: string;\n    name: string;\n    parameter: IR.ParameterObject;\n  }) => void;\n  requestBody: (args: {\n    $ref: string;\n    name: string;\n    requestBody: IR.RequestBodyObject;\n  }) => void;\n  schema: (args: {\n    $ref: string;\n    name: string;\n    schema: IR.SchemaObject;\n  }) => void;\n  server: (args: { server: IR.ServerObject }) => void;\n}\n\ntype Listeners = {\n  [T in keyof Events]?: Array<Events[T]>;\n};\n\nexport class IRContext<Spec extends Record<string, any> = any> {\n  /**\n   * Configuration for parsing and generating the output. This\n   * is a mix of user-provided and default values.\n   */\n  public config: Config;\n  /**\n   * A map of files that will be generated from `spec`.\n   */\n  public files: Files;\n  /**\n   * Intermediate representation model obtained from `spec`.\n   */\n  public ir: IR.Model;\n  /**\n   * Resolved specification from `input`.\n   */\n  public spec: Spec;\n\n  /**\n   * A map of event listeners.\n   */\n  private listeners: Listeners;\n\n  constructor({ config, spec }: { config: Config; spec: Spec }) {\n    this.config = config;\n    this.files = {};\n    this.ir = {};\n    this.listeners = {};\n    this.spec = spec;\n  }\n\n  /**\n   * Notify all event listeners about `event`.\n   */\n  public async broadcast<T extends keyof Events>(\n    event: T,\n    ...args: Parameters<Events[T]>\n  ): Promise<void> {\n    if (!this.listeners[event]) {\n      return;\n    }\n\n    await Promise.all(\n      this.listeners[event].map((callbackFn, index) => {\n        try {\n          // @ts-expect-error\n          const response = callbackFn(...args);\n          return Promise.resolve(response);\n        } catch (error) {\n          console.error(\n            `🔥 Event broadcast: \"${event}\"\\nindex: ${index}\\narguments: ${JSON.stringify(args, null, 2)}`,\n          );\n          throw error;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Create and return a new TypeScript file. Also set the current file context\n   * to the newly created file.\n   */\n  public createFile(file: ContextFile): TypeScriptFile {\n    // TODO: parser - handle attempt to create duplicate\n    const outputParts = file.path.split('/');\n    const outputDir = path.resolve(\n      this.config.output.path,\n      ...outputParts.slice(0, outputParts.length - 1),\n    );\n    const createdFile = new TypeScriptFile({\n      dir: outputDir,\n      exportFromIndex: file.exportFromIndex,\n      id: file.id,\n      identifierCase: file.identifierCase,\n      name: `${outputParts[outputParts.length - 1]}.ts`,\n    });\n    this.files[file.id] = createdFile;\n    return createdFile;\n  }\n\n  /**\n   * Returns a specific file by ID from `files`.\n   */\n  public file({ id }: Pick<ContextFile, 'id'>): TypeScriptFile | undefined {\n    return this.files[id];\n  }\n\n  // TODO: parser - works the same as resolveRef, but for IR schemas.\n  // for now, they map 1:1, but if they diverge (like with OpenAPI 2.0),\n  // we will want to rewrite $refs at parse time, so they continue pointing\n  // to the correct IR location\n  public resolveIrRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.ir,\n    });\n  }\n\n  /**\n   * Returns a resolved reference from `spec`.\n   */\n  public resolveRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.spec,\n    });\n  }\n\n  /**\n   * Register a new `event` listener.\n   */\n  public subscribe<T extends keyof Events>(\n    event: T,\n    callbackFn: Events[T],\n  ): void {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callbackFn);\n  }\n}\n","type Filter = RegExp | ReadonlyArray<string>;\ntype Filters = ReadonlyArray<Filter> | undefined;\n\nconst isFiltersMatch = ({\n  $ref,\n  filters,\n  schema,\n}: {\n  $ref: string;\n  filters: NonNullable<Filters>;\n  schema: Record<string, unknown>;\n}): boolean => {\n  for (const filter of filters) {\n    if (filter instanceof RegExp) {\n      filter.lastIndex = 0;\n      if (filter.test($ref)) {\n        return true;\n      }\n    } else {\n      const field = filter[0] || '';\n      const value = filter[1];\n      if (value === undefined) {\n        if (schema[field]) {\n          return true;\n        }\n      } else if (schema[field] === value) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Exclude takes precedence over include.\n */\nexport const canProcessRef = ({\n  excludeFilters,\n  includeFilters,\n  ...state\n}: {\n  $ref: string;\n  excludeFilters: Filters;\n  includeFilters: Filters;\n  schema: Record<string, unknown>;\n}): boolean => {\n  if (!excludeFilters && !includeFilters) {\n    return true;\n  }\n\n  if (excludeFilters) {\n    if (isFiltersMatch({ ...state, filters: excludeFilters })) {\n      return false;\n    }\n  }\n\n  if (includeFilters) {\n    return isFiltersMatch({ ...state, filters: includeFilters });\n  }\n\n  return true;\n};\n\nconst createFilter = (matcher: string): Filter => {\n  if (matcher.startsWith('@')) {\n    return matcher.slice(1).split(':');\n  }\n\n  return new RegExp(matcher);\n};\n\nexport const createFilters = (\n  matchers: ReadonlyArray<string> | string | undefined,\n): Filters => {\n  if (!matchers) {\n    return;\n  }\n\n  if (typeof matchers === 'string') {\n    return [createFilter(matchers)];\n  }\n\n  return matchers.map((matcher) => createFilter(matcher));\n};\n","import type { IR } from '../../../ir/types';\n\nexport const mergeParametersObjects = ({\n  source,\n  target,\n}: {\n  source: IR.ParametersObject | undefined;\n  target: IR.ParametersObject | undefined;\n}): IR.ParametersObject | undefined => {\n  const result = { ...target };\n\n  if (source) {\n    if (source.cookie) {\n      if (result.cookie) {\n        result.cookie = {\n          ...result.cookie,\n          ...source.cookie,\n        };\n      } else {\n        result.cookie = source.cookie;\n      }\n    }\n\n    if (source.header) {\n      if (result.header) {\n        result.header = {\n          ...result.header,\n          ...source.header,\n        };\n      } else {\n        result.header = source.header;\n      }\n    }\n\n    if (source.path) {\n      if (result.path) {\n        result.path = {\n          ...result.path,\n          ...source.path,\n        };\n      } else {\n        result.path = source.path;\n      }\n    }\n\n    if (source.query) {\n      if (result.query) {\n        result.query = {\n          ...result.query,\n          ...source.query,\n        };\n      } else {\n        result.query = source.query;\n      }\n    }\n  }\n\n  if (!Object.keys(result).length) {\n    return;\n  }\n\n  return result;\n};\n","import { illegalStartCharactersRegExp } from '../../../utils/regexp';\n\nexport const ensureValidTypeScriptJavaScriptIdentifier = (name: string) => {\n  const replaced = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n  illegalStartCharactersRegExp.lastIndex = 0;\n  const startsWithIllegalCharacter =\n    illegalStartCharactersRegExp.test(replaced);\n  const valid = startsWithIllegalCharacter ? `_${replaced}` : replaced;\n  return valid;\n};\n\n/**\n * Sanitizes namespace identifiers so they are valid TypeScript identifiers of a certain form.\n *\n * 1: Remove any leading characters that are illegal as starting character of a typescript identifier.\n * 2: Replace illegal characters in remaining part of type name with hyphen (-).\n *\n * Step 1 should perhaps instead also replace illegal characters with underscore, or prefix with it, like sanitizeEnumName\n * does. The way this is now one could perhaps end up removing all characters, if all are illegal start characters. It\n * would be sort of a breaking change to do so, though, previously generated code might change then.\n *\n * JavaScript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n *\n * The output of this is expected to be converted to PascalCase\n */\nexport const sanitizeNamespaceIdentifier = (name: string) =>\n  name\n    .replace(/^[^\\p{ID_Start}]+/u, '')\n    .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '-')\n    .replace(/[$+]/g, '-');\n\nexport const sanitizeOperationParameterName = (name: string) => {\n  const withoutBrackets = name.replace('[]', 'Array');\n  return sanitizeNamespaceIdentifier(withoutBrackets);\n};\n","import type { IR } from '../../../ir/types';\nimport { stringCase } from '../../../utils/stringCase';\nimport { sanitizeNamespaceIdentifier } from '../../common/parser/sanitize';\nimport type { State } from '../types/state';\n\n/**\n * Verifies that operation ID is unique. For now, we only warn when this isn't\n * true as people like to not follow this part of the specification. In the\n * future, we should add a strict check and throw on duplicate identifiers.\n */\nexport const ensureUniqueOperationId = ({\n  context,\n  id,\n  method,\n  operationIds,\n  path,\n}: {\n  context: IR.Context;\n  id: string | undefined;\n  method: IR.OperationObject['method'];\n  operationIds: Map<string, string>;\n  path: keyof IR.PathsObject;\n}) => {\n  if (!id) {\n    return;\n  }\n\n  const operationKey = `${method.toUpperCase()} ${path}`;\n\n  if (operationIds.has(id)) {\n    if (context.config.logs.level !== 'silent') {\n      // TODO: parser - support throw on duplicate\n      console.warn(\n        `❗️ Duplicate operationId: ${id} in ${operationKey}. Please ensure your operation IDs are unique. This behavior is not supported and will likely lead to unexpected results.`,\n      );\n    }\n  } else {\n    operationIds.set(id, operationKey);\n  }\n};\n\n/**\n * Returns an operation ID to use across the application. By default, we try\n * to use the provided ID. If it's not provided or the SDK is configured\n * to exclude it, we generate operation ID from its location.\n */\nexport const operationToId = ({\n  context,\n  count = 1,\n  id,\n  method,\n  path,\n  state,\n}: {\n  context: IR.Context;\n  count?: number;\n  id: string | undefined;\n  method: string;\n  path: string;\n  state: Pick<State, 'ids'>;\n}): string => {\n  let result: string;\n\n  if (\n    id &&\n    (!context.config.plugins['@hey-api/sdk'] ||\n      context.config.plugins['@hey-api/sdk'].operationId)\n  ) {\n    result = stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(id),\n    });\n  } else {\n    const urlWithoutPlaceholders = path\n      .replace(/{(.*?)}/g, 'by-$1')\n      // replace slashes with hyphens for camelcase method at the end\n      .replace(/[/:+]/g, '-');\n\n    result = stringCase({\n      case: 'camelCase',\n      value: `${method}-${urlWithoutPlaceholders}`,\n    });\n  }\n\n  if (count > 1) {\n    result = `${result}${count}`;\n  }\n\n  if (state.ids.has(result)) {\n    return operationToId({\n      context,\n      count: count + 1,\n      id,\n      method,\n      path,\n      state,\n    });\n  }\n\n  const operationKey = `${method.toUpperCase()} ${path}`;\n  state.ids.set(result, operationKey);\n\n  return result;\n};\n","const fileLikeRegExp =\n  /^(application\\/(pdf|rtf|msword|vnd\\.(ms-|openxmlformats-officedocument\\.)|zip|x-(7z|tar|rar|zip|iso)|octet-stream|gzip|x-msdownload|json\\+download|xml|x-yaml|x-7z-compressed|x-tar)|text\\/(yaml|css|javascript)|audio\\/(mpeg|wav)|video\\/(mp4|x-matroska)|image\\/(vnd\\.adobe\\.photoshop|svg\\+xml))(; ?charset=[^;]+)?$/i;\nconst jsonMimeRegExp = /^application\\/(.*\\+)?json(;.*)?$/i;\nconst multipartFormDataMimeRegExp = /^multipart\\/form-data(;.*)?$/i;\nconst textMimeRegExp = /^text\\/[a-z0-9.+-]+(;.*)?$/i;\nconst xWwwFormUrlEncodedMimeRegExp =\n  /^application\\/x-www-form-urlencoded(;.*)?$/i;\nconst octetStreamMimeRegExp = /^application\\/octet-stream(;.*)?$/i;\n\nexport type IRMediaType =\n  | 'form-data'\n  | 'json'\n  | 'text'\n  | 'url-search-params'\n  | 'octet-stream';\n\nexport const isMediaTypeFileLike = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): boolean => {\n  fileLikeRegExp.lastIndex = 0;\n  return fileLikeRegExp.test(mediaType);\n};\n\nexport const mediaTypeToIrMediaType = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): IRMediaType | undefined => {\n  jsonMimeRegExp.lastIndex = 0;\n  if (jsonMimeRegExp.test(mediaType)) {\n    return 'json';\n  }\n\n  multipartFormDataMimeRegExp.lastIndex = 0;\n  if (multipartFormDataMimeRegExp.test(mediaType)) {\n    return 'form-data';\n  }\n\n  textMimeRegExp.lastIndex = 0;\n  if (textMimeRegExp.test(mediaType)) {\n    return 'text';\n  }\n\n  xWwwFormUrlEncodedMimeRegExp.lastIndex = 0;\n  if (xWwwFormUrlEncodedMimeRegExp.test(mediaType)) {\n    return 'url-search-params';\n  }\n\n  octetStreamMimeRegExp.lastIndex = 0;\n  if (octetStreamMimeRegExp.test(mediaType)) {\n    return 'octet-stream';\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  ReferenceObject,\n  ResponseObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  mimeTypes,\n  response,\n}: {\n  mimeTypes: ReadonlyArray<string> | undefined;\n  response: Pick<ResponseObject, 'schema'>;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType of mimeTypes ?? []) {\n    return {\n      mediaType,\n      schema: response.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { Config } from '../types/config';\nimport type { IR } from './types';\n\nexport const DEFAULT_PAGINATION_KEYWORDS = [\n  'after',\n  'before',\n  'cursor',\n  'offset',\n  'page',\n  'start',\n] as const;\n\nexport function getPaginationKeywordsRegExp({\n  keywords = DEFAULT_PAGINATION_KEYWORDS,\n}: Config['input']['pagination'] = {}): RegExp {\n  if (keywords.length === 0) {\n    keywords = DEFAULT_PAGINATION_KEYWORDS;\n  }\n  const pattern = `^(${keywords.join('|')})$`;\n  return new RegExp(pattern);\n}\n\nexport interface Pagination {\n  in: string;\n  name: string;\n  schema: IR.SchemaObject;\n}\n","import type { IR } from './types';\n\n/**\n * Simply adds `items` to the schema. Also handles setting the logical operator\n * and avoids setting it for a single item or tuples.\n */\nexport const addItemsToSchema = ({\n  items,\n  logicalOperator = 'or',\n  mutateSchemaOneItem = false,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  logicalOperator?: IR.SchemaObject['logicalOperator'];\n  mutateSchemaOneItem?: boolean;\n  schema: IR.SchemaObject;\n}) => {\n  if (!items.length) {\n    return schema;\n  }\n\n  if (schema.type === 'tuple') {\n    schema.items = items;\n    return schema;\n  }\n\n  if (items.length !== 1) {\n    schema.items = items;\n    schema.logicalOperator = logicalOperator;\n    return schema;\n  }\n\n  if (mutateSchemaOneItem) {\n    // bring composition up to avoid extraneous brackets\n    schema = {\n      ...schema,\n      ...items[0],\n    };\n    return schema;\n  }\n\n  schema.items = items;\n  return schema;\n};\n","import { refToName } from '../../../utils/ref';\n\nexport const discriminatorValues = (\n  $ref: string,\n  mapping?: Record<string, string>,\n): ReadonlyArray<string> => {\n  const values: Array<string> = [];\n\n  for (const name in mapping) {\n    if (mapping[name] === $ref) {\n      values.push(name);\n    }\n  }\n\n  if (!values.length) {\n    return [refToName($ref)];\n  }\n\n  return values;\n};\n","/**\n * Accepts `accessScopes` from two schemas and returns a merged and\n * deduplicated value.\n */\nexport const mergeSchemaAccessScopes = (\n  a: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n  b: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n): ReadonlyArray<'both' | 'read' | 'write'> | undefined => {\n  if (!a?.length) {\n    return b?.length ? b : undefined;\n  }\n\n  if (!b?.length) {\n    return a;\n  }\n\n  const mergedScopes = new Set(a);\n\n  for (const scope of b) {\n    mergedScopes.add(scope);\n  }\n\n  return mergedScopes.size > a.length ? Array.from(mergedScopes) : a;\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray = schema.items.allOf;\n        if (ofArray && ofArray.length > 1 && !schema.items['x-nullable']) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(state.$ref);\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator)) {\n          irDiscriminatorSchema.required = [ref.discriminator];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema['x-nullable']) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema['x-nullable']) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  // rewrite definitions refs as the internal schema follows OpenAPI 3.x syntax\n  // and stores all definitions as reusable schemas\n  irSchema.$ref = irSchema.$ref.replace(\n    /#\\/definitions\\/([^/]+)/g,\n    '#/components/schemas/$1',\n  );\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (schema['x-nullable']) {\n    return parseNullableType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseOneType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, ReferenceObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema:\n    | ParameterObject\n    | SchemaObject\n    | ReferenceObject\n    | {\n        in: undefined;\n      };\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<ParameterObject | SchemaObject>(\n      schema.$ref ?? '',\n    );\n\n    if ('in' in ref && ref.in) {\n      const refSchema =\n        'schema' in ref\n          ? ref.schema\n          : {\n              ...ref,\n              in: undefined,\n            };\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  if ('in' in schema) {\n    if (!schema.in) {\n      return false;\n    }\n\n    const finalSchema =\n      'schema' in schema\n        ? schema.schema\n        : {\n            ...schema,\n            in: undefined,\n          };\n\n    return paginationField({\n      context,\n      name,\n      schema: finalSchema,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR, IRBodyObject } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  ResponseObject,\n  SchemaObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {\n  requestBody?: OperationObject['parameters'];\n}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  let isRequestBodyRequired = false;\n  const requestBodyObject: IRBodyObject = {\n    mediaType: '',\n    schema: {\n      properties: {},\n      required: [],\n      type: 'object',\n    },\n  };\n  const requestBodyObjectRequired: Array<string> = [];\n\n  for (const requestBodyParameter of operation.requestBody ?? []) {\n    const requestBody =\n      '$ref' in requestBodyParameter\n        ? context.resolveRef<ParameterObject>(requestBodyParameter.$ref)\n        : requestBodyParameter;\n    const schema: SchemaObject =\n      requestBody.in === 'body'\n        ? requestBody.schema\n        : {\n            ...requestBody,\n            format: requestBody.type === 'file' ? 'binary' : requestBody.format,\n            required: undefined,\n            type: requestBody.type === 'file' ? 'string' : requestBody.type,\n          };\n    const content = mediaTypeObject({\n      mimeTypes: operation.consumes,\n      response: { schema },\n    });\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      const irSchema = schemaToIrSchema({\n        context,\n        schema:\n          '$ref' in requestBody\n            ? {\n                allOf: [\n                  {\n                    ...requestBody,\n                    $ref: requestBody.$ref as string,\n                    required: [],\n                    type: 'string',\n                  },\n                ],\n                description: requestBody.description,\n              }\n            : content.schema && '$ref' in content.schema\n              ? {\n                  allOf: [{ ...content.schema }],\n                  description: requestBody.description,\n                }\n              : {\n                  description: requestBody.description,\n                  ...content.schema,\n                },\n        state: undefined,\n      });\n\n      requestBodyObject.mediaType = content.mediaType;\n\n      if (requestBody.in === 'body') {\n        requestBodyObject.schema = irSchema;\n      } else {\n        requestBodyObject.schema.properties![requestBody.name] = irSchema;\n\n        if (requestBody.required) {\n          requestBodyObjectRequired.push(requestBody.name);\n        }\n      }\n\n      if (pagination) {\n        requestBodyObject.pagination = pagination;\n      }\n\n      if (content.type) {\n        requestBodyObject.type = content.type;\n      }\n    }\n\n    if (requestBody.required) {\n      isRequestBodyRequired = true;\n    }\n  }\n\n  if (requestBodyObject.mediaType) {\n    if (requestBodyObjectRequired.length) {\n      requestBodyObject.schema.required = requestBodyObjectRequired;\n    }\n\n    irOperation.body = requestBodyObject;\n\n    if (isRequestBodyRequired) {\n      irOperation.body.required = isRequestBodyRequired;\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      // assume JSON by default\n      mimeTypes: operation.produces ? operation.produces : ['application/json'],\n      response: responseObject,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        let irSecuritySchemeObject: IR.SecurityObject | undefined;\n\n        if (securitySchemeObject.type === 'apiKey') {\n          irSecuritySchemeObject = securitySchemeObject;\n        }\n\n        if (securitySchemeObject.type === 'basic') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            scheme: 'basic',\n            type: 'http',\n          };\n        }\n\n        if (securitySchemeObject.type === 'oauth2') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            flows: {},\n            type: 'oauth2',\n          };\n\n          switch (securitySchemeObject.flow) {\n            case 'accessCode':\n              irSecuritySchemeObject.flows.authorizationCode = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'application':\n              irSecuritySchemeObject.flows.clientCredentials = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'implicit':\n              irSecuritySchemeObject.flows.implicit = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n              };\n              break;\n            case 'password':\n              irSecuritySchemeObject.flows.password = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n          }\n        }\n\n        if (!irSecuritySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(irSecuritySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  ensureUniqueOperationId({\n    context,\n    id: operation.operationId,\n    method,\n    operationIds: state.operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport type {\n  OperationObject,\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ntype Parameter = Exclude<ParameterObject, { in: 'body' }>;\n\n/**\n * Returns default parameter `explode` based on value of `collectionFormat`.\n */\nconst defaultExplode = (\n  collectionFormat: Parameter['collectionFormat'],\n): boolean => {\n  switch (collectionFormat) {\n    case 'multi':\n      return true;\n    case 'csv':\n    case 'pipes':\n    case 'ssv':\n    case 'tsv':\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: Parameter['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'query':\n    default:\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  operation,\n  parameters,\n}: {\n  context: IR.Context;\n  operation: OperationObject;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    // push request body parameters into a separate field\n    if (parameter.in === 'body' || parameter.in === 'formData') {\n      // @ts-expect-error\n      if (!operation.requestBody) {\n        // @ts-expect-error\n        operation.requestBody = [];\n      }\n\n      // @ts-expect-error\n      operation.requestBody.push(parameter);\n      continue;\n    }\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: Parameter;\n}): IR.ParameterObject => {\n  const schema = parameter;\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [\n            {\n              ...schema,\n              $ref: schema.$ref as string,\n              required: Array.isArray(schema.required) ? schema.required : [],\n              type: schema.type as SchemaObject['type'],\n            },\n          ],\n          description: parameter.description,\n        }\n      : {\n          description: parameter.description,\n          ...schema,\n          required: Array.isArray(schema.required) ? schema.required : [],\n          type: schema.type as SchemaObject['type'],\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = defaultStyle(parameter.in);\n  const explode = defaultExplode(parameter.collectionFormat);\n  const allowReserved = false;\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in as IR.ParameterObject['location'],\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  let schemes: ReadonlyArray<string> = context.spec.schemes ?? [];\n  let host = context.spec.host ?? '';\n  const path = context.spec.basePath ?? '';\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n\n    if (!schemes.length) {\n      if (url.protocol) {\n        schemes = [url.protocol] as typeof schemes;\n      }\n    }\n\n    if (!host) {\n      host = `${url.host}${url.port ? `:${url.port}` : ''}`;\n    }\n  }\n\n  if (!schemes.length) {\n    schemes = [''];\n  }\n\n  const servers = schemes\n    .map((scheme) => `${scheme ? `${scheme}://` : ''}${host}${path}`)\n    .filter(Boolean);\n\n  if (servers.length) {\n    context.ir.servers = servers.map((url) => ({\n      url,\n    }));\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { canProcessRef, createFilters } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject } from './parameter';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\ntype PathKeys<T extends keyof PathsObject = keyof PathsObject> =\n  keyof T extends infer K ? (K extends `/${string}` ? K : never) : never;\n\nexport const parseV2_0_X = (context: IR.Context<OpenApiV2_0_X>) => {\n  const state: State = {\n    ids: new Map(),\n    operationIds: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeFilters = createFilters(context.config.input.exclude);\n  const includeFilters = createFilters(context.config.input.include);\n\n  const shouldProcessRef = ($ref: string, schema: Record<string, any>) =>\n    canProcessRef({\n      $ref,\n      excludeFilters,\n      includeFilters,\n      schema,\n    });\n\n  for (const name in context.spec.securityDefinitions) {\n    const securitySchemeObject = context.spec.securityDefinitions[name]!;\n    securitySchemesMap.set(name, securitySchemeObject);\n  }\n\n  if (context.spec.definitions) {\n    for (const name in context.spec.definitions) {\n      const $ref = `#/definitions/${name}`;\n      const schema = context.spec.definitions[name]!;\n\n      if (!shouldProcessRef($ref, schema)) {\n        continue;\n      }\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    if (path.startsWith('x-')) {\n      continue;\n    }\n\n    const pathItem = context.spec.paths[path as PathKeys]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const commonOperation: OperationObject = {\n      consumes: context.spec.consumes,\n      produces: context.spec.produces,\n      responses: {},\n      security: context.spec.security,\n    };\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          ...commonOperation,\n          parameters: parametersArrayToObject({\n            context,\n            operation: commonOperation,\n            parameters: finalPathItem.parameters,\n          }),\n        },\n        path: path as PathKeys,\n        securitySchemesMap,\n        state,\n      };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (\n      finalPathItem.delete &&\n      shouldProcessRef($refDelete, finalPathItem.delete)\n    ) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.delete,\n          parameters: finalPathItem.delete.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters,\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet, finalPathItem.get)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.get,\n          parameters: finalPathItem.get.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters,\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead, finalPathItem.head)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.head,\n          parameters: finalPathItem.head.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters,\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (\n      finalPathItem.options &&\n      shouldProcessRef($refOptions, finalPathItem.options)\n    ) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.options,\n          parameters: finalPathItem.options.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters,\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (\n      finalPathItem.patch &&\n      shouldProcessRef($refPatch, finalPathItem.patch)\n    ) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.patch,\n          parameters: finalPathItem.patch.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters,\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost, finalPathItem.post)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.post,\n          parameters: finalPathItem.post.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters,\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut, finalPathItem.put)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.put,\n          parameters: finalPathItem.put.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters,\n        },\n      });\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  MediaTypeObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { ReferenceObject, SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'write',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray =\n          schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n        if (ofArray && ofArray.length > 1 && !schema.items.nullable) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if ('$ref' in compositionSchema) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema =\n              '$ref' in compositionSchema\n                ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n                : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema.nullable) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema.nullable) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: ReferenceObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (!schema.nullable) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseNullableType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if ('$ref' in schema) {\n    return parseRef({\n      context,\n      schema,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  RequestBodyObject,\n} from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject | ReferenceObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | ReferenceObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema:\n            '$ref' in operation.requestBody\n              ? {\n                  allOf: [{ ...operation.requestBody }],\n                  description: requestBody.description,\n                }\n              : content.schema && '$ref' in content.schema\n                ? {\n                    allOf: [{ ...content.schema }],\n                    description: requestBody.description,\n                  }\n                : {\n                    description: requestBody.description,\n                    ...content.schema,\n                  },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  ensureUniqueOperationId({\n    context,\n    id: operation.operationId,\n    method,\n    operationIds: state.operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [{ ...schema }],\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n        }\n      : {\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n          ...schema,\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { canProcessRef, createFilters } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV3_0_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\nexport const parseV3_0_X = (context: IR.Context<OpenApiV3_0_X>) => {\n  const state: State = {\n    ids: new Map(),\n    operationIds: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeFilters = createFilters(context.config.input.exclude);\n  const includeFilters = createFilters(context.config.input.include);\n\n  const shouldProcessRef = ($ref: string, schema: Record<string, any>) =>\n    canProcessRef({\n      $ref,\n      excludeFilters,\n      includeFilters,\n      schema,\n    });\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      if (!shouldProcessRef($ref, parameter)) {\n        continue;\n      }\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      if (!shouldProcessRef($ref, requestBody)) {\n        continue;\n      }\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      if (!shouldProcessRef($ref, schema)) {\n        continue;\n      }\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<\n      Parameters<typeof parseOperation>[0],\n      'method' | 'operation'\n    > & {\n      operation: Omit<\n        Parameters<typeof parseOperation>[0]['operation'],\n        'responses'\n      >;\n    } = {\n      context,\n      operation: {\n        description: finalPathItem.description,\n        parameters: parametersArrayToObject({\n          context,\n          parameters: finalPathItem.parameters,\n        }),\n        security: context.spec.security,\n        servers: finalPathItem.servers,\n        summary: finalPathItem.summary,\n      },\n      path: path as keyof PathsObject,\n      securitySchemesMap,\n      state,\n    };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (\n      finalPathItem.delete &&\n      shouldProcessRef($refDelete, finalPathItem.delete)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet, finalPathItem.get)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead, finalPathItem.head)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (\n      finalPathItem.options &&\n      shouldProcessRef($refOptions, finalPathItem.options)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (\n      finalPathItem.patch &&\n      shouldProcessRef($refPatch, finalPathItem.patch)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost, finalPathItem.post)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut, finalPathItem.put)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refTrace = `#/paths${path}/trace`;\n    if (\n      finalPathItem.trace &&\n      shouldProcessRef($refTrace, finalPathItem.trace)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type { MediaTypeObject, SchemaObject } from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaTypes = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): ReadonlyArray<SchemaType<SchemaObject>> => {\n  if (typeof schema.type === 'string') {\n    return [schema.type];\n  }\n\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return ['object'];\n  }\n\n  return [];\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.const !== undefined) {\n    irSchema.const = schema.const;\n\n    // try to infer schema type\n    if (!schema.type) {\n      if (schema.const === null) {\n        irSchema.type = 'null';\n      } else {\n        switch (typeof schema.const) {\n          case 'bigint':\n          case 'number':\n            irSchema.type = 'number';\n            break;\n          case 'boolean':\n            irSchema.type = 'boolean';\n            break;\n          case 'string':\n            irSchema.type = 'string';\n            break;\n        }\n      }\n    }\n  }\n\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    irSchema.exclusiveMaximum = schema.exclusiveMaximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    irSchema.exclusiveMinimum = schema.exclusiveMinimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'write',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (\n    (schema.prefixItems && schema.prefixItems.length) ||\n    (schema.maxItems && schema.maxItems === schema.minItems) ||\n    schema.const !== undefined\n  ) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const item of schema.prefixItems ?? []) {\n    const irItemSchema = schemaToIrSchema({\n      context,\n      schema: item,\n      state,\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemSchema.accessScopes,\n    );\n    schemaItems.push(irItemSchema);\n  }\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      const ofArray =\n        schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n      if (\n        ofArray &&\n        ofArray.length > 1 &&\n        !getSchemaTypes({ schema: schema.items }).includes('null')\n      ) {\n        // bring composition up to avoid incorrectly nested arrays\n        irSchema = {\n          ...irSchema,\n          ...irItemsSchema,\n        };\n      } else {\n        schemaItems.push(irItemsSchema);\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNull = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  irSchema.type = 'null';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaTypes.includes('object')) {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaTypes({ schema: finalCompositionSchema }).includes(\n                'object',\n              )\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('null')) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // type must contain null\n      if (schemaTypes.includes('null')) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        const: enumValue,\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        type: enumType,\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const irRefSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irRefSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irResolvedRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irRefSchema.accessScopes = mergeSchemaAccessScopes(\n      irRefSchema.accessScopes,\n      irResolvedRefSchema.accessScopes,\n    );\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  schemaItems.push(irRefSchema);\n\n  if (schema.type && typeof schema.type !== 'string') {\n    if (schema.type.includes('null')) {\n      schemaItems.push({ type: 'null' });\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'null':\n      return parseNull({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseManyTypes = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: ReadonlyArray<SchemaType<SchemaObject>>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (schema.type.includes('null') && typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const type of schema.type) {\n    if (type === 'null') {\n      schemaItems.push({ type: 'null' });\n    } else {\n      const irTypeSchema = parseOneType({\n        context,\n        irSchema: typeIrSchema,\n        schema: {\n          ...schema,\n          type,\n        },\n        state,\n      });\n\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irTypeSchema.accessScopes,\n      );\n\n      schemaItems.push(irTypeSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const schemaTypes = getSchemaTypes({ schema });\n\n  if (schemaTypes.length === 1) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type: schemaTypes[0]!,\n      },\n      state,\n    });\n  }\n\n  return parseManyTypes({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type: schemaTypes,\n    },\n    state,\n  });\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, RequestBodyObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaTypes } from './schema';\n\nconst isPaginationType = (\n  schemaTypes: ReadonlyArray<SchemaType<SchemaObject>>,\n): boolean =>\n  schemaTypes.includes('boolean') ||\n  schemaTypes.includes('integer') ||\n  schemaTypes.includes('number') ||\n  schemaTypes.includes('string');\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if (schema.$ref) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        // TODO: resolve deeper references\n        const schemaTypes = getSchemaTypes({ schema: property });\n\n        if (!schemaTypes.length) {\n          const compositionSchemas = property.anyOf ?? property.oneOf;\n          const nonNullCompositionSchemas = (compositionSchemas ?? []).filter(\n            (schema) => schema.type !== 'null',\n          );\n          if (nonNullCompositionSchemas.length === 1) {\n            const schemaTypes = getSchemaTypes({\n              schema: nonNullCompositionSchemas[0]!,\n            });\n            if (isPaginationType(schemaTypes)) {\n              return name;\n            }\n          }\n        }\n\n        if (isPaginationType(schemaTypes)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema: {\n          description: requestBody.description,\n          ...content.schema,\n        },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: requestBody.description,\n            ...('$ref' in operation.requestBody\n              ? operation.requestBody\n              : content.schema),\n          },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  ensureUniqueOperationId({\n    context,\n    id: operation.operationId,\n    method,\n    operationIds: state.operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject = {\n    deprecated: parameter.deprecated,\n    description: parameter.description,\n    ...schema,\n  };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { canProcessRef, createFilters } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV3_1_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\nexport const parseV3_1_X = (context: IR.Context<OpenApiV3_1_X>) => {\n  const state: State = {\n    ids: new Map(),\n    operationIds: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeFilters = createFilters(context.config.input.exclude);\n  const includeFilters = createFilters(context.config.input.include);\n\n  const shouldProcessRef = ($ref: string, schema: Record<string, any>) =>\n    canProcessRef({\n      $ref,\n      excludeFilters,\n      includeFilters,\n      schema,\n    });\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      if (!shouldProcessRef($ref, parameter)) {\n        continue;\n      }\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      if (!shouldProcessRef($ref, requestBody)) {\n        continue;\n      }\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      if (!shouldProcessRef($ref, schema)) {\n        continue;\n      }\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          description: finalPathItem.description,\n          parameters: parametersArrayToObject({\n            context,\n            parameters: finalPathItem.parameters,\n          }),\n          security: context.spec.security,\n          servers: finalPathItem.servers,\n          summary: finalPathItem.summary,\n        },\n        path: path as keyof PathsObject,\n        securitySchemesMap,\n        state,\n      };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (\n      finalPathItem.delete &&\n      shouldProcessRef($refDelete, finalPathItem.delete)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet, finalPathItem.get)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead, finalPathItem.head)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (\n      finalPathItem.options &&\n      shouldProcessRef($refOptions, finalPathItem.options)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (\n      finalPathItem.patch &&\n      shouldProcessRef($refPatch, finalPathItem.patch)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost, finalPathItem.post)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut, finalPathItem.put)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refTrace = `#/paths${path}/trace`;\n    if (\n      finalPathItem.trace &&\n      shouldProcessRef($refTrace, finalPathItem.trace)\n    ) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","export const refParametersPartial = '#/components/parameters/';\n\nexport const refSchemasPartial = '#/components/schemas/';\n","import { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport type { Config } from '../types/config';\nimport { getConfig } from './config';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\n\nexport const transformServiceName = ({\n  config,\n  name,\n}: {\n  config: Config;\n  name: string;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.serviceNameBuilder) {\n    return config.plugins['@hey-api/sdk'].serviceNameBuilder.replace(\n      '{{name}}',\n      name,\n    );\n  }\n\n  return name;\n};\n\nexport const transformTypeName = (name: string) => {\n  const config = getConfig();\n  if (config.plugins['@hey-api/typescript']?.style === 'PascalCase') {\n    return stringCase({\n      case: 'PascalCase',\n      value: name,\n    });\n  }\n  return name;\n};\n\n/**\n * This method is meant to be used to process definition names\n * and return a cleaned up, transformed version that is legal\n * to use in the output code.\n *\n * For example, a definition with name \"400\" would result in \"_400\",\n * \"import\" would result in \"_import\", etc. This also respects the\n * casing configuration for types.\n *\n * @param name Name of the definition in OpenAPI specification.\n * @returns A cleaned up, transformed name usable in output code.\n */\nexport const cleanAndTransformTypeName = (name: string) => {\n  const transformed = transformTypeName(name);\n  const cleaned = ensureValidTypeScriptJavaScriptIdentifier(transformed);\n  const result = cleaned.replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return result;\n};\n","export function unique<T>(value: T, index: number, arr: T[]): boolean {\n  return arr.indexOf(value) === index;\n}\n","export function sort(a: string, b: string): number {\n  const nameA = a.toLocaleLowerCase();\n  const nameB = b.toLocaleLowerCase();\n  return nameA.localeCompare(nameB, 'en');\n}\n\nexport const sorterByName = <T extends { name: string }>(a: T, b: T) =>\n  sort(a.name, b.name);\n\nexport function sortByName<T extends { name: string }>(items: T[]): T[] {\n  return items.sort(sorterByName);\n}\n","import type { Enum, Model } from '../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport { unescapeName } from './escape';\nimport { sort } from './sort';\nimport { unique } from './unique';\n\n/**\n * Sanitizes names of enums, so they are valid typescript identifiers of a certain form.\n *\n * 1: Replace all characters not legal as part of identifier with '_'\n * 2: Add '_' prefix if first character of enum name has character not legal for start of identifier\n * 3: Add '_' where the string transitions from lowercase to uppercase\n * 4: Transform the whole string to uppercase\n *\n * Javascript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const enumKey = (value?: string | number, customName?: string) => {\n  if (customName) {\n    return customName;\n  }\n  // prefix numbers with underscore\n  if (typeof value === 'number') {\n    return `'_${value}'`;\n  }\n\n  let key = '';\n  if (typeof value === 'string') {\n    key = value\n      .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_')\n      .replace(/^([^$_\\p{ID_Start}])/u, '_$1')\n      .replace(/(\\p{Lowercase})(\\p{Uppercase}+)/gu, '$1_$2');\n  }\n  key = key.trim();\n  if (!key) {\n    key = 'empty_string';\n  }\n  return key.toUpperCase();\n};\n\nexport const enumUnionType = (enums: Enum[]) =>\n  enums\n    .map((enumerator) => enumValue(enumerator.value, true))\n    .filter(unique)\n    .join(' | ');\n\nexport const enumValue = (value?: string | number, union: boolean = false) => {\n  if (typeof value === 'string') {\n    if (value.includes(\"'\") && union) {\n      return `\"${value}\"`;\n    }\n    return `'${value}'`;\n  }\n  return value;\n};\n\nexport const enumEntry = (enumerator: Enum) => {\n  const key = enumKey(enumerator.value, enumerator.customName);\n  const value = enumValue(enumerator.value);\n  return { key, value };\n};\n\n/**\n * Represent enum in `meta` object for deduplication\n */\nexport const enumMeta = (model: Model): Required<Model>['meta'] => {\n  // serialize enum values in namespace for quick lookup\n  const serialized = model.enum\n    .map((enumerator) => enumEntry(enumerator))\n    .sort((a, b) => sort(a.key, b.key))\n    .map((enumerator) => `${enumerator.key}=${enumerator.value}`)\n    .join('&');\n  return {\n    $ref: `enum/${model.name}/${serialized}`,\n    name: ensureValidTypeScriptJavaScriptIdentifier(unescapeName(model.name)),\n  };\n};\n","import { getType } from '../openApi';\nimport { refParametersPartial, refSchemasPartial } from './const';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { cleanAndTransformTypeName } from './transform';\n\nexport const getParametersMeta = (definitionName: string) => {\n  const definitionType = getType({ type: definitionName });\n  /**\n   * Prefix parameter names to avoid name conflicts with schemas.\n   * Assuming people are mostly interested in importing schema types\n   * and don't care about this name as much. It should be resolved in\n   * a cleaner way, there just isn't a good deduplication strategy\n   * today. This is a workaround in the meantime, hopefully reducing\n   * the chance of conflicts.\n   *\n   * Example where this would break: schema named `ParameterFoo` and\n   * parameter named `Foo` (this would transform to `ParameterFoo`)\n   *\n   * Note: there's a related code to this workaround in `getType()`\n   * method that needs to be cleaned up when this is addressed.\n   */\n  const name = `Parameter${definitionType.base.replace(reservedJavaScriptKeywordsRegExp, '_$1')}`;\n  const meta = {\n    $ref: refParametersPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n\n/**\n * @param definitionName Name of the schema definition in OpenAPI specification.\n * @returns meta object\n */\nexport const getSchemasMeta = (definitionName: string) => {\n  const name = cleanAndTransformTypeName(definitionName);\n  const meta = {\n    $ref: refSchemasPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n","import { compiler, type Property, type TypeNode } from '../compiler';\nimport type { Model } from '../openApi';\nimport { sanitizeOperationParameterName } from '../openApi';\nimport type { Client } from '../types/client';\nimport { getConfig, isLegacyClient } from './config';\nimport { refSchemasPartial } from './const';\nimport { enumValue } from './enum';\nimport { escapeComment, escapeName, unescapeName } from './escape';\nimport { getSchemasMeta } from './meta';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\nexport const isModelDate = (model: Model): boolean =>\n  model.format === 'date' || model.format === 'date-time';\n\nconst base = (model: Model) => {\n  const config = getConfig();\n\n  if (model.base === 'binary') {\n    return compiler.typeUnionNode({\n      types: ['Blob', 'File'],\n    });\n  }\n\n  if (config.plugins['@hey-api/transformers']?.dates && isModelDate(model)) {\n    return compiler.typeNode('Date');\n  }\n\n  return compiler.typeNode(model.base);\n};\n\nconst typeReference = (model: Model) => {\n  // nullable is false when base is null to avoid duplicate null statements\n  const isNullable = model.base === 'null' ? false : model.isNullable;\n  let typeNode = base(model);\n  /**\n   * special handling for single reference. The current approach didn't handle\n   * transformed names, this fixes that. We should add a more robust solution,\n   * but this will work for now.\n   * {@link https://github.com/hey-api/openapi-ts/issues/768}\n   */\n  if (model.export === 'reference' && model.$refs.length === 1) {\n    if (model.$refs[0]!.startsWith(refSchemasPartial)) {\n      const meta = getSchemasMeta(model.base);\n      typeNode = compiler.typeNode(meta.name);\n    }\n  }\n  const unionNode = compiler.typeUnionNode({\n    isNullable,\n    types: [typeNode],\n  });\n  return unionNode;\n};\n\nconst typeArray = (model: Model) => {\n  if (model.link) {\n    // We treat an array of `model.link` as constant size array definition.\n    if (Array.isArray(model.link)) {\n      const types = model.link.map((m) => toType(m));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    // Special case where we use tuple to define constant size array.\n    if (\n      model.export === 'array' &&\n      model.maxItems &&\n      model.minItems &&\n      model.maxItems === model.minItems &&\n      model.maxItems <= 100\n    ) {\n      const types = Array(model.maxItems).fill(toType(model.link));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    return compiler.typeArrayNode([toType(model.link)], model.isNullable);\n  }\n\n  return compiler.typeArrayNode([base(model)], model.isNullable);\n};\n\nconst typeEnum = (model: Model) => {\n  const values = model.enum.map((enumerator) => enumValue(enumerator.value));\n  return compiler.typeUnionNode({\n    isNullable: model.isNullable,\n    types: values,\n  });\n};\n\nconst typeDict = (model: Model) => {\n  const type =\n    model.link && !Array.isArray(model.link) ? toType(model.link) : base(model);\n  return compiler.typeRecordNode(['string'], [type], model.isNullable, true);\n};\n\nconst typeUnionOrIntersection = ({\n  model,\n  style,\n}: {\n  model: Model;\n  style: 'intersection' | 'union';\n}) => {\n  const types = model.properties\n    .map((model) => {\n      const str = compiler.nodeToString({\n        node: toType(model),\n        unescape: true,\n      });\n      return str;\n    })\n    .filter(unique);\n\n  const node =\n    style === 'union'\n      ? compiler.typeUnionNode({\n          // avoid printing duplicate null statements\n          isNullable:\n            model.isNullable &&\n            !model.properties.find((property) => property.isNullable),\n          types,\n        })\n      : compiler.typeIntersectionNode({\n          isNullable: model.isNullable,\n          types,\n        });\n\n  // top-level models don't need parentheses around them\n  if (model.meta) {\n    return node;\n  }\n\n  return compiler.typeParenthesizedNode({\n    type: node,\n  });\n};\n\nconst typeInterface = (model: Model) => {\n  if (!model.properties.length) {\n    return compiler.typeNode('unknown');\n  }\n\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const properties: Property[] = model.properties.map((property) => {\n    let maybeRequired = property.isRequired ? '' : '?';\n    let value = toType(property);\n    let name = !isLegacy\n      ? escapeName(unescapeName(transformTypeKeyName(property.name)))\n      : // special test for 1XX status codes. We need a more robust system\n        // for escaping values depending on context in which they're printed,\n        // but since this works for client packages, it's not worth it right now\n        /^\\dXX$/.test(property.name)\n        ? escapeName(property.name)\n        : property.name;\n    // special case for additional properties type\n    if (property.name === '[key: string]') {\n      name = property.name;\n      if (maybeRequired) {\n        maybeRequired = '';\n        value = compiler.typeUnionNode({\n          types: [value, 'undefined'],\n        });\n      }\n    }\n    return {\n      comment: [\n        property.description && escapeComment(property.description),\n        property.deprecated && '@deprecated',\n      ],\n      isReadOnly: property.isReadOnly,\n      isRequired: maybeRequired === '',\n      name,\n      type: value,\n    };\n  });\n\n  return compiler.typeInterfaceNode({\n    isNullable: model.isNullable,\n    properties,\n    useLegacyResolution: true,\n  });\n};\n\nexport const toType = (model: Model): TypeNode => {\n  switch (model.export) {\n    case 'all-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'intersection',\n      });\n    case 'any-of':\n    case 'one-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'union',\n      });\n    case 'array':\n      return typeArray(model);\n    case 'dictionary':\n      return typeDict(model);\n    case 'enum':\n      return typeEnum(model);\n    case 'interface':\n      return typeInterface(model);\n    case 'const':\n    case 'generic':\n    case 'reference':\n    default:\n      return typeReference(model);\n  }\n};\n\nexport interface SetUniqueTypeNameResult {\n  /**\n   * Did this function add a new property to the `client.types` object?\n   */\n  created: boolean;\n  /**\n   * Unique name for the exported type.\n   */\n  name: string;\n}\n\n/**\n * Generates a unique name for the exported type for given model meta.\n * @param args.client Internal client instance\n * @param args.count Unique key for deduplication\n * @param args.create If a name record does not exist, should it be created?\n * @param args.meta Meta property from the model\n * @param args.nameTransformer Function for transforming name into the final\n * value. In different contexts, a different strategy might be used. For\n * example, slashes `/` are invalid in TypeScript identifiers, but okay in\n * a JavaScript object key name.\n * @returns {SetUniqueTypeNameResult}\n */\nexport const setUniqueTypeName = ({\n  client,\n  count = 1,\n  create = false,\n  meta,\n  nameTransformer,\n}: Pick<Required<Model>, 'meta'> & {\n  client: Client;\n  count?: number;\n  create?: boolean;\n  nameTransformer?: (value: string) => string;\n}): SetUniqueTypeNameResult => {\n  let result: SetUniqueTypeNameResult = {\n    created: false,\n    name: '',\n  };\n  let name = meta.name;\n  if (nameTransformer) {\n    name = nameTransformer(name);\n  }\n  if (count > 1) {\n    name = `${name}${count}`;\n  }\n  const type = client.types[name];\n  if (!type) {\n    if (create) {\n      client.types[name] = meta;\n      result = {\n        created: true,\n        name,\n      };\n    }\n  } else if (type.$ref === meta.$ref) {\n    result = {\n      created: false,\n      name,\n    };\n  } else {\n    result = setUniqueTypeName({\n      client,\n      count: count + 1,\n      create,\n      meta,\n      nameTransformer,\n    });\n  }\n  return result;\n};\n\nexport interface UnsetUniqueTypeNameResult {\n  /**\n   * Did this function delete a property from the `client.types` object?\n   */\n  deleted: boolean;\n  /**\n   * Unique name removed from the `client.types` object.\n   */\n  name: string;\n}\n\nexport const unsetUniqueTypeName = ({\n  client,\n  name,\n}: {\n  client: Client;\n  name: string;\n}): UnsetUniqueTypeNameResult => {\n  let result: UnsetUniqueTypeNameResult = {\n    deleted: false,\n    name: '',\n  };\n  if (!client.types[name]) {\n    return result;\n  }\n  delete client.types[name];\n  result = {\n    deleted: true,\n    name,\n  };\n  return result;\n};\n\n/**\n * Replaces any invalid characters from a parameter name.\n * For example: 'filter.someProperty' becomes 'filterSomeProperty'.\n */\nexport const transformTypeKeyName = (value: string): string => {\n  const config = getConfig();\n\n  // transform only for legacy clients\n  if (!isLegacyClient(config)) {\n    return value;\n  }\n\n  const name = stringCase({\n    case: 'camelCase',\n    value: sanitizeOperationParameterName(value),\n  }).replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return name;\n};\n","import type { Config } from '../../../types/config';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformTypeKeyName } from '../../../utils/type';\nimport type {\n  OperationParameter,\n  OperationResponse,\n} from '../interfaces/client';\nimport { sanitizeNamespaceIdentifier } from './sanitize';\n\nexport const getOperationKey = (operation: {\n  method: string;\n  path: string;\n}) => {\n  const operationKey = `${operation.method.toUpperCase()} ${operation.path}`;\n  return operationKey;\n};\n\nexport const getOperationResponseHeader = (\n  operationResponses: OperationResponse[],\n): string | null => {\n  const header = operationResponses.find(\n    (operationResponses) => operationResponses.in === 'header',\n  );\n  if (header) {\n    return header.name;\n  }\n  return null;\n};\n\n/**\n * Does this operation have at least one required parameter?\n * @returns boolean\n */\nexport const isOperationParameterRequired = (\n  parameters: OperationParameter[],\n) => {\n  const isRequired = parameters.some((parameter) => parameter.isRequired);\n  return isRequired;\n};\n\n/**\n * Attempts to parse response status code from string into number.\n * @param value string status code from OpenAPI definition\n * @returns Parsed status code or null if invalid value\n */\nexport const parseResponseStatusCode = (\n  value: string,\n): OperationResponse['code'] | null => {\n  if (value === 'default') {\n    return 'default';\n  }\n\n  if (value === '1XX') {\n    return '1XX';\n  }\n\n  if (value === '2XX') {\n    return '2XX';\n  }\n\n  if (value === '3XX') {\n    return '3XX';\n  }\n\n  if (value === '4XX') {\n    return '4XX';\n  }\n\n  if (value === '5XX') {\n    return '5XX';\n  }\n\n  if (/\\d{3}/g.test(value)) {\n    const code = Number.parseInt(value, 10);\n    if (code >= 100 && code < 600) {\n      return code;\n    }\n  }\n\n  return null;\n};\n\nexport const sorterByResponseStatusCode = (\n  a: OperationResponse,\n  b: OperationResponse,\n) => {\n  if (a.code > b.code) {\n    return 1;\n  }\n\n  if (a.code < b.code) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst isErrorStatusCode = (code: OperationResponse['code']) =>\n  code === '3XX' ||\n  code === '4XX' ||\n  code === '5XX' ||\n  (typeof code === 'number' && code >= 300);\n\nconst isSuccessStatusCode = (code: OperationResponse['code']) =>\n  code === '2XX' || (typeof code === 'number' && code >= 200 && code < 300);\n\n/**\n * Detects whether default response is meant to be used\n * for error or success response.\n */\nconst inferDefaultResponseTypes = (\n  response: OperationResponse,\n  responses: OperationResponse[],\n) => {\n  let types: Array<'error' | 'success'> = [];\n\n  const addResponseType = (type: (typeof types)[number]) => {\n    if (!types.includes(type)) {\n      types = [...types, type];\n    }\n  };\n\n  const hasSuccessResponse = responses.some(({ code }) =>\n    isSuccessStatusCode(code),\n  );\n  if (!hasSuccessResponse) {\n    addResponseType('success');\n  }\n\n  const description = (response.description ?? '').toLocaleLowerCase();\n  const $refs = response.$refs.join('|').toLocaleLowerCase();\n\n  // must be in lowercase\n  const errorKeywords = ['error', 'problem'];\n  const successKeywords = ['success'];\n\n  if (\n    successKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('success');\n  }\n\n  if (\n    errorKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('error');\n  }\n\n  if (!types.length) {\n    addResponseType('error');\n  }\n\n  return types;\n};\n\nexport const operationFilterFn = ({\n  config,\n  operationKey,\n}: {\n  config: Config;\n  operationKey: string;\n}): boolean => {\n  const regexp = config.plugins['@hey-api/sdk']?.filter\n    ? new RegExp(config.plugins['@hey-api/sdk']?.filter)\n    : undefined;\n  return !regexp || regexp.test(operationKey);\n};\n\n/**\n * Convert the input value to a correct operation (method) class name.\n * This will use the operation ID - if available - and otherwise fallback\n * on a generated name from the URL\n */\nexport const operationNameFn = ({\n  config,\n  method,\n  operationId,\n  path,\n}: {\n  config: Config;\n  method: string;\n  operationId: string | undefined;\n  path: string;\n}): string => {\n  if (config.plugins['@hey-api/sdk']?.operationId && operationId) {\n    return stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(operationId),\n    });\n  }\n\n  let urlWithoutPlaceholders = path;\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  if (isLegacyClient(config)) {\n    urlWithoutPlaceholders = urlWithoutPlaceholders.replace(\n      /[^/]*?{api-version}.*?\\//g,\n      '',\n    );\n  }\n\n  urlWithoutPlaceholders = urlWithoutPlaceholders\n    .replace(/{(.*?)}/g, 'by-$1')\n    // replace slashes with hyphens for camelcase method at the end\n    .replace(/[/:+]/g, '-');\n\n  return stringCase({\n    case: 'camelCase',\n    value: `${method}-${urlWithoutPlaceholders}`,\n  });\n};\n\nexport const operationParameterFilterFn = (\n  parameter: OperationParameter,\n): boolean => {\n  const config = getConfig();\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  return !isLegacyClient(config) || parameter.prop !== 'api-version';\n};\n\nexport const operationParameterNameFn = (\n  parameter: Omit<OperationParameter, 'name'>,\n): string => {\n  const config = getConfig();\n\n  return !isLegacyClient(config)\n    ? parameter.prop\n    : transformTypeKeyName(parameter.prop);\n};\n\nexport const tagResponseTypes = (responses: OperationResponse[]) =>\n  responses.map((response) => {\n    const { code } = response;\n    if (code === 'default') {\n      response.responseTypes = inferDefaultResponseTypes(response, responses);\n    } else if (isSuccessStatusCode(code)) {\n      response.responseTypes = ['success'];\n    } else if (isErrorStatusCode(code)) {\n      response.responseTypes = ['error'];\n    }\n    return response;\n  });\n","import { IRContext } from '../ir/context';\nimport type { IR } from '../ir/types';\nimport type { Config } from '../types/config';\nimport { parseV2_0_X } from './2.0.x';\nimport { parseV3_0_X } from './3.0.x';\nimport { parseV3_1_X } from './3.1.x';\nimport type { Client } from './common/interfaces/client';\nimport type { OpenApi as LegacyOpenApi } from './common/interfaces/OpenApi';\nimport type { OpenApi } from './types';\nimport { parse as parseV2 } from './v2';\nimport { parse as parseV3 } from './v3';\n\nexport type {\n  Client,\n  Enum,\n  Method,\n  Model,\n  ModelMeta,\n  Operation,\n  OperationParameter,\n  OperationResponse,\n} from './common/interfaces/client';\nexport type { OpenApi } from './common/interfaces/OpenApi';\nexport { isOperationParameterRequired } from './common/parser/operation';\nexport {\n  ensureValidTypeScriptJavaScriptIdentifier,\n  sanitizeNamespaceIdentifier,\n  sanitizeOperationParameterName,\n} from './common/parser/sanitize';\nexport { getType } from './common/parser/type';\nexport type { OpenApiSchema as OpenApiV2Schema } from './v2/interfaces/OpenApiSchema';\nexport type { OpenApiSchema as OpenApiV3Schema } from './v3/interfaces/OpenApiSchema';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, services and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport function parseLegacy({\n  openApi,\n}: {\n  openApi: unknown;\n}): Omit<Client, 'config'> {\n  const spec = openApi as LegacyOpenApi;\n\n  if ('openapi' in spec) {\n    return parseV3(spec);\n  }\n\n  if ('swagger' in spec) {\n    return parseV2(spec);\n  }\n\n  throw new Error(\n    `Unsupported OpenAPI specification: ${JSON.stringify(spec, null, 2)}`,\n  );\n}\n\n/**\n * @internal\n * Parse the resolved OpenAPI specification. This will populate and return\n * `context` with intermediate representation obtained from the parsed spec.\n */\nexport const parseOpenApiSpec = ({\n  config,\n  spec,\n}: {\n  config: Config;\n  spec: unknown;\n}): IR.Context | undefined => {\n  const context = new IRContext({\n    config,\n    spec: spec as OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n  });\n\n  if ('swagger' in context.spec) {\n    parseV2_0_X(context as IR.Context<OpenApi.V2_0_X>);\n    return context;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      parseV3_0_X(context as IR.Context<OpenApi.V3_0_X>);\n      return context;\n    case '3.1.0':\n    case '3.1.1':\n      parseV3_1_X(context as IR.Context<OpenApi.V3_1_X>);\n      return context;\n    default:\n      break;\n  }\n\n  throw new Error('Unsupported OpenAPI specification');\n};\n","import { compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { OpenApiV2Schema, OpenApiV3Schema } from '../../../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../../../openApi';\nimport { getConfig } from '../../../utils/config';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst ensureValidSchemaOutput = (\n  schema: unknown,\n  parentKey?: string,\n): object => {\n  const config = getConfig();\n\n  if (Array.isArray(schema)) {\n    return schema.map((item) => ensureValidSchemaOutput(item));\n  }\n\n  if (typeof schema !== 'object' || schema === null) {\n    return schema as object;\n  }\n\n  const result = { ...schema };\n  Object.entries(result).forEach(([key, value]) => {\n    if (config.plugins['@hey-api/schemas']?.type === 'form') {\n      if (\n        [\n          'description',\n          'x-enum-descriptions',\n          'x-enum-varnames',\n          'x-enumNames',\n          'title',\n        ].includes(key) &&\n        parentKey !== 'properties'\n      ) {\n        // @ts-expect-error\n        delete result[key];\n        return;\n      }\n    }\n\n    // refs are encoded probably by json-schema-ref-parser, didn't investigate\n    // further\n    if (key === '$ref' && typeof value === 'string') {\n      // @ts-expect-error\n      result[key] = decodeURIComponent(value);\n    }\n\n    if (value && typeof value === 'object') {\n      // @ts-expect-error\n      result[key] = ensureValidSchemaOutput(value, key);\n    }\n  });\n  return result;\n};\n\nconst toSchemaName = (\n  name: string,\n  schema: OpenApiV2Schema | OpenApiV3Schema,\n): string => {\n  const config = getConfig();\n\n  const validName = ensureValidTypeScriptJavaScriptIdentifier(name);\n\n  if (config.plugins['@hey-api/schemas']?.nameBuilder) {\n    return config.plugins['@hey-api/schemas'].nameBuilder(validName, schema);\n  }\n\n  return `${validName}Schema`;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  files,\n  openApi,\n}) => {\n  const config = getConfig();\n\n  files.schemas = new TypeScriptFile({\n    dir: config.output.path,\n    id: 'schemas',\n    name: 'schemas.ts',\n  });\n\n  const addSchema = (\n    name: string,\n    schema: OpenApiV2Schema | OpenApiV3Schema,\n  ) => {\n    const obj = ensureValidSchemaOutput(schema);\n    const expression = compiler.objectExpression({ obj });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression,\n      name: toSchemaName(name, schema),\n    });\n    files.schemas!.add(statement);\n  };\n\n  // OpenAPI 2.0\n  if ('swagger' in openApi) {\n    Object.entries(openApi.definitions ?? {}).forEach(([name, definition]) => {\n      addSchema(name, definition);\n    });\n  }\n\n  // OpenAPI 3.x\n  if ('openapi' in openApi) {\n    Object.entries(openApi.components?.schemas ?? {}).forEach(\n      ([name, schema]) => {\n        addSchema(name, schema);\n      },\n    );\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  name: '@hey-api/schemas',\n  nameBuilder: (name) => `${name}Schema`,\n  output: 'schemas',\n  type: 'json',\n};\n\n/**\n * Type helper for `@hey-api/schemas` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Pagination } from './pagination';\nimport type { IR } from './types';\n\nexport const hasParameterGroupObjectRequired = (\n  parameterGroup?: Record<string, IR.ParameterObject>,\n): boolean => {\n  for (const name in parameterGroup) {\n    if (parameterGroup[name]!.required) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const hasParametersObjectRequired = (\n  parameters: IR.ParametersObject | undefined,\n): boolean => {\n  if (!parameters) {\n    return false;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.cookie)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.header)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.path)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.query)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const parameterWithPagination = (\n  parameters: IR.ParametersObject | undefined,\n): Pagination | undefined => {\n  if (!parameters) {\n    return;\n  }\n\n  for (const name in parameters.cookie) {\n    const parameter = parameters.cookie[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.header) {\n    const parameter = parameters.header[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.path) {\n    const parameter = parameters.path[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.query) {\n    const parameter = parameters.query[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n};\n","import type { IR } from './types';\n\n/**\n * Ensure we don't produce redundant types, e.g. string | string.\n */\nexport const deduplicateSchema = <T extends IR.SchemaObject>({\n  schema,\n}: {\n  schema: T;\n}): T => {\n  if (!schema.items) {\n    return schema;\n  }\n\n  const uniqueItems: Array<IR.SchemaObject> = [];\n  const typeIds: Array<string> = [];\n\n  for (const item of schema.items) {\n    // skip nested schemas for now, handle if necessary\n    if ((!item.type && item.items) || schema.type === 'tuple') {\n      uniqueItems.push(item);\n      continue;\n    }\n\n    if (\n      // no `type` might still include `$ref` or `const`\n      !item.type ||\n      item.type === 'boolean' ||\n      item.type === 'integer' ||\n      item.type === 'null' ||\n      item.type === 'number' ||\n      item.type === 'string' ||\n      item.type === 'unknown' ||\n      item.type === 'void'\n    ) {\n      // const needs namespace to handle empty string values, otherwise\n      // fallback would equal an actual value and we would skip an item\n      const typeId = `${item.$ref ?? ''}${item.type ?? ''}${item.const !== undefined ? `const-${item.const}` : ''}`;\n      if (!typeIds.includes(typeId)) {\n        typeIds.push(typeId);\n        uniqueItems.push(item);\n      }\n      continue;\n    }\n\n    uniqueItems.push(item);\n  }\n\n  schema.items = uniqueItems;\n\n  if (\n    schema.items.length <= 1 &&\n    schema.type !== 'array' &&\n    schema.type !== 'enum' &&\n    schema.type !== 'tuple'\n  ) {\n    // bring the only item up to clean up the schema\n    const liftedSchema = schema.items[0];\n    delete schema.logicalOperator;\n    delete schema.items;\n    schema = {\n      ...schema,\n      ...liftedSchema,\n    };\n  }\n\n  // exclude unknown if it's the only type left\n  if (schema.type === 'unknown') {\n    return {} as T;\n  }\n\n  return schema;\n};\n","import type { Pagination } from './pagination';\nimport {\n  hasParametersObjectRequired,\n  parameterWithPagination,\n} from './parameter';\nimport { deduplicateSchema } from './schema';\nimport type { IR } from './types';\nimport { addItemsToSchema } from './utils';\n\nexport const hasOperationDataRequired = (\n  operation: IR.OperationObject,\n): boolean => {\n  if (hasParametersObjectRequired(operation.parameters)) {\n    return true;\n  }\n\n  if (operation.body?.required) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const operationPagination = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Pagination | undefined => {\n  const body = operation.body;\n\n  if (!body || !body.pagination) {\n    return parameterWithPagination(operation.parameters);\n  }\n\n  if (body.pagination === true) {\n    return {\n      in: 'body',\n      name: 'body',\n      schema: body.schema,\n    };\n  }\n\n  const schema = body.schema;\n  const resolvedSchema = schema.$ref\n    ? context.resolveIrRef<IR.RequestBodyObject | IR.SchemaObject>(schema.$ref)\n    : schema;\n\n  const finalSchema =\n    'schema' in resolvedSchema ? resolvedSchema.schema : resolvedSchema;\n  const paginationProp = finalSchema?.properties?.[body.pagination];\n\n  if (!paginationProp) {\n    return parameterWithPagination(operation.parameters);\n  }\n\n  return {\n    in: 'body',\n    name: body.pagination,\n    schema: paginationProp,\n  };\n};\n\ntype StatusGroup = '1XX' | '2XX' | '3XX' | '4XX' | '5XX' | 'default';\n\nexport const statusCodeToGroup = ({\n  statusCode,\n}: {\n  statusCode: string;\n}): StatusGroup => {\n  switch (statusCode) {\n    case '1XX':\n      return '1XX';\n    case '2XX':\n      return '2XX';\n    case '3XX':\n      return '3XX';\n    case '4XX':\n      return '4XX';\n    case '5XX':\n      return '5XX';\n    case 'default':\n      return 'default';\n    default:\n      return `${statusCode[0]}XX` as StatusGroup;\n  }\n};\n\ninterface OperationResponsesMap {\n  /**\n   * A deduplicated union of all error types. Unknown types are omitted.\n   */\n  error?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each error type.\n   */\n  errors?: IR.SchemaObject;\n  /**\n   * A deduplicated union of all response types. Unknown types are omitted.\n   */\n  response?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each response type.\n   */\n  responses?: IR.SchemaObject;\n}\n\nexport const operationResponsesMap = (\n  operation: IR.OperationObject,\n): OperationResponsesMap => {\n  const result: OperationResponsesMap = {};\n\n  if (!operation.responses) {\n    return result;\n  }\n\n  const errors: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  const responses: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  // store default response to be evaluated last\n  let defaultResponse: IR.ResponseObject | undefined;\n\n  for (const name in operation.responses) {\n    const response = operation.responses[name]!;\n\n    switch (statusCodeToGroup({ statusCode: name })) {\n      case '1XX':\n      case '3XX':\n        // TODO: parser - handle informational and redirection status codes\n        break;\n      case '2XX':\n        responses.properties[name] = response.schema;\n        break;\n      case '4XX':\n      case '5XX':\n        errors.properties[name] = response.schema;\n        break;\n      case 'default':\n        defaultResponse = response;\n        break;\n    }\n  }\n\n  // infer default response type\n  if (defaultResponse) {\n    let inferred = false;\n\n    // assume default is intended for success if none exists yet\n    if (!Object.keys(responses.properties).length) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    const description = (\n      defaultResponse.schema.description ?? ''\n    ).toLocaleLowerCase();\n    const $ref = (defaultResponse.schema.$ref ?? '').toLocaleLowerCase();\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const successKeywords = ['success'];\n    if (\n      successKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const errorKeywords = ['error', 'problem'];\n    if (\n      errorKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      errors.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // if no keyword match, assume default schema is intended for error\n    if (!inferred) {\n      errors.properties.default = defaultResponse.schema;\n    }\n  }\n\n  const errorKeys = Object.keys(errors.properties);\n  if (errorKeys.length) {\n    errors.required = errorKeys;\n    result.errors = errors;\n\n    let errorUnion = addItemsToSchema({\n      items: Object.values(errors.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    errorUnion = deduplicateSchema({ schema: errorUnion });\n    if (Object.keys(errorUnion).length && errorUnion.type !== 'unknown') {\n      result.error = errorUnion;\n    }\n  }\n\n  const responseKeys = Object.keys(responses.properties);\n  if (responseKeys.length) {\n    responses.required = responseKeys;\n    result.responses = responses;\n\n    let responseUnion = addItemsToSchema({\n      items: Object.values(responses.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    responseUnion = deduplicateSchema({ schema: responseUnion });\n    if (Object.keys(responseUnion).length && responseUnion.type !== 'unknown') {\n      result.response = responseUnion;\n    }\n  }\n\n  return result;\n};\n","import type { Client as ParserClient, Model } from '../openApi';\nimport { sanitizeNamespaceIdentifier } from '../openApi';\nimport type { Client, Operation, Service } from '../types/client';\nimport type { Config } from '../types/config';\nimport { getConfig, legacyNameFromConfig } from './config';\nimport { sort } from './sort';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\n/**\n * Post process client\n * @param client Client object with all the models, services, etc.\n */\nexport function postProcessClient(\n  client: Omit<ParserClient, 'config'>,\n  config: Config,\n): Client {\n  return {\n    ...client,\n    config,\n    models: client.models.map((model) => postProcessModel(model)),\n    services: postProcessOperations(client.operations).map(postProcessService),\n    types: {},\n  };\n}\n\nconst postProcessModel = (model: Model): Model => ({\n  ...model,\n  $refs: model.$refs.filter((value, index, arr) => unique(value, index, arr)),\n  enum: model.enum.filter(\n    (value, index, arr) =>\n      arr.findIndex((item) => item.value === value.value) === index,\n  ),\n  enums: model.enums.filter(\n    (value, index, arr) =>\n      arr.findIndex((item) => item.name === value.name) === index,\n  ),\n  imports: model.imports\n    .filter(\n      (value, index, arr) => unique(value, index, arr) && value !== model.name,\n    )\n    .sort(sort),\n});\n\nconst postProcessOperations = (\n  operations: ParserClient['operations'],\n): Client['services'] => {\n  const config = getConfig();\n\n  const services = new Map<string, Service>();\n\n  operations.forEach((parserOperation) => {\n    const tags =\n      parserOperation.tags?.length &&\n      (config.plugins['@hey-api/sdk']?.asClass || legacyNameFromConfig(config))\n        ? parserOperation.tags.filter(unique)\n        : ['Default'];\n    tags.forEach((tag) => {\n      const operation: Operation = {\n        ...parserOperation,\n        service: getServiceName(tag),\n      };\n      const service =\n        services.get(operation.service) || getNewService(operation);\n      service.$refs = [...service.$refs, ...operation.$refs];\n      service.imports = [...service.imports, ...operation.imports];\n      service.operations = [...service.operations, operation];\n      services.set(operation.service, service);\n    });\n  });\n\n  return Array.from(services.values());\n};\n\nconst postProcessService = (service: Service): Service => {\n  const clone = { ...service };\n  clone.operations = postProcessServiceOperations(clone);\n  clone.operations.forEach((operation) => {\n    clone.imports.push(...operation.imports);\n  });\n  clone.imports = clone.imports.filter(unique).sort(sort);\n  return clone;\n};\n\nconst postProcessServiceOperations = (service: Service): Operation[] => {\n  const names = new Map<string, number>();\n\n  return service.operations.map((operation) => {\n    const clone = { ...operation };\n\n    // Parse the service parameters and successes, very similar to how we parse\n    // properties of models. These methods will extend the type if needed.\n    clone.imports.push(\n      ...clone.parameters.flatMap((parameter) => parameter.imports),\n    );\n    const successResponses = clone.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    clone.imports.push(...successResponses.flatMap((result) => result.imports));\n\n    // Check if the operation name is unique, if not then prefix this with a number\n    const name = clone.name;\n    const index = names.get(name) || 0;\n    if (index > 0) {\n      clone.name = `${name}${index}`;\n    }\n    names.set(name, index + 1);\n\n    return clone;\n  });\n};\n\nexport const getNewService = (operation: Operation): Service => ({\n  $refs: [],\n  imports: [],\n  name: operation.service,\n  operations: [],\n});\n\n/**\n * Convert the input value to a correct service name. This converts\n * the input string to PascalCase.\n */\nexport const getServiceName = (value: string): string =>\n  stringCase({\n    case: 'PascalCase',\n    value: sanitizeNamespaceIdentifier(value),\n  });\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport { numberRegExp } from '../../utils/regexp';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface Result {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n}\n\nexport const zodId = 'zod';\n\n// frequently used identifiers\nconst andIdentifier = compiler.identifier({ text: 'and' });\nconst coerceIdentifier = compiler.identifier({ text: 'coerce' });\nconst defaultIdentifier = compiler.identifier({ text: 'default' });\nconst intersectionIdentifier = compiler.identifier({ text: 'intersection' });\nconst lazyIdentifier = compiler.identifier({ text: 'lazy' });\nconst lengthIdentifier = compiler.identifier({ text: 'length' });\nconst literalIdentifier = compiler.identifier({ text: 'literal' });\nconst maxIdentifier = compiler.identifier({ text: 'max' });\nconst minIdentifier = compiler.identifier({ text: 'min' });\nconst objectIdentifier = compiler.identifier({ text: 'object' });\nconst optionalIdentifier = compiler.identifier({ text: 'optional' });\nconst readonlyIdentifier = compiler.identifier({ text: 'readonly' });\nconst regexIdentifier = compiler.identifier({ text: 'regex' });\nconst unionIdentifier = compiler.identifier({ text: 'union' });\nconst zIdentifier = compiler.identifier({ text: 'z' });\n\nconst nameTransformer = (name: string) => `z-${name}`;\n\nconst arrayTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: SchemaWithType<'array'>;\n}): ts.CallExpression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: zIdentifier,\n    name: compiler.identifier({ text: 'array' }),\n  });\n\n  let arrayExpression: ts.CallExpression | undefined;\n\n  if (!schema.items) {\n    arrayExpression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToZodSchema({\n          context,\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) =>\n      schemaToZodSchema({\n        context,\n        result,\n        schema: item,\n      }),\n    );\n\n    if (itemExpressions.length === 1) {\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      // TODO: parser - handle union\n      // return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemExpressions }));\n\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: [\n          unknownTypeToZodSchema({\n            context,\n            schema: {\n              type: 'unknown',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    arrayExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: arrayExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n  } else {\n    if (schema.minItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n    }\n\n    if (schema.maxItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n    }\n  }\n\n  return arrayExpression;\n};\n\nconst booleanTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'boolean' }),\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  let isNullable = false;\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    } else if (item.type === 'null' || item.const === null) {\n      isNullable = true;\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToZodSchema({\n      context,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  let enumExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'enum' }),\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  if (isNullable) {\n    enumExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: enumExpression,\n        name: compiler.identifier({ text: 'nullable' }),\n      }),\n    });\n  }\n\n  return enumExpression;\n};\n\nconst neverTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'never'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'never' }),\n    }),\n  });\n  return expression;\n};\n\nconst nullTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'null'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'null' }),\n    }),\n  });\n  return expression;\n};\n\nconst numberParameter = ({\n  isBigInt,\n  value,\n}: {\n  isBigInt: boolean;\n  value: number;\n}) => {\n  const expression = compiler.valueToExpression({ value });\n\n  if (isBigInt) {\n    return compiler.callExpression({\n      functionName: 'BigInt',\n      parameters: [expression],\n    });\n  }\n\n  return expression;\n};\n\nconst numberTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  let numberExpression = compiler.callExpression({\n    functionName: isBigInt\n      ? compiler.propertyAccessExpression({\n          expression: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: coerceIdentifier,\n          }),\n          name: compiler.identifier({ text: 'bigint' }),\n        })\n      : compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: compiler.identifier({ text: 'number' }),\n        }),\n  });\n\n  if (!isBigInt && schema.type === 'integer') {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'int' }),\n      }),\n    });\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMinimum }),\n      ],\n    });\n  } else if (schema.minimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.minimum })],\n    });\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMaximum }),\n      ],\n    });\n  } else if (schema.maximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.maximum })],\n    });\n  }\n\n  return numberExpression;\n};\n\nconst objectTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: SchemaWithType<'object'>;\n}): {\n  anyType: string;\n  expression: ts.CallExpression;\n} => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  // let indexProperty: Property | undefined;\n  // const schemaProperties: Array<Property> = [];\n  // let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  // let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const propertyExpression = schemaToZodSchema({\n      context,\n      optional: !isRequired,\n      result,\n      schema: property,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName;\n    if (numberRegExp.test(name)) {\n      // For numeric literals, we'll handle negative numbers by using a string literal\n      // instead of trying to use a PrefixUnaryExpression\n      propertyName = name.startsWith('-')\n        ? ts.factory.createStringLiteral(name)\n        : ts.factory.createNumericLiteral(name);\n    } else {\n      propertyName = name;\n    }\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: propertyExpression,\n        name: propertyName,\n      }),\n    );\n\n    // indexPropertyItems.push(property);\n    // if (!isRequired) {\n    //   hasOptionalProperties = true;\n    // }\n  }\n\n  // if (\n  //   schema.additionalProperties &&\n  //   (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  // ) {\n  //   if (schema.additionalProperties.type === 'never') {\n  //     indexPropertyItems = [schema.additionalProperties];\n  //   } else {\n  //     indexPropertyItems.unshift(schema.additionalProperties);\n  //   }\n\n  //   if (hasOptionalProperties) {\n  //     indexPropertyItems.push({\n  //       type: 'undefined',\n  //     });\n  //   }\n\n  //   indexProperty = {\n  //     isRequired: true,\n  //     name: 'key',\n  //     type: schemaToZodSchema({\n  //       context,\n  //       schema:\n  //         indexPropertyItems.length === 1\n  //           ? indexPropertyItems[0]\n  //           : {\n  //               items: indexPropertyItems,\n  //               logicalOperator: 'or',\n  //             },\n  //     }),\n  //   };\n  // }\n\n  // return compiler.typeInterfaceNode({\n  //   indexProperty,\n  //   properties: schemaProperties,\n  //   useLegacyResolution: false,\n  // });\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: objectIdentifier,\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return {\n    anyType: 'AnyZodObject',\n    expression,\n  };\n};\n\nconst stringTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  let stringExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'string' }),\n    }),\n  });\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date-time':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'datetime' }),\n          }),\n        });\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'ip' }),\n          }),\n        });\n        break;\n      case 'uri':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'url' }),\n          }),\n        });\n        break;\n      case 'date':\n      case 'email':\n      case 'time':\n      case 'uuid':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: schema.format }),\n          }),\n        });\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n  } else {\n    if (schema.minLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n    }\n\n    if (schema.maxLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n    }\n  }\n\n  if (schema.pattern) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: regexIdentifier,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text: schema.pattern })],\n    });\n  }\n\n  return stringExpression;\n};\n\nconst tupleTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'tuple'>;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: literalIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: compiler.identifier({ text: 'tuple' }),\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  // TODO: parser - handle tuple items\n  // const itemTypes: Array<ts.TypeNode> = [];\n\n  // for (const item of schema.items ?? []) {\n  //   itemTypes.push(\n  //     schemaToType({\n  //       context,\n  //       namespace,\n  //       plugin,\n  //       schema: item,\n  //     }),\n  //   );\n  // }\n\n  // return compiler.typeTupleNode({\n  //   types: itemTypes,\n  // });\n\n  return unknownTypeToZodSchema({\n    context,\n    schema: {\n      type: 'unknown',\n    },\n  });\n};\n\nconst undefinedTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'undefined' }),\n    }),\n  });\n  return expression;\n};\n\nconst unknownTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'unknown' }),\n    }),\n  });\n  return expression;\n};\n\nconst voidTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'void'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'void' }),\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: IR.SchemaObject;\n}): {\n  anyType?: string;\n  expression: ts.Expression;\n} => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return {\n        expression: arrayTypeToZodSchema({\n          context,\n          result,\n          schema: schema as SchemaWithType<'array'>,\n        }),\n      };\n    case 'boolean':\n      return {\n        expression: booleanTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'boolean'>,\n        }),\n      };\n    case 'enum':\n      return {\n        expression: enumTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'enum'>,\n        }),\n      };\n    case 'integer':\n    case 'number':\n      return {\n        expression: numberTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'integer' | 'number'>,\n        }),\n      };\n    case 'never':\n      return {\n        expression: neverTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'never'>,\n        }),\n      };\n    case 'null':\n      return {\n        expression: nullTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'null'>,\n        }),\n      };\n    case 'object':\n      return objectTypeToZodSchema({\n        context,\n        result,\n        schema: schema as SchemaWithType<'object'>,\n      });\n    case 'string':\n      return {\n        expression: stringTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'string'>,\n        }),\n      };\n    case 'tuple':\n      return {\n        expression: tupleTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'tuple'>,\n        }),\n      };\n    case 'undefined':\n      return {\n        expression: undefinedTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'undefined'>,\n        }),\n      };\n    case 'unknown':\n      return {\n        expression: unknownTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'unknown'>,\n        }),\n      };\n    case 'void':\n      return {\n        expression: voidTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'void'>,\n        }),\n      };\n  }\n};\n\nconst operationToZodSchema = ({\n  context,\n  operation,\n  result,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  result: Result;\n}) => {\n  if (operation.responses) {\n    const { response } = operationResponsesMap(operation);\n\n    if (response) {\n      schemaToZodSchema({\n        $ref: operationIrRef({\n          case: 'camelCase',\n          id: operation.id,\n          type: 'response',\n        }),\n        context,\n        result,\n        schema: response,\n      });\n    }\n  }\n};\n\nconst schemaToZodSchema = ({\n  $ref,\n  context,\n  optional,\n  result,\n  schema,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  context: IR.Context;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  result: Result;\n  schema: IR.SchemaObject;\n}): ts.Expression => {\n  const file = context.file({ id: zodId })!;\n\n  let anyType: string | undefined;\n  let expression: ts.Expression | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined;\n\n  if ($ref) {\n    result.circularReferenceTracker.add($ref);\n\n    identifier = file.identifier({\n      $ref,\n      create: true,\n      nameTransformer,\n      namespace: 'value',\n    });\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = result.circularReferenceTracker.has(\n      schema.$ref,\n    );\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      expression = schemaToZodSchema({\n        $ref: schema.$ref,\n        context,\n        result,\n        schema: ref,\n      });\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: lazyIdentifier,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        result.hasCircularReference = true;\n      } else {\n        expression = refIdentifier;\n      }\n    }\n  } else if (schema.type) {\n    const zodSchema = schemaTypeToZodSchema({\n      context,\n      result,\n      schema,\n    });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) =>\n        schemaToZodSchema({\n          context,\n          result,\n          schema: item,\n        }),\n      );\n\n      if (schema.logicalOperator === 'and') {\n        const firstSchema = schema.items[0]!;\n        // we want to add an intersection, but not every schema can use the same API.\n        // if the first item contains another array or not an object, we cannot use\n        // `.merge()` as that does not exist on `.union()` and non-object schemas.\n        if (\n          firstSchema.logicalOperator === 'or' ||\n          (firstSchema.type && firstSchema.type !== 'object')\n        ) {\n          expression = compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: zIdentifier,\n              name: intersectionIdentifier,\n            }),\n            parameters: itemTypes,\n          });\n        } else {\n          expression = itemTypes[0];\n          itemTypes.slice(1).forEach((item) => {\n            expression = compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: expression!,\n                name: andIdentifier,\n              }),\n              parameters: [item],\n            });\n          });\n        }\n      } else {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: unionIdentifier,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n      }\n    } else {\n      expression = schemaToZodSchema({\n        context,\n        result,\n        schema,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    const zodSchema = schemaTypeToZodSchema({\n      context,\n      result,\n      schema: {\n        type: 'unknown',\n      },\n    });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n  }\n\n  if ($ref) {\n    result.circularReferenceTracker.delete($ref);\n  }\n\n  if (expression) {\n    if (schema.accessScope === 'read') {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: readonlyIdentifier,\n        }),\n      });\n    }\n\n    if (optional) {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: optionalIdentifier,\n        }),\n      });\n    }\n\n    if (schema.default !== undefined) {\n      const callParameter = compiler.valueToExpression({\n        value: schema.default,\n      });\n      if (callParameter) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression,\n            name: defaultIdentifier,\n          }),\n          parameters: [callParameter],\n        });\n      }\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier && identifier.name && identifier.created) {\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: expression!,\n      name: identifier.name,\n      typeName: result.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: anyType || 'ZodTypeAny',\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n  }\n\n  return expression!;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: zodId,\n    identifierCase: 'camelCase',\n    path: plugin.output,\n  });\n\n  file.import({\n    module: 'zod',\n    name: 'z',\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    operationToZodSchema({\n      context,\n      operation,\n      result,\n    });\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToZodSchema({\n      $ref,\n      context,\n      result,\n      schema,\n    });\n  });\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { typesId } from '../typescript/ref';\nimport type { Config } from './types';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nconst bigIntExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const bigIntCallExpression =\n    dataExpression !== undefined\n      ? compiler.callExpression({\n          functionName: 'BigInt',\n          parameters: [\n            compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: dataExpression,\n                name: 'toString',\n              }),\n            }),\n          ],\n        })\n      : undefined;\n\n  if (bigIntCallExpression) {\n    if (typeof dataExpression === 'string') {\n      return [bigIntCallExpression];\n    }\n\n    if (dataExpression) {\n      return [\n        compiler.assignment({\n          left: dataExpression,\n          right: bigIntCallExpression,\n        }),\n      ];\n    }\n  }\n\n  return [];\n};\n\nconst dateExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const identifierDate = compiler.identifier({ text: 'Date' });\n\n  if (typeof dataExpression === 'string') {\n    return [\n      compiler.newExpression({\n        argumentsArray: [compiler.identifier({ text: dataExpression })],\n        expression: identifierDate,\n      }),\n    ];\n  }\n\n  if (dataExpression) {\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.newExpression({\n          argumentsArray: [dataExpression],\n          expression: identifierDate,\n        }),\n      }),\n    ];\n  }\n\n  return [];\n};\n\nexport const operationTransformerIrRef = ({\n  id,\n  type,\n}: OperationIRRef & {\n  type: 'data' | 'error' | 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'DataResponseTransformer';\n      break;\n    case 'error':\n      affix = 'ErrorResponseTransformer';\n      break;\n    case 'response':\n      affix = 'ResponseTransformer';\n      break;\n  }\n  return `${irRef}${stringCase({\n    // TODO: parser - do not pascalcase for functions, only for types\n    case: 'camelCase',\n    value: id,\n  })}${affix}`;\n};\n\nconst schemaIrRef = ({\n  $ref,\n  type,\n}: {\n  $ref: string;\n  type: 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'response':\n      affix = 'SchemaResponseTransformer';\n      break;\n  }\n  const parts = $ref.split('/');\n  return `${parts.slice(0, parts.length - 1).join('/')}/${stringCase({\n    case: 'camelCase',\n    value: parts[parts.length - 1]!,\n  })}${affix}`;\n};\n\nexport const schemaResponseTransformerRef = ({\n  $ref,\n}: {\n  $ref: string;\n}): string => schemaIrRef({ $ref, type: 'response' });\n\nexport const transformersId = 'transformers';\nconst dataVariableName = 'data';\n\nconst ensureStatements = (\n  nodes: Array<ts.Expression | ts.Statement>,\n): Array<ts.Statement> =>\n  nodes.map((node) =>\n    ts.isStatement(node)\n      ? node\n      : compiler.expressionToStatement({ expression: node }),\n  );\n\nconst isNodeReturnStatement = ({\n  node,\n}: {\n  node: ts.Expression | ts.Statement;\n}) => node.kind === ts.SyntaxKind.ReturnStatement;\n\nconst schemaResponseTransformerNodes = ({\n  context,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const identifierData = compiler.identifier({ text: dataVariableName });\n  const nodes = processSchemaType({\n    context,\n    dataExpression: identifierData,\n    plugin,\n    schema,\n  });\n  // append return statement if one does not already exist\n  if (\n    nodes.length &&\n    !isNodeReturnStatement({ node: nodes[nodes.length - 1]! })\n  ) {\n    nodes.push(compiler.returnStatement({ expression: identifierData }));\n  }\n  return nodes;\n};\n\nconst processSchemaType = ({\n  context,\n  dataExpression,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  dataExpression?: ts.Expression | string;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const file = context.file({ id: transformersId })!;\n\n  if (schema.$ref) {\n    let identifier = file.identifier({\n      $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n      create: true,\n      namespace: 'value',\n    });\n\n    if (identifier.created && identifier.name) {\n      // create each schema response transformer only once\n      const refSchema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      const nodes = schemaResponseTransformerNodes({\n        context,\n        plugin,\n        schema: refSchema,\n      });\n      if (nodes.length) {\n        const node = compiler.constVariable({\n          expression: compiler.arrowFunction({\n            async: false,\n            multiLine: true,\n            parameters: [\n              {\n                name: dataVariableName,\n                // TODO: parser - add types, generate types without transforms\n                type: compiler.keywordTypeNode({ keyword: 'any' }),\n              },\n            ],\n            statements: ensureStatements(nodes),\n          }),\n          name: identifier.name,\n        });\n        file.add(node);\n      } else {\n        // the created schema response transformer was empty, do not generate\n        // it and prevent any future attempts\n        identifier = file.blockIdentifier({\n          $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n          namespace: 'value',\n        });\n      }\n    }\n\n    if (identifier.name) {\n      const callExpression = compiler.callExpression({\n        functionName: identifier.name,\n        parameters: [dataExpression],\n      });\n\n      if (dataExpression) {\n        // In a map callback, the item needs to be returned, not just the transformation result\n        if (typeof dataExpression === 'string' && dataExpression === 'item') {\n          return [\n            compiler.returnStatement({\n              expression: callExpression,\n            }),\n          ];\n        }\n\n        return [\n          typeof dataExpression === 'string'\n            ? callExpression\n            : compiler.assignment({\n                left: dataExpression,\n                right: callExpression,\n              }),\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (schema.type === 'array') {\n    if (!dataExpression || typeof dataExpression === 'string') {\n      return [];\n    }\n\n    // TODO: parser - handle tuples and complex arrays\n    const nodes = !schema.items\n      ? []\n      : processSchemaType({\n          context,\n          dataExpression: 'item',\n          plugin,\n          schema: schema.items?.[0]\n            ? schema.items[0]\n            : {\n                ...schema,\n                type: undefined,\n              },\n        });\n\n    if (!nodes.length) {\n      return [];\n    }\n\n    // Ensure the map callback has a return statement for the item\n    const mapCallbackStatements = ensureStatements(nodes);\n    const hasReturnStatement = mapCallbackStatements.some((stmt) =>\n      isNodeReturnStatement({ node: stmt }),\n    );\n\n    if (!hasReturnStatement) {\n      mapCallbackStatements.push(\n        compiler.returnStatement({\n          expression: compiler.identifier({ text: 'item' }),\n        }),\n      );\n    }\n\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: dataExpression,\n            name: 'map',\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              multiLine: true,\n              parameters: [\n                {\n                  name: 'item',\n                  type: 'any',\n                },\n              ],\n              statements: mapCallbackStatements,\n            }),\n          ],\n        }),\n      }),\n    ];\n  }\n\n  if (schema.type === 'object') {\n    let nodes: Array<ts.Expression | ts.Statement> = [];\n    const required = schema.required ?? [];\n\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n      const propertyAccessExpression = compiler.propertyAccessExpression({\n        expression: dataExpression || dataVariableName,\n        name,\n      });\n      const propertyNodes = processSchemaType({\n        context,\n        dataExpression: propertyAccessExpression,\n        plugin,\n        schema: property,\n      });\n      if (!propertyNodes.length) {\n        continue;\n      }\n      const noNullableTypesInSchema = !property.items?.find(\n        (x) => x.type === 'null',\n      );\n      const requiredField = required.includes(name);\n      // Cannot fully rely on required fields\n      // Such value has to be present, but it doesn't guarantee that this value is not nullish\n      if (requiredField && noNullableTypesInSchema) {\n        nodes = nodes.concat(propertyNodes);\n      } else {\n        nodes.push(\n          // todo: Probably, it would make more sense to go with if(x !== undefined && x !== null) instead of if(x)\n          // this place influences all underlying transformers, while it's not exactly transformer itself\n          // Keep in mind that !!0 === false, so it already makes output for Bigint undesirable\n          compiler.ifStatement({\n            expression: propertyAccessExpression,\n            thenStatement: compiler.block({\n              statements: ensureStatements(propertyNodes),\n            }),\n          }),\n        );\n      }\n    }\n\n    return nodes;\n  }\n\n  if (\n    plugin.dates &&\n    schema.type === 'string' &&\n    (schema.format === 'date' || schema.format === 'date-time')\n  ) {\n    return dateExpressions({ dataExpression });\n  }\n\n  if (plugin.bigInt && schema.type === 'integer' && schema.format === 'int64') {\n    return bigIntExpressions({ dataExpression });\n  }\n\n  if (schema.items) {\n    if (schema.items.length === 1) {\n      return processSchemaType({\n        context,\n        dataExpression: 'item',\n        plugin,\n        schema: schema.items[0]!,\n      });\n    }\n\n    let arrayNodes: Array<ts.Expression | ts.Statement> = [];\n    // process 2 items if one of them is null\n    if (\n      schema.logicalOperator === 'and' ||\n      (schema.items.length === 2 &&\n        schema.items.find(\n          (item) => item.type === 'null' || item.type === 'void',\n        ))\n    ) {\n      for (const item of schema.items) {\n        const nodes = processSchemaType({\n          context,\n          dataExpression: dataExpression || 'item',\n          plugin,\n          schema: item,\n        });\n        if (nodes.length) {\n          if (dataExpression) {\n            arrayNodes = arrayNodes.concat(nodes);\n          } else {\n            const identifierItem = compiler.identifier({ text: 'item' });\n            // processed means the item was transformed\n            arrayNodes.push(\n              compiler.ifStatement({\n                expression: identifierItem,\n                thenStatement: compiler.block({\n                  statements: ensureStatements(nodes),\n                }),\n              }),\n              compiler.returnStatement({ expression: identifierItem }),\n            );\n          }\n        }\n      }\n      return arrayNodes;\n    }\n\n    // assume enums do not contain transformable values\n    if (schema.type !== 'enum') {\n      console.warn(\n        `❗️ Transformers warning: schema ${JSON.stringify(schema)} is too complex and won't be currently processed. This will likely produce an incomplete transformer which is not what you want. Please open an issue if you'd like this improved https://github.com/hey-api/openapi-ts/issues`,\n      );\n    }\n  }\n\n  return [];\n};\n\n// handles only response transformers for now\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: transformersId,\n    path: plugin.output,\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const { response } = operationResponsesMap(operation);\n\n    if (!response) {\n      return;\n    }\n\n    if (response.items && response.items.length > 1) {\n      if (context.config.logs.level === 'debug') {\n        console.warn(\n          `❗️ Transformers warning: route ${`${operation.method.toUpperCase()} ${operation.path}`} has ${response.items.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n      return;\n    }\n\n    const identifierResponse = context.file({ id: typesId })!.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'response' }),\n      namespace: 'type',\n    });\n    if (!identifierResponse.name) {\n      return;\n    }\n\n    let identifierResponseTransformer = file.identifier({\n      $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n      create: true,\n      namespace: 'value',\n    });\n    if (!identifierResponseTransformer.name) {\n      return;\n    }\n\n    // TODO: parser - consider handling simple string response which is also a date\n    const nodes = schemaResponseTransformerNodes({\n      context,\n      plugin,\n      schema: response,\n    });\n    if (nodes.length) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifierResponse.name,\n      });\n      const responseTransformerNode = compiler.constVariable({\n        exportConst: true,\n        expression: compiler.arrowFunction({\n          async: true,\n          multiLine: true,\n          parameters: [\n            {\n              name: dataVariableName,\n              // TODO: parser - add types, generate types without transforms\n              type: compiler.keywordTypeNode({ keyword: 'any' }),\n            },\n          ],\n          returnType: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeReferenceNode({\n                typeName: identifierResponse.name,\n              }),\n            ],\n            typeName: 'Promise',\n          }),\n          statements: ensureStatements(nodes),\n        }),\n        name: identifierResponseTransformer.name,\n      });\n      file.add(responseTransformerNode);\n    } else {\n      // the created schema response transformer was empty, do not generate\n      // it and prevent any future attempts\n      identifierResponseTransformer = file.blockIdentifier({\n        $ref: operationTransformerIrRef({\n          id: operation.id,\n          type: 'response',\n        }),\n        namespace: 'value',\n      });\n    }\n  });\n};\n","export const nuxtTypeComposable = 'TComposable';\nexport const nuxtTypeDefault = 'DefaultT';\nexport const nuxtTypeResponse = 'ResT';\n\nexport const sdkId = 'sdk';\n","import type {\n  ClassElement,\n  Comments,\n  FunctionParameter,\n  Node,\n} from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport type {\n  FunctionTypeParameter,\n  ObjectValue,\n} from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Model,\n  Operation,\n  OperationParameter,\n  Service,\n} from '../../../types/client';\nimport type { Config as ClientConfig } from '../../../types/config';\nimport {\n  getConfig,\n  isLegacyClient,\n  legacyNameFromConfig,\n} from '../../../utils/config';\nimport { escapeComment, escapeName } from '../../../utils/escape';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformServiceName } from '../../../utils/transform';\nimport { setUniqueTypeName } from '../../../utils/type';\nimport { unique } from '../../../utils/unique';\nimport type { Plugin } from '../../types';\nimport { getClientPlugin } from '../client-core/utils';\nimport type { Config } from './types';\n\ntype OnNode = (node: Node) => void;\ntype OnImport = (name: string) => void;\n\nexport const generateImport = ({\n  meta,\n  onImport,\n  ...setUniqueTypeNameArgs\n}: Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> & {\n    onImport: OnImport;\n  }) => {\n  // generate imports only for top-level models\n  if (!meta) {\n    // TODO: this used to return undefined. We could refactor this function to\n    // return undefined again, but we will need to improve types so we can safely\n    // do `const { name } = generateImport({ meta: ... })` (note when meta is defined\n    // we guarantee the response to be an object). For now, nothing relies on this\n    // response shape except for plugins, so it was acceptable to patch it that way\n    return { created: false, name: '' };\n  }\n\n  const { created, name } = setUniqueTypeName({\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (name) {\n    onImport(name);\n  }\n  return { created, name };\n};\n\nexport const modelResponseTransformerTypeName = (name: string) =>\n  `${name}ModelResponseTransformer`;\n\nexport const operationDataTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Data`;\n\nexport const operationErrorTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Error`;\n\n// operation response type ends with \"Response\", it's enough to append \"Transformer\"\nexport const operationResponseTransformerTypeName = (name: string) =>\n  `${name}Transformer`;\n\nexport const operationResponseTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Response`;\n\n/**\n * @param importedType unique type name returned from `setUniqueTypeName()`\n * @returns options type\n */\nexport const operationOptionsLegacyParserType = ({\n  importedType,\n  throwOnError,\n}: {\n  importedType?: string | false;\n  throwOnError?: string;\n}) => {\n  const optionsName = clientApi.OptionsLegacyParser.name;\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${importedType || 'unknown'}, ${throwOnError}>`;\n  }\n  return importedType ? `${optionsName}<${importedType}>` : optionsName;\n};\n\nconst toOperationParamType = (\n  client: Client,\n  operation: Operation,\n): FunctionParameter[] => {\n  const config = getConfig();\n\n  const { name: importedType } = setUniqueTypeName({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationDataTypeName,\n  });\n\n  const isRequired = isOperationParameterRequired(operation.parameters);\n\n  if (!isLegacyClient(config)) {\n    return [\n      {\n        isRequired,\n        name: 'options',\n        type: operationOptionsLegacyParserType({\n          importedType,\n          throwOnError: 'ThrowOnError',\n        }),\n      },\n    ];\n  }\n\n  if (!operation.parameters.length) {\n    return [];\n  }\n\n  const getDefaultPrintable = (\n    p: OperationParameter | Model,\n  ): string | undefined => {\n    if (p.default === undefined) {\n      return undefined;\n    }\n    return JSON.stringify(p.default, null, 4);\n  };\n\n  // legacy configuration\n  if (!config.useOptions) {\n    return operation.parameters.map((p) => {\n      const typePath = `${importedType}['${p.name}']`;\n      return {\n        default: p?.default,\n        isRequired:\n          (!p.isRequired && !getDefaultPrintable(p) ? '?' : '') === '',\n        name: p.name,\n        type: typePath,\n      };\n    });\n  }\n\n  return [\n    {\n      default: isRequired ? undefined : {},\n      name: 'data',\n      type: importedType,\n    },\n  ];\n};\n\nconst toOperationReturnType = (client: Client, operation: Operation) => {\n  const config = getConfig();\n\n  let returnType = compiler.typeNode('void');\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  // TODO: we should return nothing when successes don't exist\n  // can't remove this logic without removing request/name config\n  // as it complicates things\n  if (successResponses.length) {\n    const { name: importedType } = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationResponseTypeName,\n    });\n    returnType = compiler.typeUnionNode({\n      types: [importedType],\n    });\n  }\n\n  if (\n    config.useOptions &&\n    config.plugins['@hey-api/sdk']?.response === 'response'\n  ) {\n    returnType = compiler.typeNode('ApiResult', [returnType]);\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    returnType = compiler.typeNode('Observable', [returnType]);\n  } else {\n    returnType = compiler.typeNode('CancelablePromise', [returnType]);\n  }\n\n  return returnType;\n};\n\nconst toOperationComment = (operation: Operation): Comments => {\n  const config = getConfig();\n\n  if (!isLegacyClient(config)) {\n    const comment = [\n      operation.deprecated && '@deprecated',\n      operation.summary && escapeComment(operation.summary),\n      operation.description && escapeComment(operation.description),\n    ];\n    return comment;\n  }\n\n  let params: string[] = [];\n\n  if (operation.parameters.length) {\n    if (config.useOptions) {\n      params = [\n        '@param data The data for the request.',\n        ...operation.parameters.map(\n          (parameter) =>\n            `@param data.${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n        ),\n      ];\n    } else {\n      params = operation.parameters.map(\n        (parameter) =>\n          `@param ${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n      );\n    }\n  }\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  const comment = [\n    operation.deprecated && '@deprecated',\n    operation.summary && escapeComment(operation.summary),\n    operation.description && escapeComment(operation.description),\n    ...params,\n    ...successResponses.map(\n      (response) =>\n        `@returns ${response.type} ${response.description ? escapeComment(response.description) : ''}`,\n    ),\n    '@throws ApiError',\n  ];\n  return comment;\n};\n\nconst toRequestOptions = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport: OnImport | undefined;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const name = operationResponseTypeName(operation.name);\n  const { name: responseTransformerName } = setUniqueTypeName({\n    client,\n    meta: {\n      $ref: `transformers/${name}`,\n      name,\n    },\n    nameTransformer: operationResponseTransformerTypeName,\n  });\n\n  if (responseTransformerName) {\n    onImport(responseTransformerName);\n  }\n\n  if (!isLegacyClient(config)) {\n    let obj: ObjectValue[] = [\n      {\n        spread: 'options',\n      },\n    ];\n\n    const bodyParameters = operation.parameters.filter(\n      (parameter) => parameter.in === 'body' || parameter.in === 'formData',\n    );\n    const contents = bodyParameters\n      .map(\n        (parameter) =>\n          parameter.mediaType ||\n          (parameter.in === 'formData' ? 'multipart/form-data' : undefined),\n      )\n      .filter(Boolean)\n      .filter(unique);\n    if (contents.length === 1) {\n      if (contents[0] === 'multipart/form-data') {\n        obj = [\n          ...obj,\n          {\n            spread: 'formDataBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                // no need for Content-Type header, browser will set it automatically\n                key: 'Content-Type',\n                value: null,\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('formDataBodySerializer');\n      }\n\n      if (contents[0] === 'application/x-www-form-urlencoded') {\n        obj = [\n          ...obj,\n          {\n            spread: 'urlSearchParamsBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                key: 'Content-Type',\n                value: contents[0],\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('urlSearchParamsBodySerializer');\n      }\n    }\n\n    // TODO: set parseAs to skip inference if every result has the same\n    // content type. currently impossible because successes do not contain\n    // header information\n\n    obj = [\n      ...obj,\n      {\n        key: 'url',\n        value: operation.path,\n      },\n    ];\n\n    if (responseTransformerName) {\n      obj = [\n        ...obj,\n        {\n          key: 'responseTransformer',\n          value: responseTransformerName,\n        },\n      ];\n    }\n\n    return compiler.objectExpression({\n      identifiers: ['responseTransformer'],\n      obj,\n    });\n  }\n\n  const toObj = (parameters: OperationParameter[]) =>\n    parameters.reduce(\n      (prev, curr) => {\n        const key = curr.prop;\n        const value = config.useOptions ? `data.${curr.name}` : curr.name;\n        if (key === value) {\n          prev[key] = key;\n        } else if (escapeName(key) === key) {\n          prev[key] = value;\n        } else {\n          prev[`'${key}'`] = value;\n        }\n        return prev;\n      },\n      {} as Record<string, unknown>,\n    );\n\n  const obj: Record<string, any> = {\n    method: operation.method,\n    url: operation.path,\n  };\n\n  if (operation.parametersPath.length) {\n    obj.path = toObj(operation.parametersPath);\n  }\n\n  if (operation.parametersCookie.length) {\n    obj.cookies = toObj(operation.parametersCookie);\n  }\n\n  if (operation.parametersHeader.length) {\n    obj.headers = toObj(operation.parametersHeader);\n  }\n\n  if (operation.parametersQuery.length) {\n    obj.query = toObj(operation.parametersQuery);\n  }\n\n  if (operation.parametersForm.length) {\n    obj.formData = toObj(operation.parametersForm);\n  }\n\n  if (operation.parametersBody) {\n    if (operation.parametersBody.in === 'formData') {\n      if (config.useOptions) {\n        obj.formData = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.formData = operation.parametersBody.name;\n      }\n    }\n    if (operation.parametersBody.in === 'body') {\n      if (config.useOptions) {\n        obj.body = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.body = operation.parametersBody.name;\n      }\n    }\n  }\n\n  if (operation.parametersBody?.mediaType) {\n    obj.mediaType = operation.parametersBody?.mediaType;\n  }\n\n  if (operation.responseHeader) {\n    obj.responseHeader = operation.responseHeader;\n  }\n\n  if (responseTransformerName) {\n    obj.responseTransformer = responseTransformerName;\n  }\n\n  const errorResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('error'),\n  );\n  if (errorResponses.length > 0) {\n    const errors: Record<number | string, string> = {};\n    errorResponses.forEach((response) => {\n      errors[response.code] = response.description ?? '';\n    });\n    obj.errors = errors;\n  }\n\n  return compiler.objectExpression({\n    identifiers: [\n      'body',\n      'cookies',\n      'formData',\n      'headers',\n      'path',\n      'query',\n      'responseTransformer',\n    ],\n    obj,\n    shorthand: true,\n  });\n};\n\nexport const serviceFunctionIdentifier = ({\n  config,\n  handleIllegal,\n  id,\n  operation,\n}: {\n  config: ClientConfig;\n  handleIllegal?: boolean;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.methodNameBuilder) {\n    return config.plugins['@hey-api/sdk'].methodNameBuilder(operation);\n  }\n\n  if (handleIllegal && id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${id}_`;\n  }\n\n  return id;\n};\n\nconst toOperationStatements = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport?: OnImport;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const options = toRequestOptions({\n    client,\n    onClientImport,\n    onImport,\n    operation,\n  });\n\n  if (!isLegacyClient(config)) {\n    const errorType = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationErrorTypeName,\n    }).name;\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    const responseType = successResponses.length\n      ? setUniqueTypeName({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n        }).name\n      : 'void';\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: `(options?.client ?? client).${operation.method.toLocaleLowerCase()}`,\n        types:\n          errorType && responseType\n            ? [responseType, errorType, 'ThrowOnError']\n            : errorType\n              ? ['unknown', errorType, 'ThrowOnError']\n              : responseType\n                ? [responseType, 'unknown', 'ThrowOnError']\n                : [],\n      }),\n    ];\n  }\n\n  if (legacyNameFromConfig(config)) {\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: 'this.httpRequest.request',\n      }),\n    ];\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    return [\n      compiler.returnFunctionCall({\n        args: ['OpenAPI', 'this.http', options],\n        name: '__request',\n      }),\n    ];\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: ['OpenAPI', options],\n      name: '__request',\n    }),\n  ];\n};\n\nconst processService = ({\n  client,\n  onClientImport,\n  onImport,\n  onNode,\n  service,\n}: {\n  client: Client;\n  onClientImport: OnImport;\n  onImport: OnImport;\n  onNode: OnNode;\n  service: Service;\n}) => {\n  const config = getConfig();\n\n  const clientPlugin = getClientPlugin(config);\n  const isLegacy = isLegacyClient(config);\n\n  for (const operation of service.operations) {\n    if (operation.parameters.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationDataTypeName,\n        onImport,\n      });\n    }\n\n    if (!isLegacy) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationErrorTypeName,\n        onImport,\n      });\n    }\n\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    if (successResponses.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationResponseTypeName,\n        onImport,\n      });\n    }\n  }\n\n  const throwOnErrorTypeGeneric: FunctionTypeParameter = {\n    default:\n      ('throwOnError' in clientPlugin ? clientPlugin.throwOnError : false) ??\n      false,\n    extends: 'boolean',\n    name: 'ThrowOnError',\n  };\n\n  if (\n    !config.plugins['@hey-api/sdk']?.asClass &&\n    !legacyNameFromConfig(config)\n  ) {\n    for (const operation of service.operations) {\n      const compileFunctionParams = {\n        parameters: toOperationParamType(client, operation),\n        returnType: !isLegacy\n          ? undefined\n          : toOperationReturnType(client, operation),\n        statements: toOperationStatements({\n          client,\n          onClientImport,\n          onImport,\n          operation,\n        }),\n        types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n      };\n      const expression =\n        clientPlugin.name === 'legacy/angular'\n          ? compiler.anonymousFunction(compileFunctionParams)\n          : compiler.arrowFunction(compileFunctionParams);\n      const statement = compiler.constVariable({\n        comment: toOperationComment(operation),\n        exportConst: true,\n        expression,\n        name: serviceFunctionIdentifier({\n          config,\n          handleIllegal: true,\n          id: operation.name,\n          operation,\n        }),\n      });\n      onNode(statement);\n    }\n    return;\n  }\n\n  let members: ClassElement[] = service.operations.map((operation) => {\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: toOperationComment(operation),\n      isStatic:\n        legacyNameFromConfig(config) === undefined &&\n        clientPlugin.name !== 'legacy/angular',\n      name: serviceFunctionIdentifier({\n        config,\n        id: operation.name,\n        operation,\n      }),\n      parameters: toOperationParamType(client, operation),\n      returnType: !isLegacy\n        ? undefined\n        : toOperationReturnType(client, operation),\n      statements: toOperationStatements({\n        client,\n        onClientImport,\n        onImport,\n        operation,\n      }),\n      types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n    });\n    return node;\n  });\n\n  if (!members.length) {\n    return;\n  }\n\n  // Push constructor to front if needed\n  if (legacyNameFromConfig(config)) {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'httpRequest',\n            type: 'BaseHttpRequest',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  } else if (clientPlugin.name === 'legacy/angular') {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'http',\n            type: 'HttpClient',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  }\n\n  const statement = compiler.classDeclaration({\n    decorator:\n      clientPlugin.name === 'legacy/angular'\n        ? { args: [{ providedIn: 'root' }], name: 'Injectable' }\n        : undefined,\n    members,\n    name: transformServiceName({\n      config,\n      name: service.name,\n    }),\n  });\n  onNode(statement);\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const sdkOutput = 'sdk';\n\n  files.sdk = new TypeScriptFile({\n    dir: config.output.path,\n    id: 'sdk',\n    name: `${sdkOutput}.ts`,\n  });\n\n  // Import required packages and core files.\n  if (!isLegacy) {\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createClient',\n    });\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createConfig',\n    });\n    files.sdk.import({\n      ...clientApi.OptionsLegacyParser,\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n    });\n  } else {\n    const clientPlugin = getClientPlugin(config);\n    if (clientPlugin.name === 'legacy/angular') {\n      files.sdk.import({\n        module: '@angular/core',\n        name: 'Injectable',\n      });\n\n      if (!legacyNameFromConfig(config)) {\n        files.sdk.import({\n          module: '@angular/common/http',\n          name: 'HttpClient',\n        });\n      }\n\n      files.sdk.import({\n        asType: true,\n        module: 'rxjs',\n        name: 'Observable',\n      });\n    } else {\n      files.sdk.import({\n        asType: true,\n        module: './core/CancelablePromise',\n        name: 'CancelablePromise',\n      });\n    }\n\n    if (config.plugins['@hey-api/sdk']?.response === 'response') {\n      files.sdk.import({\n        asType: true,\n        module: './core/ApiResult',\n        name: 'ApiResult',\n      });\n    }\n\n    if (legacyNameFromConfig(config)) {\n      const clientPlugin = getClientPlugin(config);\n      files.sdk.import({\n        asType: clientPlugin.name !== 'legacy/angular',\n        module: './core/BaseHttpRequest',\n        name: 'BaseHttpRequest',\n      });\n    } else {\n      files.sdk.import({\n        module: './core/OpenAPI',\n        name: 'OpenAPI',\n      });\n      files.sdk.import({\n        alias: '__request',\n        module: './core/request',\n        name: 'request',\n      });\n    }\n  }\n\n  // define client first\n  if (!isLegacy) {\n    const clientPlugin = getClientPlugin(config);\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: compiler.callExpression({\n        functionName: 'createClient',\n        parameters: [\n          compiler.callExpression({\n            functionName: 'createConfig',\n            parameters: [\n              'throwOnError' in clientPlugin && clientPlugin.throwOnError\n                ? compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'throwOnError',\n                        value: true,\n                      },\n                    ],\n                  })\n                : undefined,\n            ],\n          }),\n        ],\n      }),\n      name: 'client',\n    });\n    files.sdk.add(statement);\n  }\n\n  for (const service of client.services) {\n    processService({\n      client,\n      onClientImport: (imported) => {\n        files.sdk!.import({\n          module: clientModulePath({ config, sourceOutput: sdkOutput }),\n          name: imported,\n        });\n      },\n      onImport: (imported) => {\n        files.sdk!.import({\n          // this detection could be done safer, but it shouldn't cause any issues\n          asType: !imported.endsWith('Transformer'),\n          module: `./${files.types!.nameWithoutExtension()}`,\n          name: imported,\n        });\n      },\n      onNode: (node) => {\n        files.sdk!.add(node);\n      },\n      service,\n    });\n  }\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport type { FileImportResult } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport type { Plugin } from '../../types';\nimport { getClientPlugin } from '../client-core/utils';\nimport { nuxtTypeDefault, nuxtTypeResponse, sdkId } from './constants';\nimport type { Config } from './types';\n\nexport const createTypeOptions = ({\n  clientOptions,\n  context,\n  plugin,\n}: {\n  clientOptions: FileImportResult;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: sdkId })!;\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const tDataShape = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'TDataShape',\n  });\n  const clientType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Client',\n  });\n\n  const typeOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: 'Options',\n    type: compiler.typeIntersectionNode({\n      types: [\n        compiler.typeReferenceNode({\n          typeArguments: isNuxtClient\n            ? [\n                compiler.typeReferenceNode({ typeName: 'TComposable' }),\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeResponse }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeDefault }),\n              ]\n            : [\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: 'ThrowOnError' }),\n              ],\n          typeName: clientOptions.name,\n        }),\n        compiler.typeInterfaceNode({\n          properties: [\n            {\n              comment: [\n                'You can provide a client instance returned by `createClient()` instead of',\n                'individual options. This might be also useful if you want to implement a',\n                'custom client.',\n              ],\n              isRequired: !plugin.client,\n              name: 'client',\n              type: compiler.typeReferenceNode({ typeName: clientType.name }),\n            },\n            {\n              comment: [\n                'You can pass arbitrary values through the `meta` object. This can be',\n                \"used to access values that aren't defined as part of the SDK function.\",\n              ],\n              isRequired: false,\n              name: 'meta',\n              type: compiler.typeReferenceNode({\n                typeArguments: [\n                  compiler.keywordTypeNode({ keyword: 'string' }),\n                  compiler.keywordTypeNode({ keyword: 'unknown' }),\n                ],\n                typeName: 'Record',\n              }),\n            },\n          ],\n          useLegacyResolution: false,\n        }),\n      ],\n    }),\n    typeParameters: isNuxtClient\n      ? [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({ typeName: 'Composable' }),\n            name: 'TComposable',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            name: nuxtTypeResponse,\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'undefined' }),\n            name: nuxtTypeDefault,\n          }),\n        ]\n      : [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            defaultType: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            name: 'ThrowOnError',\n          }),\n        ],\n  });\n\n  file.add(typeOptions);\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { ObjectValue } from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport type { TypeScriptFile } from '../../../generate/files';\nimport {\n  hasOperationDataRequired,\n  statusCodeToGroup,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { getServiceName } from '../../../utils/postprocess';\nimport { transformServiceName } from '../../../utils/transform';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { zodId } from '../../zod/plugin';\nimport { clientId, getClientPlugin } from '../client-core/utils';\nimport {\n  operationTransformerIrRef,\n  transformersId,\n} from '../transformers/plugin';\nimport {\n  importIdentifierData,\n  importIdentifierError,\n  importIdentifierResponse,\n} from '../typescript/ref';\nimport { nuxtTypeComposable, nuxtTypeDefault } from './constants';\nimport { serviceFunctionIdentifier } from './plugin-legacy';\nimport { createTypeOptions } from './typeOptions';\nimport type { Config } from './types';\n\n// copy-pasted from @hey-api/client-core\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const operationOptionsType = ({\n  context,\n  file,\n  operation,\n  throwOnError,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  throwOnError?: string;\n}) => {\n  const identifierData = importIdentifierData({ context, file, operation });\n  const identifierResponse = importIdentifierResponse({\n    context,\n    file,\n    operation,\n  });\n\n  const optionsName = clientApi.Options.name;\n\n  const client = getClientPlugin(context.config);\n  if (client.name === '@hey-api/client-nuxt') {\n    return `${optionsName}<${nuxtTypeComposable}, ${identifierData.name || 'unknown'}, ${identifierResponse.name || 'unknown'}, ${nuxtTypeDefault}>`;\n  }\n\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${identifierData.name || 'unknown'}, ${throwOnError}>`;\n  }\n  return identifierData.name\n    ? `${optionsName}<${identifierData.name}>`\n    : optionsName;\n};\n\nexport const sdkId = 'sdk';\n\n/**\n * Infers `responseType` value from provided response content type. This is\n * an adapted version of `getParseAs()` from the Fetch API client.\n *\n * From Axios documentation:\n * `responseType` indicates the type of data that the server will respond with\n * options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n * browser only: 'blob'\n */\nexport const getResponseType = (\n  contentType: string | null | undefined,\n):\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'stream'\n  | 'text'\n  | undefined => {\n  if (!contentType) {\n    return;\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  // Axios does not handle form data out of the box\n  // if (cleanContent === 'multipart/form-data') {\n  //   return 'formData';\n  // }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\n// TODO: parser - handle more security types\nconst securitySchemeObjectToAuthObject = ({\n  securitySchemeObject,\n}: {\n  securitySchemeObject: IR.SecurityObject;\n}): Auth | undefined => {\n  if (securitySchemeObject.type === 'openIdConnect') {\n    return {\n      scheme: 'bearer',\n      type: 'http',\n    };\n  }\n\n  if (securitySchemeObject.type === 'oauth2') {\n    if (\n      securitySchemeObject.flows.password ||\n      securitySchemeObject.flows.authorizationCode ||\n      securitySchemeObject.flows.clientCredentials ||\n      securitySchemeObject.flows.implicit\n    ) {\n      return {\n        scheme: 'bearer',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'apiKey') {\n    if (securitySchemeObject.in === 'header') {\n      return {\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    if (\n      securitySchemeObject.in === 'query' ||\n      securitySchemeObject.in == 'cookie'\n    ) {\n      return {\n        in: securitySchemeObject.in,\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'http') {\n    const scheme = securitySchemeObject.scheme.toLowerCase();\n    if (scheme === 'bearer' || scheme === 'basic') {\n      return {\n        scheme: scheme as 'bearer' | 'basic',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n};\n\nconst operationAuth = ({\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<Auth> => {\n  if (!operation.security || !plugin.auth) {\n    return [];\n  }\n\n  const auth: Array<Auth> = [];\n\n  for (const securitySchemeObject of operation.security) {\n    const authObject = securitySchemeObjectToAuthObject({\n      securitySchemeObject,\n    });\n    if (authObject) {\n      auth.push(authObject);\n    } else {\n      console.warn(\n        `❗️ SDK warning: unsupported security scheme. Please open an issue if you'd like it added https://github.com/hey-api/openapi-ts/issues\\n${JSON.stringify(securitySchemeObject, null, 2)}`,\n      );\n    }\n  }\n\n  return auth;\n};\n\nconst operationStatements = ({\n  context,\n  isRequiredOptions,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  isRequiredOptions: boolean;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<ts.Statement> => {\n  const file = context.file({ id: sdkId })!;\n  const sdkOutput = file.nameWithoutExtension();\n\n  const identifierError = importIdentifierError({ context, file, operation });\n  const identifierResponse = importIdentifierResponse({\n    context,\n    file,\n    operation,\n  });\n\n  // TODO: transform parameters\n  // const query = {\n  //   BarBaz: options.query.bar_baz,\n  //   qux_quux: options.query.qux_quux,\n  //   fooBar: options.query.foo_bar,\n  // };\n\n  // if (operation.parameters) {\n  //   for (const name in operation.parameters.query) {\n  //     const parameter = operation.parameters.query[name]\n  //     if (parameter.name !== fieldName({ context, name: parameter.name })) {\n  //       console.warn(parameter.name)\n  //     }\n  //   }\n  // }\n\n  const requestOptions: ObjectValue[] = [];\n\n  if (operation.body) {\n    switch (operation.body.type) {\n      case 'form-data':\n        requestOptions.push({ spread: 'formDataBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'formDataBodySerializer',\n        });\n        break;\n      case 'json':\n        // jsonBodySerializer is the default, no need to specify\n        break;\n      case 'text':\n      case 'octet-stream':\n        // ensure we don't use any serializer by default\n        requestOptions.push({\n          key: 'bodySerializer',\n          value: null,\n        });\n        break;\n      case 'url-search-params':\n        requestOptions.push({ spread: 'urlSearchParamsBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'urlSearchParamsBodySerializer',\n        });\n        break;\n    }\n  }\n\n  const client = getClientPlugin(context.config);\n  if (client.name === '@hey-api/client-axios') {\n    // try to infer `responseType` option for Axios. We don't need this in\n    // Fetch API client because it automatically detects the correct response\n    // during runtime.\n    for (const statusCode in operation.responses) {\n      // this doesn't handle default status code for now\n      if (statusCodeToGroup({ statusCode }) === '2XX') {\n        const response = operation.responses[statusCode];\n        const responseType = getResponseType(response?.mediaType);\n        // json is the default, skip it\n        if (responseType && responseType !== 'json') {\n          requestOptions.push({\n            key: 'responseType',\n            value: responseType,\n          });\n        }\n      }\n    }\n  }\n\n  // TODO: parser - set parseAs to skip inference if every response has the same\n  // content type. currently impossible because successes do not contain\n  // header information\n\n  const auth = operationAuth({ context, operation, plugin });\n  if (auth.length) {\n    requestOptions.push({\n      key: 'security',\n      value: compiler.arrayLiteralExpression({ elements: auth }),\n    });\n  }\n\n  for (const name in operation.parameters?.query) {\n    const parameter = operation.parameters.query[name]!;\n    if (\n      (parameter.schema.type === 'array' ||\n        parameter.schema.type === 'tuple') &&\n      (parameter.style !== 'form' || !parameter.explode)\n    ) {\n      // override the default settings for `querySerializer`\n      requestOptions.push({\n        key: 'querySerializer',\n        value: [\n          {\n            key: 'array',\n            value: [\n              {\n                key: 'explode',\n                value: false,\n              },\n              {\n                key: 'style',\n                value: 'form',\n              },\n            ],\n          },\n        ],\n      });\n      break;\n    }\n  }\n\n  if (plugin.transformer === '@hey-api/transformers') {\n    const identifierTransformer = context\n      .file({ id: transformersId })!\n      .identifier({\n        $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n        namespace: 'value',\n      });\n\n    if (identifierTransformer.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: transformersId,\n        }),\n        name: identifierTransformer.name,\n      });\n\n      requestOptions.push({\n        key: 'responseTransformer',\n        value: identifierTransformer.name,\n      });\n    }\n  }\n\n  if (plugin.validator === 'zod') {\n    const identifierSchema = context.file({ id: zodId })!.identifier({\n      $ref: operationIrRef({\n        case: 'camelCase',\n        id: operation.id,\n        type: 'response',\n      }),\n      namespace: 'value',\n    });\n\n    if (identifierSchema.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: zodId,\n        }),\n        name: identifierSchema.name,\n      });\n\n      requestOptions.push({\n        key: 'responseValidator',\n        value: compiler.arrowFunction({\n          async: true,\n          parameters: [\n            {\n              name: 'data',\n            },\n          ],\n          statements: [\n            compiler.returnStatement({\n              expression: compiler.awaitExpression({\n                expression: compiler.callExpression({\n                  functionName: compiler.propertyAccessExpression({\n                    expression: compiler.identifier({\n                      text: identifierSchema.name,\n                    }),\n                    name: compiler.identifier({ text: 'parseAsync' }),\n                  }),\n                  parameters: [compiler.identifier({ text: 'data' })],\n                }),\n              }),\n            }),\n          ],\n        }),\n      });\n    }\n  }\n\n  requestOptions.push({\n    key: 'url',\n    value: operation.path,\n  });\n\n  // options must go last to allow overriding parameters above\n  requestOptions.push({ spread: 'options' });\n  if (operation.body) {\n    requestOptions.push({\n      key: 'headers',\n      value: [\n        {\n          key: 'Content-Type',\n          // form-data does not need Content-Type header, browser will set it automatically\n          value:\n            operation.body.type === 'form-data'\n              ? null\n              : operation.body.mediaType,\n        },\n        {\n          spread: 'options?.headers',\n        },\n      ],\n    });\n  }\n\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const responseType = identifierResponse.name || 'unknown';\n  const errorType = identifierError.name || 'unknown';\n\n  const heyApiClient = plugin.client\n    ? file.import({\n        alias: '_heyApiClient',\n        module: file.relativePathToFile({\n          context,\n          id: clientId,\n        }),\n        name: 'client',\n      })\n    : undefined;\n\n  const optionsClient = compiler.propertyAccessExpression({\n    expression: compiler.identifier({ text: 'options' }),\n    isOptional: !isRequiredOptions,\n    name: 'client',\n  });\n\n  return [\n    compiler.returnFunctionCall({\n      args: [\n        compiler.objectExpression({\n          identifiers: ['responseTransformer'],\n          obj: requestOptions,\n        }),\n      ],\n      name: compiler.propertyAccessExpression({\n        expression: heyApiClient?.name\n          ? compiler.binaryExpression({\n              left: optionsClient,\n              operator: '??',\n              right: compiler.identifier({ text: heyApiClient.name }),\n            })\n          : optionsClient,\n        name: compiler.identifier({ text: operation.method }),\n      }),\n      types: isNuxtClient\n        ? [\n            nuxtTypeComposable,\n            `${responseType} | ${nuxtTypeDefault}`,\n            errorType,\n            nuxtTypeDefault,\n          ]\n        : [responseType, errorType, 'ThrowOnError'],\n    }),\n  ];\n};\n\nconst generateClassSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = context.file({ id: sdkId })!;\n  const sdks = new Map<string, Array<ts.MethodDeclaration>>();\n\n  context.subscribe('operation', ({ operation }) => {\n    const isRequiredOptions =\n      !plugin.client || isNuxtClient || hasOperationDataRequired(operation);\n    const identifierResponse = importIdentifierResponse({\n      context,\n      file,\n      operation,\n    });\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: [\n        operation.deprecated && '@deprecated',\n        operation.summary && escapeComment(operation.summary),\n        operation.description && escapeComment(operation.description),\n      ],\n      isStatic: true,\n      name: serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: false,\n        id: operation.id,\n        operation,\n      }),\n      parameters: [\n        {\n          isRequired: isRequiredOptions,\n          name: 'options',\n          type: operationOptionsType({\n            context,\n            file,\n            operation,\n            throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n          }),\n        },\n      ],\n      returnType: undefined,\n      statements: operationStatements({\n        context,\n        isRequiredOptions,\n        operation,\n        plugin,\n      }),\n      types: isNuxtClient\n        ? [\n            {\n              // default: compiler.ots.string('$fetch'),\n              extends: compiler.typeNode('Composable'),\n              name: nuxtTypeComposable,\n            },\n            {\n              default: identifierResponse.name\n                ? compiler.typeReferenceNode({\n                    typeName: identifierResponse.name,\n                  })\n                : compiler.typeNode('undefined'),\n              extends: identifierResponse.name\n                ? compiler.typeReferenceNode({\n                    typeName: identifierResponse.name,\n                  })\n                : undefined,\n              name: nuxtTypeDefault,\n            },\n          ]\n        : [\n            {\n              default:\n                ('throwOnError' in client ? client.throwOnError : false) ??\n                false,\n              extends: 'boolean',\n              name: 'ThrowOnError',\n            },\n          ],\n    });\n\n    const uniqueTags = Array.from(new Set(operation.tags));\n    if (!uniqueTags.length) {\n      uniqueTags.push('default');\n    }\n\n    for (const tag of uniqueTags) {\n      const name = getServiceName(tag);\n      const nodes = sdks.get(name) ?? [];\n      nodes.push(node);\n      sdks.set(name, nodes);\n    }\n  });\n\n  context.subscribe('after', () => {\n    for (const [name, nodes] of sdks) {\n      const node = compiler.classDeclaration({\n        decorator: undefined,\n        members: nodes,\n        name: transformServiceName({\n          config: context.config,\n          name,\n        }),\n      });\n      file.add(node);\n    }\n  });\n};\n\nconst generateFlatSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = context.file({ id: sdkId })!;\n\n  context.subscribe('operation', ({ operation }) => {\n    const isRequiredOptions =\n      !plugin.client || isNuxtClient || hasOperationDataRequired(operation);\n    const identifierResponse = importIdentifierResponse({\n      context,\n      file,\n      operation,\n    });\n    const node = compiler.constVariable({\n      comment: [\n        operation.deprecated && '@deprecated',\n        operation.summary && escapeComment(operation.summary),\n        operation.description && escapeComment(operation.description),\n      ],\n      exportConst: true,\n      expression: compiler.arrowFunction({\n        parameters: [\n          {\n            isRequired: isRequiredOptions,\n            name: 'options',\n            type: operationOptionsType({\n              context,\n              file,\n              operation,\n              throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n            }),\n          },\n        ],\n        returnType: undefined,\n        statements: operationStatements({\n          context,\n          isRequiredOptions,\n          operation,\n          plugin,\n        }),\n        types: isNuxtClient\n          ? [\n              {\n                // default: compiler.ots.string('$fetch'),\n                extends: compiler.typeNode('Composable'),\n                name: nuxtTypeComposable,\n              },\n              {\n                default: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : compiler.typeNode('undefined'),\n                extends: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : undefined,\n                name: nuxtTypeDefault,\n              },\n            ]\n          : [\n              {\n                default:\n                  ('throwOnError' in client ? client.throwOnError : false) ??\n                  false,\n                extends: 'boolean',\n                name: 'ThrowOnError',\n              },\n            ],\n      }),\n      name: serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: true,\n        id: operation.id,\n        operation,\n      }),\n    });\n    file.add(node);\n  });\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: sdkId,\n    path: plugin.output,\n  });\n\n  // import required packages and core files\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    ...clientApi.Options,\n    alias: 'ClientOptions',\n    module: clientModule,\n  });\n\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  if (isNuxtClient) {\n    file.import({\n      asType: true,\n      module: clientModule,\n      name: 'Composable',\n    });\n  }\n\n  createTypeOptions({\n    clientOptions,\n    context,\n    plugin,\n  });\n\n  if (plugin.asClass) {\n    generateClassSdk({ context, plugin });\n  } else {\n    generateFlatSdk({ context, plugin });\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _infer: (config, context) => {\n    if (config.client) {\n      if (typeof config.client === 'boolean') {\n        config.client = context.pluginByTag(\n          'client',\n          '🚫 client needs to be set to generate SDKs - which HTTP client do you want to use?',\n        ) as unknown as typeof config.client;\n      }\n\n      context.ensureDependency(config.client);\n    }\n\n    if (config.transformer) {\n      if (typeof config.transformer === 'boolean') {\n        config.transformer = context.pluginByTag(\n          'transformer',\n        ) as unknown as typeof config.transformer;\n      }\n\n      context.ensureDependency(config.transformer);\n    }\n\n    if (config.validator) {\n      if (typeof config.validator === 'boolean') {\n        config.validator = context.pluginByTag(\n          'validator',\n        ) as unknown as typeof config.validator;\n      }\n\n      context.ensureDependency(config.validator);\n    }\n  },\n  asClass: false,\n  auth: true,\n  client: true,\n  exportFromIndex: true,\n  name: '@hey-api/sdk',\n  operationId: true,\n  output: 'sdk',\n  response: 'body',\n  serviceNameBuilder: '{{name}}Service',\n};\n\n/**\n * Type helper for `@hey-api/sdk` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { EnumDeclaration } from 'typescript';\n\nimport { type Comments, compiler, type Node } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  OperationParameter,\n} from '../../../types/client';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { enumEntry, enumUnionType } from '../../../utils/enum';\nimport { escapeComment } from '../../../utils/escape';\nimport { sortByName, sorterByName } from '../../../utils/sort';\nimport {\n  setUniqueTypeName,\n  type SetUniqueTypeNameResult,\n  toType,\n} from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport type { Config } from './types';\n\nexport interface TypesProps {\n  client: Client;\n  model: Model;\n  onNode: (node: Node) => void;\n  onRemoveNode?: VoidFunction;\n}\n\nconst treeName = '$OpenApiTs';\n\nexport const emptyModel: Model = {\n  $refs: [],\n  base: '',\n  description: null,\n  enum: [],\n  enums: [],\n  export: 'interface',\n  imports: [],\n  in: '',\n  isDefinition: false,\n  isNullable: false,\n  isReadOnly: false,\n  isRequired: false,\n  link: null,\n  name: '',\n  properties: [],\n  template: null,\n  type: '',\n};\n\nconst generateEnum = ({\n  comments,\n  leadingComment,\n  meta,\n  obj,\n  onNode,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.enumDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'>) => {\n  // generate types only for top-level models\n  if (!meta) {\n    return;\n  }\n\n  const { created, name } = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (created) {\n    const node = compiler.enumDeclaration({\n      comments,\n      leadingComment,\n      name,\n      obj,\n    });\n    onNode(node);\n  }\n};\n\nexport const generateType = ({\n  comment,\n  meta,\n  onCreated,\n  onNode,\n  type,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.typeAliasDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'> & {\n    onCreated?: (name: string) => void;\n  }): SetUniqueTypeNameResult => {\n  // generate types only for top-level models\n  if (!meta) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const result = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  const { created, name } = result;\n  if (created) {\n    const node = compiler.typeAliasDeclaration({\n      comment,\n      exportType: true,\n      name,\n      type,\n    });\n    onNode(node);\n\n    onCreated?.(name);\n  }\n  return result;\n};\n\nconst processComposition = (props: TypesProps) => {\n  const config = getConfig();\n\n  const enumDeclarations = [] as EnumDeclaration[];\n\n  processType(props);\n\n  props.model.enums.forEach((enumerator) => {\n    if (\n      config.plugins['@hey-api/typescript']?.enums !== 'typescript+namespace'\n    ) {\n      return processEnum({\n        ...props,\n        model: enumerator,\n      });\n    }\n\n    return processScopedEnum({\n      ...props,\n      model: enumerator,\n      onNode: (node) => {\n        enumDeclarations.push(node as EnumDeclaration);\n      },\n    });\n  });\n\n  if (enumDeclarations.length) {\n    props.onNode(\n      compiler.namespaceDeclaration({\n        name: props.model.name,\n        statements: enumDeclarations,\n      }),\n    );\n  }\n};\n\nconst processEnum = ({ client, model, onNode }: TypesProps) => {\n  const config = getConfig();\n\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n\n  const comment = [\n    model.description && escapeComment(model.description),\n    model.deprecated && '@deprecated',\n  ];\n\n  if (\n    config.plugins['@hey-api/typescript']?.enums === 'typescript' ||\n    config.plugins['@hey-api/typescript']?.enums === 'typescript+namespace'\n  ) {\n    generateEnum({\n      client,\n      comments,\n      leadingComment: comment,\n      meta: model.meta,\n      obj: properties,\n      onNode,\n    });\n    return;\n  }\n\n  generateType({\n    client,\n    comment,\n    meta: model.meta,\n    onCreated: (name) => {\n      // create a separate JavaScript object export\n      if (config.plugins['@hey-api/typescript']?.enums === 'javascript') {\n        const expression = compiler.objectExpression({\n          multiLine: true,\n          obj: Object.entries(properties).map(([key, value]) => ({\n            comments: comments[key],\n            key,\n            value,\n          })),\n          unescape: true,\n        });\n        const node = compiler.constVariable({\n          assertion: 'const',\n          comment,\n          exportConst: true,\n          expression,\n          name,\n        });\n        onNode(node);\n      }\n    },\n    onNode,\n    type: enumUnionType(model.enum),\n  });\n};\n\nconst processScopedEnum = ({ model, onNode }: TypesProps) => {\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n  onNode(\n    compiler.enumDeclaration({\n      comments,\n      leadingComment: [\n        model.description && escapeComment(model.description),\n        model.deprecated && '@deprecated',\n      ],\n      name: model.meta?.name || model.name,\n      obj: properties,\n    }),\n  );\n};\n\nconst processType = ({ client, model, onNode }: TypesProps) => {\n  generateType({\n    client,\n    comment: [\n      model.description && escapeComment(model.description),\n      model.deprecated && '@deprecated',\n    ],\n    meta: model.meta,\n    onNode,\n    type: toType(model),\n  });\n};\n\nconst processModel = (props: TypesProps) => {\n  switch (props.model.export) {\n    case 'all-of':\n    case 'any-of':\n    case 'one-of':\n    case 'interface':\n      return processComposition(props);\n    case 'enum':\n      return processEnum(props);\n    default:\n      return processType(props);\n  }\n};\n\ninterface MethodMap {\n  $ref?: string;\n  req?: OperationParameter[];\n  res?: Record<number | string, Model>;\n}\n\ntype PathMap = {\n  [method in Method]?: MethodMap;\n};\n\ntype PathsMap = Record<string, PathMap>;\n\nconst processServiceTypes = ({\n  client,\n  onNode,\n}: Pick<TypesProps, 'client' | 'onNode'>) => {\n  const pathsMap: PathsMap = {};\n\n  const config = getConfig();\n\n  if (\n    !config.plugins['@hey-api/sdk'] &&\n    !config.plugins['@hey-api/typescript']?.tree\n  ) {\n    return;\n  }\n\n  const isLegacy = isLegacyClient(config);\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      if (!operation.parameters.length && !operation.responses.length) {\n        continue;\n      }\n\n      if (!pathsMap[operation.path]) {\n        pathsMap[operation.path] = {};\n      }\n      const pathMap = pathsMap[operation.path]!;\n\n      if (!pathMap[operation.method]) {\n        pathMap[operation.method] = {};\n      }\n      const methodMap = pathMap[operation.method]!;\n      methodMap.$ref = operation.name;\n\n      if (operation.responses.length > 0) {\n        if (!methodMap.res) {\n          methodMap.res = {};\n        }\n\n        if (Array.isArray(methodMap.res)) {\n          continue;\n        }\n\n        operation.responses.forEach((response) => {\n          methodMap.res![response.code] = response;\n        });\n      }\n\n      if (operation.parameters.length > 0) {\n        let bodyParameters: OperationParameter = {\n          mediaType: null,\n          ...emptyModel,\n          in: 'body',\n          name: 'body',\n          prop: 'body',\n        };\n        let bodyParameter = operation.parameters.filter(\n          (parameter) => parameter.in === 'body',\n        );\n        if (!bodyParameter.length) {\n          bodyParameter = operation.parameters.filter(\n            (parameter) => parameter.in === 'formData',\n          );\n        }\n\n        if (bodyParameter.length === 1) {\n          bodyParameters = {\n            ...emptyModel,\n            ...bodyParameter[0]!,\n            in: 'body',\n            isRequired: bodyParameter[0]!.isRequired,\n            name: 'body',\n            prop: 'body',\n          };\n          // assume we have multiple formData parameters from Swagger 2.0\n        } else if (bodyParameter.length > 1) {\n          bodyParameters = {\n            ...emptyModel,\n            in: 'body',\n            isRequired: bodyParameter.some((parameter) => parameter.isRequired),\n            mediaType: 'multipart/form-data',\n            name: 'body',\n            prop: 'body',\n            properties: bodyParameter,\n          };\n        }\n\n        const headerParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'header',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'header',\n            ),\n          ),\n          mediaType: null,\n          name: isLegacy ? 'header' : 'headers',\n          prop: isLegacy ? 'header' : 'headers',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'header')\n            .sort(sorterByName),\n        };\n        const pathParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'path',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter((parameter) => parameter.in === 'path'),\n          ),\n          mediaType: null,\n          name: 'path',\n          prop: 'path',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'path')\n            .sort(sorterByName),\n        };\n        const queryParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'query',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'query',\n            ),\n          ),\n          mediaType: null,\n          name: 'query',\n          prop: 'query',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'query')\n            .sort(sorterByName),\n        };\n        const operationProperties = !isLegacy\n          ? [\n              bodyParameters,\n              headerParameters,\n              pathParameters,\n              queryParameters,\n            ].filter(\n              (param) =>\n                param.properties.length ||\n                param.$refs.length ||\n                param.mediaType,\n            )\n          : sortByName([...operation.parameters]);\n\n        methodMap.req = operationProperties;\n\n        // create type export for operation data\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationDataTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            isRequired: true,\n            properties: operationProperties,\n          }),\n        });\n      }\n\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (successResponses.length > 0) {\n        // create type export for operation response\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            export: 'any-of',\n            isRequired: true,\n            properties: successResponses,\n          }),\n        });\n\n        const errorResponses = operation.responses.filter((response) =>\n          response.responseTypes.includes('error'),\n        );\n\n        if (!isLegacy) {\n          // create type export for operation error\n          generateType({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operation.name,\n              name: operation.name,\n            },\n            nameTransformer: operationErrorTypeName,\n            onNode,\n            type: toType(\n              errorResponses.length\n                ? {\n                    ...emptyModel,\n                    export: 'one-of',\n                    isRequired: true,\n                    properties: errorResponses,\n                  }\n                : {\n                    ...emptyModel,\n                    base: 'unknown',\n                    isRequired: true,\n                    type: 'unknown',\n                  },\n            ),\n          });\n        }\n      }\n    }\n  }\n\n  const properties = Object.entries(pathsMap).map(([path, pathMap]) => {\n    const pathParameters = Object.entries(pathMap)\n      .map(([_method, methodMap]) => {\n        const method = _method as Method;\n\n        let methodParameters: Model[] = [];\n\n        if (methodMap.req) {\n          const operationName = methodMap.$ref!;\n          const { name: base } = setUniqueTypeName({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operationName,\n              name: operationName,\n            },\n            nameTransformer: operationDataTypeName,\n          });\n          const reqKey: Model = {\n            ...emptyModel,\n            base,\n            export: 'reference',\n            isRequired: true,\n            name: 'req',\n            properties: [],\n            type: base,\n          };\n          methodParameters = [...methodParameters, reqKey];\n        }\n\n        if (methodMap.res) {\n          const reqResParameters = Object.entries(methodMap.res).map(\n            ([code, base]) => {\n              // TODO: move query params into separate query key\n              const value: Model = {\n                ...emptyModel,\n                ...base,\n                isRequired: true,\n                name: String(code),\n              };\n              return value;\n            },\n          );\n\n          const resKey: Model = {\n            ...emptyModel,\n            isRequired: true,\n            name: 'res',\n            properties: reqResParameters,\n          };\n          methodParameters = [...methodParameters, resKey];\n        }\n\n        const methodKey: Model = {\n          ...emptyModel,\n          isRequired: true,\n          name: method.toLocaleLowerCase(),\n          properties: methodParameters,\n        };\n        return methodKey;\n      })\n      .filter(Boolean);\n    const pathKey: Model = {\n      ...emptyModel,\n      isRequired: true,\n      name: `'${path}'`,\n      properties: pathParameters as Model[],\n    };\n    return pathKey;\n  });\n\n  if (config.plugins['@hey-api/typescript']?.tree) {\n    generateType({\n      client,\n      meta: {\n        $ref: '@hey-api/openapi-ts',\n        name: treeName,\n      },\n      onNode,\n      type: toType({\n        ...emptyModel,\n        properties,\n      }),\n    });\n  }\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  files.types = new TypeScriptFile({\n    dir: config.output.path,\n    id: 'types',\n    name: 'types.ts',\n  });\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n\n  for (const model of client.models) {\n    processModel({ client, model, onNode });\n  }\n\n  processServiceTypes({ client, onNode });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { getOperationKey } from '../../../openApi/common/parser/operation';\nimport type { ModelMeta, OperationResponse } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport { isModelDate, unsetUniqueTypeName } from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  modelResponseTransformerTypeName,\n  operationResponseTransformerTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport { generateType, type TypesProps } from '../typescript/plugin-legacy';\nimport type { Config } from './types';\n\ninterface ModelProps extends TypesProps {\n  meta?: ModelMeta;\n  path: Array<string>;\n}\n\nconst dataVariableName = 'data';\n\nconst isVoidResponse = (response: OperationResponse) =>\n  response.base === 'unknown' &&\n  response.export === 'generic' &&\n  response.type === 'unknown';\n\nconst getRefModels = ({\n  client,\n  model,\n}: Pick<TypesProps, 'client' | 'model'>) => {\n  const refModels = model.$refs.map((ref) => {\n    const refModel = client.models.find((model) => model.meta?.$ref === ref);\n    if (!refModel) {\n      throw new Error(\n        `Ref ${ref} could not be found. Transformers cannot be generated without having access to all refs.`,\n      );\n    }\n    return refModel;\n  });\n  return refModels;\n};\n\nconst ensureModelResponseTransformerExists = (\n  props: Omit<ModelProps, 'path'>,\n) => {\n  const modelName = props.model.meta!.name;\n\n  const { name } = generateType({\n    ...props,\n    meta: {\n      $ref: `transformers/${modelName}`,\n      name: modelName,\n    },\n    nameTransformer: modelResponseTransformerTypeName,\n    onCreated: (name) => {\n      const statements = processModel({\n        ...props,\n        meta: {\n          $ref: `transformers/${modelName}`,\n          name,\n        },\n        path: [dataVariableName],\n      });\n      generateResponseTransformer({\n        ...props,\n        async: false,\n        name,\n        statements,\n      });\n    },\n    type: `(${dataVariableName}: any) => ${modelName}`,\n  });\n\n  const result = {\n    created: Boolean(props.client.types[name]),\n    name,\n  };\n  return result;\n};\n\nconst processArray = (props: ModelProps) => {\n  const { model } = props;\n  const refModels = getRefModels(props);\n\n  if (refModels.length === 1) {\n    const { created, name: nameModelResponseTransformer } =\n      ensureModelResponseTransformerExists({ ...props, model: refModels[0]! });\n\n    if (!created) {\n      return [];\n    }\n\n    return [\n      compiler.transformArrayMutation({\n        path: props.path,\n        transformerName: nameModelResponseTransformer,\n      }),\n    ];\n  }\n\n  if (\n    isModelDate(model) ||\n    (model.link &&\n      !Array.isArray(model.link) &&\n      model.link.export === 'any-of' &&\n      model.link.properties.find((property) => isModelDate(property)))\n  ) {\n    return [\n      compiler.transformArrayMap({\n        path: props.path,\n        transformExpression: compiler.conditionalExpression({\n          condition: compiler.identifier({ text: 'item' }),\n          whenFalse: compiler.identifier({ text: 'item' }),\n          whenTrue: compiler.transformNewDate({\n            parameterName: 'item',\n          }),\n        }),\n      }),\n    ];\n  }\n\n  // Not transform for this type\n  return [];\n};\n\nconst processProperty = (props: ModelProps) => {\n  const { model } = props;\n  const path = [...props.path, model.name];\n\n  if (\n    model.type === 'string' &&\n    model.export !== 'array' &&\n    isModelDate(model)\n  ) {\n    return [compiler.transformDateMutation({ path })];\n  }\n\n  // otherwise we recurse in case it's an object/array, and if it's not that will just bail with []\n  return processModel({\n    ...props,\n    model,\n    path,\n  });\n};\n\nconst processModel = (props: ModelProps): ts.Statement[] => {\n  const { model } = props;\n\n  switch (model.export) {\n    case 'array':\n      return processArray(props);\n    case 'interface':\n      return model.properties.flatMap((property) =>\n        processProperty({ ...props, model: property }),\n      );\n    case 'reference': {\n      if (model.$refs.length !== 1) {\n        return [];\n      }\n      const refModels = getRefModels(props);\n\n      const { created, name: nameModelResponseTransformer } =\n        ensureModelResponseTransformerExists({\n          ...props,\n          model: refModels[0]!,\n        });\n\n      if (!created) {\n        return [];\n      }\n\n      return model.in === 'response'\n        ? [\n            compiler.expressionToStatement({\n              expression: compiler.callExpression({\n                functionName: nameModelResponseTransformer,\n                parameters: [dataVariableName],\n              }),\n            }),\n          ]\n        : compiler.transformFunctionMutation({\n            path: props.path,\n            transformerName: nameModelResponseTransformer,\n          });\n    }\n    // unsupported\n    default:\n      return [];\n  }\n};\n\nconst generateResponseTransformer = ({\n  async,\n  client,\n  name,\n  onNode,\n  onRemoveNode,\n  statements,\n}: Pick<TypesProps, 'client' | 'onNode' | 'onRemoveNode'> & {\n  async: boolean;\n  name: string;\n  statements: Array<ts.Statement>;\n}) => {\n  const result = {\n    created: false,\n    name,\n  };\n\n  if (!statements.length) {\n    // clean up created type for response transformer if it turns out\n    // the transformer was never generated\n    unsetUniqueTypeName({\n      client,\n      name,\n    });\n    onRemoveNode?.();\n    return result;\n  }\n\n  const expression = compiler.arrowFunction({\n    async,\n    multiLine: true,\n    parameters: [\n      {\n        name: dataVariableName,\n      },\n    ],\n    statements: [\n      ...statements,\n      compiler.returnVariable({\n        expression: dataVariableName,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression,\n    name,\n    typeName: name,\n  });\n  onNode(statement);\n\n  return {\n    created: true,\n    name,\n  };\n};\n\n// handles only response transformers for now\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n  const onRemoveNode: TypesProps['onRemoveNode'] = () => {\n    files.types?.removeNode();\n  };\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (!successResponses.length) {\n        continue;\n      }\n\n      const nonVoidResponses = successResponses.filter(\n        (response) => !isVoidResponse(response),\n      );\n\n      if (!nonVoidResponses.length) {\n        continue;\n      }\n\n      if (nonVoidResponses.length > 1) {\n        if (config.logs.level === 'debug') {\n          console.warn(\n            `❗️ Transformers warning: route ${getOperationKey(operation)} has ${nonVoidResponses.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n          );\n        }\n        continue;\n      }\n\n      const name = operationResponseTypeName(operation.name);\n      generateType({\n        client,\n        meta: {\n          $ref: `transformers/${name}`,\n          name,\n        },\n        nameTransformer: operationResponseTransformerTypeName,\n        onCreated: (nameCreated) => {\n          const statements =\n            successResponses.length > 1\n              ? successResponses.flatMap((response) => {\n                  const statements = processModel({\n                    client,\n                    meta: {\n                      $ref: `transformers/${name}`,\n                      name,\n                    },\n                    model: response,\n                    onNode,\n                    onRemoveNode,\n                    path: [dataVariableName],\n                  });\n\n                  // assume unprocessed responses are void\n                  if (!statements.length) {\n                    return [];\n                  }\n\n                  return [\n                    compiler.ifStatement({\n                      expression: compiler.safeAccessExpression(['data']),\n                      thenStatement: compiler.block({ statements }),\n                    }),\n                  ];\n                })\n              : processModel({\n                  client,\n                  meta: {\n                    $ref: `transformers/${name}`,\n                    name,\n                  },\n                  model: successResponses[0]!,\n                  onNode,\n                  onRemoveNode,\n                  path: [dataVariableName],\n                });\n          generateResponseTransformer({\n            async: true,\n            client,\n            name: nameCreated,\n            onNode,\n            onRemoveNode,\n            statements,\n          });\n        },\n        onNode,\n        type: `(${dataVariableName}: any) => Promise<${name}>`,\n      });\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _tags: ['transformer'],\n  bigInt: true,\n  dates: true,\n  exportFromIndex: false,\n  name: '@hey-api/transformers',\n  output: 'transformers',\n};\n\n/**\n * Type helper for `@hey-api/transformers`, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport type { IR } from '../../../ir/types';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\n\n/**\n * Returns final field name for object properties. This might differ from the\n * original value as applying case transform function might alter it.\n */\nexport const fieldName = ({\n  context,\n  name,\n}: {\n  context: IR.Context;\n  name: string;\n}) => {\n  numberRegExp.lastIndex = 0;\n  if (numberRegExp.test(name)) {\n    // For negative numbers, use string literals instead\n    if (name.startsWith('-')) {\n      return ts.factory.createStringLiteral(name);\n    }\n    return ts.factory.createNumericLiteral(name);\n  }\n\n  // if (typeof context.config.output.case === 'function') {\n  //   return context.config.output.case({ value: name });\n  // }\n\n  return stringCase({ case: context.config.output.case, value: name });\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { Identifier } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\nimport type { Plugin } from '../../types';\nimport { getClientBaseUrlKey, getClientPlugin } from '../client-core/utils';\nimport { typesId } from './ref';\nimport type { Config } from './types';\n\nconst stringType = compiler.keywordTypeNode({ keyword: 'string' });\n\nconst serverToBaseUrlType = ({ server }: { server: IR.ServerObject }) => {\n  const url = parseUrl(server.url);\n\n  if (url.protocol && url.host) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: server.url }),\n    });\n  }\n\n  return compiler.templateLiteralType({\n    value: [\n      url.protocol || stringType,\n      '://',\n      url.host || stringType,\n      url.port ? `:${url.port}` : '',\n      url.path || '',\n    ],\n  });\n};\n\nexport const createClientOptions = ({\n  context,\n  identifier,\n  servers,\n}: {\n  context: IR.Context;\n  identifier: Identifier;\n  plugin: Plugin.Instance<Config>;\n  servers: ReadonlyArray<IR.ServerObject>;\n}) => {\n  const file = context.file({ id: typesId })!;\n\n  if (!identifier.name) {\n    return;\n  }\n\n  const client = getClientPlugin(context.config);\n\n  const types: Array<ts.TypeNode> = servers.map((server) =>\n    serverToBaseUrlType({ server }),\n  );\n\n  if (!servers.length) {\n    types.push(stringType);\n  } else if (!('strictBaseUrl' in client && client.strictBaseUrl)) {\n    types.push(\n      compiler.typeIntersectionNode({\n        types: [stringType, ts.factory.createTypeLiteralNode([])],\n      }),\n    );\n  }\n\n  const typeClientOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: identifier.name,\n    type: compiler.typeInterfaceNode({\n      properties: [\n        {\n          name: getClientBaseUrlKey(context.config),\n          type: compiler.typeUnionNode({ types }),\n        },\n      ],\n      useLegacyResolution: false,\n    }),\n  });\n\n  file.add(typeClientOptions);\n};\n","import ts from 'typescript';\n\nimport type { Property } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport { deduplicateSchema } from '../../../ir/schema';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { irRef, isRefOpenApiComponent } from '../../../utils/ref';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { fieldName } from '../../shared/utils/case';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { createClientOptions } from './clientOptions';\nimport { typesId } from './ref';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface State {\n  /**\n   * If set, we keep the specified properties (read-only or write-only) and\n   * strip the other type.\n   */\n  accessScope?: 'read' | 'write';\n}\n\nconst parseSchemaJsDoc = ({ schema }: { schema: IR.SchemaObject }) => {\n  const comments = [\n    schema.description && escapeComment(schema.description),\n    schema.deprecated && '@deprecated',\n  ].filter(Boolean);\n\n  if (!comments.length) {\n    return;\n  }\n\n  return comments;\n};\n\nconst scopeToRef = ({\n  $ref,\n  accessScope,\n  plugin,\n}: {\n  $ref: string;\n  accessScope?: 'both' | 'read' | 'write';\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!accessScope || accessScope === 'both') {\n    return $ref;\n  }\n\n  const refParts = $ref.split('/');\n  const name = refParts.pop()!;\n  const nameBuilder =\n    accessScope === 'read'\n      ? plugin.readableNameBuilder\n      : plugin.writableNameBuilder;\n  const processedName = processNameBuilder({ name, nameBuilder });\n  refParts.push(processedName);\n  return refParts.join('/');\n};\n\nconst processNameBuilder = ({\n  name,\n  nameBuilder,\n}: {\n  name: string;\n  nameBuilder: string | undefined;\n}) => {\n  if (!nameBuilder) {\n    return name;\n  }\n\n  return nameBuilder.replace('{{name}}', name);\n};\n\nconst shouldSkipSchema = ({\n  schema,\n  state,\n}: {\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}) =>\n  Boolean(\n    state?.accessScope &&\n      schema.accessScope &&\n      state.accessScope !== schema.accessScope,\n  );\n\nconst addJavaScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created) {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  const expression = compiler.objectExpression({\n    multiLine: true,\n    obj: enumObject.obj,\n  });\n  const node = compiler.constVariable({\n    assertion: 'const',\n    comment: parseSchemaJsDoc({ schema }),\n    exportConst: true,\n    expression,\n    name: identifier.name || '',\n  });\n  return node;\n};\n\nconst schemaToEnumObject = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}) => {\n  const typeofItems: Array<\n    | 'bigint'\n    | 'boolean'\n    | 'function'\n    | 'number'\n    | 'object'\n    | 'string'\n    | 'symbol'\n    | 'undefined'\n  > = [];\n\n  const obj = (schema.items ?? []).map((item) => {\n    const typeOfItemConst = typeof item.const;\n\n    if (!typeofItems.includes(typeOfItemConst)) {\n      // track types of enum values because some modes support\n      // only enums with string and number types\n      typeofItems.push(typeOfItemConst);\n    }\n\n    let key: string | undefined;\n    if (item.title) {\n      key = item.title;\n    } else if (typeOfItemConst === 'number' || typeOfItemConst === 'string') {\n      key = `${item.const}`;\n    } else if (typeOfItemConst === 'boolean') {\n      key = item.const ? 'true' : 'false';\n    } else if (item.const === null) {\n      key = 'null';\n    }\n\n    if (key) {\n      key = stringCase({\n        case: plugin.enumsCase,\n        stripLeadingSeparators: false,\n        value: key,\n      });\n\n      numberRegExp.lastIndex = 0;\n      // TypeScript enum keys cannot be numbers\n      if (\n        numberRegExp.test(key) &&\n        (plugin.enums === 'typescript' ||\n          plugin.enums === 'typescript+namespace')\n      ) {\n        key = `_${key}`;\n      }\n    }\n\n    return {\n      comments: parseSchemaJsDoc({ schema: item }),\n      key,\n      value: item.const,\n    };\n  });\n\n  return {\n    obj,\n    typeofItems,\n  };\n};\n\nconst addTypeEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeAliasDeclaration | undefined => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'type',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (\n    !identifier.created &&\n    !isRefOpenApiComponent($ref) &&\n    plugin.enums !== 'typescript+namespace'\n  ) {\n    return;\n  }\n\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      comment: parseSchemaJsDoc({ schema }),\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    return node;\n  }\n};\n\nconst addTypeScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created && plugin.enums !== 'typescript+namespace') {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // TypeScript enums support only string and number values so we need to fallback to types\n  if (\n    enumObject.typeofItems.filter(\n      (type) => type !== 'number' && type !== 'string',\n    ).length\n  ) {\n    const node = addTypeEnum({\n      $ref,\n      context,\n      plugin,\n      schema,\n      state,\n    });\n    return node;\n  }\n\n  const node = compiler.enumDeclaration({\n    leadingComment: parseSchemaJsDoc({ schema }),\n    name: identifier.name || '',\n    obj: enumObject.obj,\n  });\n  return node;\n};\n\nconst arrayTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'array'>;\n  state: State | undefined;\n}): ts.TypeNode => {\n  if (!schema.items) {\n    return compiler.typeArrayNode(\n      compiler.keywordTypeNode({\n        keyword: 'unknown',\n      }),\n    );\n  }\n\n  schema = deduplicateSchema({ schema });\n\n  const itemTypes: Array<ts.TypeNode> = [];\n\n  // at least one item is guaranteed (or at least was before read/write only)\n  for (const item of schema.items!) {\n    const type = schemaToType({\n      context,\n      namespace,\n      plugin,\n      schema: item,\n      state,\n    });\n\n    if (type) {\n      itemTypes.push(type);\n    }\n  }\n\n  if (itemTypes.length === 1) {\n    return compiler.typeArrayNode(itemTypes[0]!);\n  }\n\n  if (schema.logicalOperator === 'and') {\n    return compiler.typeArrayNode(\n      compiler.typeIntersectionNode({ types: itemTypes }),\n    );\n  }\n\n  return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemTypes }));\n};\n\nconst booleanTypeToIdentifier = ({\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'boolean'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.boolean(schema.const as boolean),\n    });\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'boolean',\n  });\n};\n\nconst enumTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = context.file({ id: typesId })!;\n  const isRefComponent = $ref ? isRefOpenApiComponent($ref) : false;\n  const shouldExportEnum = isRefComponent || Boolean(plugin.exportInlineEnums);\n\n  if ($ref && shouldExportEnum) {\n    // when enums are disabled (default), emit only reusable components\n    // as types, otherwise the output would be broken if we skipped all enums\n    if (!plugin.enums) {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n    }\n\n    if (plugin.enums === 'javascript') {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n\n      const objectNode = addJavaScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (objectNode) {\n        file.add(objectNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (enumNode) {\n        file.add(enumNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript+namespace') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (enumNode) {\n        if (isRefComponent) {\n          file.add(enumNode);\n        } else {\n          // emit enum inside TypeScript namespace\n          namespace.push(enumNode);\n        }\n      }\n    }\n  }\n\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n  return type;\n};\n\nconst numberTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'integer' | 'number'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.number(schema.const as number),\n    });\n  }\n\n  if (schema.type === 'integer' && schema.format === 'int64') {\n    // TODO: parser - add ability to skip type transformers\n    if (context.config.plugins['@hey-api/transformers']?.bigInt) {\n      return compiler.typeReferenceNode({ typeName: 'bigint' });\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'number',\n  });\n};\n\nconst objectTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'object'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  // TODO: parser - handle constants\n  let indexProperty: Property | undefined;\n  const schemaProperties: Array<Property> = [];\n  let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  let hasOptionalProperties = false;\n  let hasSkippedProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n\n    const skip = shouldSkipSchema({\n      schema: property,\n      state,\n    });\n\n    if (skip) {\n      hasSkippedProperties = true;\n      continue;\n    }\n\n    const isRequired = required.includes(name);\n    schemaProperties.push({\n      comment: parseSchemaJsDoc({ schema: property }),\n      isReadOnly: property.accessScope === 'read',\n      isRequired,\n      name: fieldName({ context, name }),\n      type: schemaToType({\n        $ref: `${irRef}${name}`,\n        context,\n        namespace,\n        plugin,\n        schema: property,\n        state,\n      }),\n    });\n    indexPropertyItems.push(property);\n\n    if (!isRequired) {\n      hasOptionalProperties = true;\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  ) {\n    if (schema.additionalProperties.type === 'never') {\n      indexPropertyItems = [schema.additionalProperties];\n    } else {\n      indexPropertyItems.unshift(schema.additionalProperties);\n    }\n\n    if (hasOptionalProperties) {\n      indexPropertyItems.push({\n        type: 'undefined',\n      });\n    }\n\n    indexProperty = {\n      isRequired: true,\n      name: 'key',\n      type: schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema:\n          indexPropertyItems.length === 1\n            ? indexPropertyItems[0]!\n            : {\n                items: indexPropertyItems,\n                logicalOperator: 'or',\n              },\n        state,\n      }),\n    };\n  }\n\n  if (hasSkippedProperties && !schemaProperties.length && !indexProperty) {\n    return;\n  }\n\n  return compiler.typeInterfaceNode({\n    indexProperty,\n    properties: schemaProperties,\n    useLegacyResolution: false,\n  });\n};\n\nconst stringTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'string'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: schema.const as string }),\n    });\n  }\n\n  if (schema.format) {\n    if (schema.format === 'binary') {\n      return compiler.typeUnionNode({\n        types: [\n          compiler.typeReferenceNode({\n            typeName: 'Blob',\n          }),\n          compiler.typeReferenceNode({\n            typeName: 'File',\n          }),\n        ],\n      });\n    }\n\n    if (schema.format === 'date-time' || schema.format === 'date') {\n      // TODO: parser - add ability to skip type transformers\n      if (context.config.plugins['@hey-api/transformers']?.dates) {\n        return compiler.typeReferenceNode({ typeName: 'Date' });\n      }\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'string',\n  });\n};\n\nconst tupleTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'tuple'>;\n  state: State | undefined;\n}): ts.TypeNode => {\n  let itemTypes: Array<ts.Expression | ts.TypeNode> = [];\n\n  if (schema.const && Array.isArray(schema.const)) {\n    itemTypes = schema.const.map((value) => {\n      const expression = compiler.valueToExpression({ value });\n      return expression ?? compiler.identifier({ text: 'unknown' });\n    });\n  } else if (schema.items) {\n    for (const item of schema.items) {\n      const type = schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema: item,\n        state,\n      });\n\n      if (type) {\n        itemTypes.push(type);\n      }\n    }\n  }\n\n  return compiler.typeTupleNode({\n    types: itemTypes,\n  });\n};\n\nconst schemaTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return arrayTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'array'>,\n        state,\n      });\n    case 'boolean':\n      return booleanTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'boolean'>,\n      });\n    case 'enum':\n      return enumTypeToIdentifier({\n        $ref,\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'enum'>,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return numberTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'integer' | 'number'>,\n      });\n    case 'never':\n      return compiler.keywordTypeNode({\n        keyword: 'never',\n      });\n    case 'null':\n      return compiler.literalTypeNode({\n        literal: compiler.null(),\n      });\n    case 'object':\n      return objectTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n        state,\n      });\n    case 'string':\n      return stringTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'string'>,\n      });\n    case 'tuple':\n      return tupleTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'tuple'>,\n        state,\n      });\n    case 'undefined':\n      return compiler.keywordTypeNode({\n        keyword: 'undefined',\n      });\n    case 'unknown':\n      return compiler.keywordTypeNode({\n        keyword: 'unknown',\n      });\n    case 'void':\n      return compiler.keywordTypeNode({\n        keyword: 'void',\n      });\n  }\n};\n\nconst irParametersToIrSchema = ({\n  parameters,\n}: {\n  parameters: Record<string, IR.ParameterObject>;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {\n    type: 'object',\n  };\n\n  if (parameters) {\n    const properties: Record<string, IR.SchemaObject> = {};\n    const required: Array<string> = [];\n\n    for (const name in parameters) {\n      const parameter = parameters[name]!;\n\n      properties[name] = deduplicateSchema({\n        schema: parameter.schema,\n      });\n\n      if (parameter.required) {\n        required.push(name);\n      }\n    }\n\n    irSchema.properties = properties;\n\n    if (required.length) {\n      irSchema.required = required;\n    }\n  }\n\n  return irSchema;\n};\n\nconst operationToDataType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const data: IR.SchemaObject = {\n    type: 'object',\n  };\n  const dataRequired: Array<string> = [];\n\n  if (!data.properties) {\n    data.properties = {};\n  }\n\n  if (operation.body) {\n    data.properties.body = operation.body.schema;\n\n    if (operation.body.required) {\n      dataRequired.push('body');\n    }\n  } else {\n    data.properties.body = {\n      type: 'never',\n    };\n  }\n\n  // TODO: parser - handle cookie parameters\n\n  // do not set headers to never so we can always pass arbitrary values\n  if (operation.parameters?.header) {\n    data.properties.headers = irParametersToIrSchema({\n      parameters: operation.parameters.header,\n    });\n\n    if (data.properties.headers.required) {\n      dataRequired.push('headers');\n    }\n  }\n\n  if (operation.parameters?.path) {\n    data.properties.path = irParametersToIrSchema({\n      parameters: operation.parameters.path,\n    });\n\n    if (data.properties.path.required) {\n      dataRequired.push('path');\n    }\n  } else {\n    data.properties.path = {\n      type: 'never',\n    };\n  }\n\n  if (operation.parameters?.query) {\n    data.properties.query = irParametersToIrSchema({\n      parameters: operation.parameters.query,\n    });\n\n    if (data.properties.query.required) {\n      dataRequired.push('query');\n    }\n  } else {\n    data.properties.query = {\n      type: 'never',\n    };\n  }\n\n  data.properties.url = {\n    const: operation.path,\n    type: 'string',\n  };\n  dataRequired.push('url');\n\n  data.required = dataRequired;\n\n  const identifier = file.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    create: true,\n    namespace: 'type',\n  });\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: data,\n    state:\n      plugin.readOnlyWriteOnlyBehavior === 'off'\n        ? undefined\n        : {\n            accessScope: 'write',\n          },\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    file.add(node);\n  }\n};\n\nconst operationToType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  operationToDataType({\n    context,\n    operation,\n    plugin,\n  });\n\n  const file = context.file({ id: typesId })!;\n\n  const { error, errors, response, responses } =\n    operationResponsesMap(operation);\n\n  if (errors) {\n    const identifierErrors = file.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'errors' }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierErrors.name) {\n      const type = schemaToType({\n        context,\n        plugin,\n        schema: errors,\n        state:\n          plugin.readOnlyWriteOnlyBehavior === 'off'\n            ? undefined\n            : {\n                accessScope: 'read',\n              },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierErrors.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (error) {\n        const identifierError = file.identifier({\n          $ref: operationIrRef({ id: operation.id, type: 'error' }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierError.name) {\n          const errorsType = compiler.typeReferenceNode({\n            typeName: identifierErrors.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            errorsType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierError.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: errorsType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n\n  if (responses) {\n    const identifierResponses = file.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'responses' }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierResponses.name) {\n      const type = schemaToType({\n        context,\n        plugin,\n        schema: responses,\n        state:\n          plugin.readOnlyWriteOnlyBehavior === 'off'\n            ? undefined\n            : {\n                accessScope: 'read',\n              },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierResponses.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          $ref: operationIrRef({ id: operation.id, type: 'response' }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierResponse.name) {\n          const responsesType = compiler.typeReferenceNode({\n            typeName: identifierResponses.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            responsesType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierResponse.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: responsesType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Is this schema split into a readable and writable variant? We won't split\n * schemas if they don't contain any read-only or write-only fields or if they\n * contain ONLY read-only or write-only fields. We split only when there's a\n * mix of different access scopes for the schema.\n */\nconst isSchemaSplit = ({ schema }: { schema: IR.SchemaObject }): boolean => {\n  const scopes = schema.accessScopes;\n  return scopes !== undefined && scopes.length > 1;\n};\n\nconst hasSchemaScope = ({\n  accessScope,\n  schema,\n}: {\n  accessScope: Required<State>['accessScope'];\n  schema: IR.SchemaObject;\n}): boolean => {\n  const scopes = schema.accessScopes;\n  return (\n    !scopes ||\n    (scopes !== undefined &&\n      (scopes.includes(accessScope) || scopes.includes('both')))\n  );\n};\n\nexport const schemaToType = ({\n  $ref,\n  context,\n  namespace = [],\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace?: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = context.file({ id: typesId })!;\n\n  let type: ts.TypeNode | undefined;\n\n  if (schema.$ref) {\n    const refSchema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n\n    if (\n      !state?.accessScope ||\n      hasSchemaScope({ accessScope: state.accessScope, schema: refSchema })\n    ) {\n      const finalRef = scopeToRef({\n        $ref: schema.$ref,\n        accessScope: isSchemaSplit({ schema: refSchema })\n          ? state?.accessScope\n          : undefined,\n        plugin,\n      });\n      const identifier = file.identifier({\n        $ref: finalRef,\n        create: true,\n        namespace: 'type',\n      });\n      type = compiler.typeReferenceNode({\n        typeName: identifier.name || '',\n      });\n    }\n  } else if (schema.type) {\n    type = schemaTypeToIdentifier({\n      $ref,\n      context,\n      namespace,\n      plugin,\n      schema,\n      state,\n    });\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n    if (schema.items) {\n      const itemTypes: Array<ts.TypeNode> = [];\n\n      for (const item of schema.items) {\n        const type = schemaToType({\n          context,\n          namespace,\n          plugin,\n          schema: item,\n          state,\n        });\n        if (type) {\n          itemTypes.push(type);\n        }\n      }\n\n      type =\n        schema.logicalOperator === 'and'\n          ? compiler.typeIntersectionNode({ types: itemTypes })\n          : compiler.typeUnionNode({ types: itemTypes });\n    } else {\n      type = schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema,\n        state,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    type = schemaTypeToIdentifier({\n      context,\n      namespace,\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n      state,\n    });\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if ($ref && isRefOpenApiComponent($ref)) {\n    // emit namespace if it has any members\n    if (namespace.length) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'value',\n      });\n      const node = compiler.namespaceDeclaration({\n        name: identifier.name || '',\n        statements: namespace,\n      });\n      file.add(node);\n    }\n\n    // enum handler emits its own artifacts\n    if (schema.type !== 'enum' && type) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'type',\n      });\n      const node = compiler.typeAliasDeclaration({\n        comment: parseSchemaJsDoc({ schema }),\n        exportType: true,\n        name: identifier.name || '',\n        type,\n      });\n      file.add(node);\n    }\n  }\n\n  return type;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: typesId,\n    identifierCase: plugin.identifierCase,\n    path: plugin.output,\n  });\n\n  // reserve identifier for ClientOptions\n  const clientOptions = file.identifier({\n    $ref: 'ClientOptions',\n    create: true,\n    namespace: 'type',\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    if (\n      plugin.readOnlyWriteOnlyBehavior === 'off' ||\n      !isSchemaSplit({ schema })\n    ) {\n      schemaToType({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state: undefined,\n      });\n      return;\n    }\n\n    if (hasSchemaScope({ accessScope: 'read', schema })) {\n      schemaToType({\n        $ref: scopeToRef({\n          $ref,\n          accessScope: 'read',\n          plugin,\n        }),\n        context,\n        plugin,\n        schema,\n        state: {\n          accessScope: 'read',\n        },\n      });\n    }\n\n    if (hasSchemaScope({ accessScope: 'write', schema })) {\n      schemaToType({\n        $ref: scopeToRef({\n          $ref,\n          accessScope: 'write',\n          plugin,\n        }),\n        context,\n        plugin,\n        schema,\n        state: {\n          accessScope: 'write',\n        },\n      });\n    }\n  });\n\n  context.subscribe('parameter', ({ $ref, parameter }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: parameter.schema,\n      state: undefined,\n    });\n  });\n\n  context.subscribe('requestBody', ({ $ref, requestBody }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: requestBody.schema,\n      state:\n        plugin.readOnlyWriteOnlyBehavior === 'off'\n          ? undefined\n          : {\n              accessScope: 'write',\n            },\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    operationToType({\n      context,\n      operation,\n      plugin,\n    });\n  });\n\n  const servers: Array<IR.ServerObject> = [];\n\n  context.subscribe('server', ({ server }) => {\n    servers.push(server);\n  });\n\n  context.subscribe('after', () => {\n    createClientOptions({\n      context,\n      identifier: clientOptions,\n      plugin,\n      servers,\n    });\n  });\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  enums: false,\n  enumsCase: 'SCREAMING_SNAKE_CASE',\n  exportFromIndex: true,\n  exportInlineEnums: false,\n  identifierCase: 'PascalCase',\n  name: '@hey-api/typescript',\n  output: 'types',\n  readOnlyWriteOnlyBehavior: 'split',\n  readableNameBuilder: '{{name}}Readable',\n  style: 'preserve',\n  tree: false,\n  writableNameBuilder: '{{name}}Writable',\n};\n\n/**\n * Type helper for `@hey-api/typescript` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { tsNodeToString } from '../../../compiler/utils';\nimport { clientApi } from '../../../generate/client';\nimport {\n  hasOperationDataRequired,\n  operationPagination,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { schemaToType } from '../../@hey-api/typescript/plugin';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyName,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\n\nconst createInfiniteParamsFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeReferenceNode({\n            typeName: `QueryKey<${clientApi.Options.name}>`,\n          }),\n        },\n        {\n          name: 'page',\n          type: compiler.typeReferenceNode({ typeName: 'K' }),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: compiler.asExpression({\n            expression: compiler.asExpression({\n              expression: compiler.identifier({ text: 'params' }),\n              type: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            }),\n            type: ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          }),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.Options.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst infiniteQueryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}InfiniteOptions`;\n\nexport const createInfiniteQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.infiniteQueryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const pagination = operationPagination({ context, operation });\n\n  if (!pagination) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequired = hasOperationDataRequired(operation);\n\n  if (!state.hasInfiniteQueries) {\n    state.hasInfiniteQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    if (!state.hasCreateInfiniteParamsFunction) {\n      createInfiniteParamsFunction({ context, plugin });\n      state.hasCreateInfiniteParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: infiniteQueryOptionsFn,\n    });\n\n    state.typeInfiniteData = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'InfiniteData',\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n\n  const typeQueryKey = `${queryKeyName}<${typeData}>`;\n  const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n  // TODO: parser - this is a bit clunky, need to compile type to string because\n  // `compiler.returnFunctionCall()` accepts only strings, should be cleaned up\n  const type = schemaToType({\n    context,\n    plugin: context.config.plugins['@hey-api/typescript'] as Parameters<\n      typeof schemaToType\n    >[0]['plugin'],\n    schema: pagination.schema,\n    state: undefined,\n  });\n  const typePageParam = type\n    ? `${tsNodeToString({\n        node: type,\n        unescape: true,\n      })} | ${typePageObjectParam}`\n    : `${typePageObjectParam}`;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: true,\n    operation,\n    plugin,\n    typeQueryKey,\n  });\n  file.add(node);\n\n  const infiniteQueryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: true,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${infiniteQueryKeyName}`,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              comments: [\n                {\n                  jsdoc: false,\n                  lines: ['@ts-ignore'],\n                },\n              ],\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'pageParam',\n                          },\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements: [\n                      compiler.constVariable({\n                        comment: [\n                          {\n                            jsdoc: false,\n                            lines: ['@ts-ignore'],\n                          },\n                        ],\n                        expression: compiler.conditionalExpression({\n                          condition: compiler.binaryExpression({\n                            left: compiler.typeOfExpression({\n                              text: 'pageParam',\n                            }),\n                            operator: '===',\n                            right: compiler.ots.string('object'),\n                          }),\n                          whenFalse: compiler.objectExpression({\n                            multiLine: true,\n                            obj: [\n                              {\n                                key: pagination.in,\n                                value: compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      key: pagination.name,\n                                      value: compiler.identifier({\n                                        text: 'pageParam',\n                                      }),\n                                    },\n                                  ],\n                                }),\n                              },\n                            ],\n                          }),\n                          whenTrue: compiler.identifier({\n                            text: 'pageParam',\n                          }),\n                        }),\n                        name: 'page',\n                        typeName: typePageObjectParam,\n                      }),\n                      compiler.constVariable({\n                        expression: compiler.callExpression({\n                          functionName: createInfiniteParamsFn,\n                          parameters: ['queryKey', 'page'],\n                        }),\n                        name: 'params',\n                      }),\n                      compiler.constVariable({\n                        destructure: true,\n                        expression: compiler.awaitExpression({\n                          expression: compiler.callExpression({\n                            functionName: queryFn,\n                            parameters: [\n                              compiler.objectExpression({\n                                multiLine: true,\n                                obj: [\n                                  {\n                                    spread: 'options',\n                                  },\n                                  {\n                                    spread: 'params',\n                                  },\n                                  {\n                                    key: 'signal',\n                                    shorthand: true,\n                                    value: compiler.identifier({\n                                      text: 'signal',\n                                    }),\n                                  },\n                                  {\n                                    key: 'throwOnError',\n                                    value: true,\n                                  },\n                                ],\n                              }),\n                            ],\n                          }),\n                        }),\n                        name: 'data',\n                      }),\n                      compiler.returnVariable({\n                        expression: 'data',\n                      }),\n                    ],\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: infiniteQueryOptionsFn,\n          // TODO: better types syntax\n          types: [\n            typeResponse,\n            typeError.name,\n            `${typeof state.typeInfiniteData === 'string' ? state.typeInfiniteData : state.typeInfiniteData.name}<${typeResponse}>`,\n            typeQueryKey,\n            typePageParam,\n          ],\n        }),\n      ],\n    }),\n    name: infiniteQueryOptionsFunctionIdentifier({\n      context,\n      operation,\n    }),\n  });\n  file.add(statement);\n};\n","import type { ImportExportItemObject } from '../../../compiler/utils';\nimport type { IR } from '../../../ir/types';\nimport { getClientPlugin } from '../../@hey-api/client-core/utils';\nimport { operationOptionsType } from '../../@hey-api/sdk/plugin';\nimport {\n  importIdentifierError,\n  importIdentifierResponse,\n} from '../../@hey-api/typescript/ref';\nimport type { PluginInstance } from './types';\n\nexport const useTypeData = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const typeData = operationOptionsType({\n    context,\n    file,\n    operation,\n  });\n  return typeData;\n};\n\nexport const useTypeError = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierError = importIdentifierError({ context, file, operation });\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: identifierError.name || '',\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'DefaultError',\n    });\n  }\n  const client = getClientPlugin(context.config);\n  if (client.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n  return typeError;\n};\n\nexport const useTypeResponse = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierResponse = importIdentifierResponse({\n    context,\n    file,\n    operation,\n  });\n  const typeResponse = identifierResponse.name || 'unknown';\n  return typeResponse;\n};\n","import { compiler, type Property } from '../../../compiler';\nimport { clientApi } from '../../../generate/client';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { getClientBaseUrlKey } from '../../@hey-api/client-core/utils';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport type { PluginInstance } from './types';\nimport { useTypeData } from './useType';\n\nconst createQueryKeyFn = 'createQueryKey';\nexport const queryKeyName = 'QueryKey';\nconst TOptionsType = 'TOptions';\n\nconst infiniteIdentifier = compiler.identifier({ text: 'infinite' });\nconst optionsIdentifier = compiler.identifier({ text: 'options' });\n\nexport const createQueryKeyFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    create: true,\n    namespace: 'value',\n  });\n\n  if (identifierCreateQueryKey.name) {\n    const returnType = compiler.indexedAccessTypeNode({\n      indexType: compiler.literalTypeNode({\n        literal: compiler.ots.number(0),\n      }),\n      objectType: compiler.typeReferenceNode({\n        typeArguments: [compiler.typeReferenceNode({ typeName: TOptionsType })],\n        typeName: queryKeyName,\n      }),\n    });\n\n    const fn = compiler.constVariable({\n      expression: compiler.arrowFunction({\n        multiLine: true,\n        parameters: [\n          {\n            name: 'id',\n            type: compiler.typeReferenceNode({ typeName: 'string' }),\n          },\n          {\n            isRequired: false,\n            name: 'options',\n            type: compiler.typeReferenceNode({ typeName: TOptionsType }),\n          },\n          {\n            isRequired: false,\n            name: 'infinite',\n            type: compiler.typeReferenceNode({ typeName: 'boolean' }),\n          },\n        ],\n        returnType: compiler.typeTupleNode({\n          types: [returnType],\n        }),\n        statements: [\n          compiler.constVariable({\n            assertion: returnType,\n            expression: compiler.objectExpression({\n              multiLine: false,\n              obj: [\n                {\n                  key: '_id',\n                  value: compiler.identifier({ text: 'id' }),\n                },\n                {\n                  key: getClientBaseUrlKey(context.config),\n                  value: compiler.identifier({\n                    text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(context.config)}`,\n                  }),\n                },\n              ],\n            }),\n            name: 'params',\n            typeName: returnType,\n          }),\n          compiler.ifStatement({\n            expression: infiniteIdentifier,\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: '_infinite',\n                    }),\n                    right: infiniteIdentifier,\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'body' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'body',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'body',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'headers' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'headers',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'headers',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'path' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'path',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'path',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'query' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'query',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'query',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.returnStatement({\n            expression: compiler.arrayLiteralExpression({\n              elements: [compiler.identifier({ text: 'params' })],\n            }),\n          }),\n        ],\n        types: [\n          {\n            extends: compiler.typeReferenceNode({\n              typeName: compiler.identifier({\n                text: clientApi.Options.name,\n              }),\n            }),\n            name: TOptionsType,\n          },\n        ],\n      }),\n      name: identifierCreateQueryKey.name,\n    });\n    file.add(fn);\n  }\n};\n\nconst createQueryKeyLiteral = ({\n  context,\n  id,\n  isInfinite,\n  plugin,\n}: {\n  context: IR.Context;\n  id: string;\n  isInfinite?: boolean;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    namespace: 'value',\n  });\n  const createQueryKeyCallExpression = compiler.callExpression({\n    functionName: identifierCreateQueryKey.name || '',\n    parameters: [\n      compiler.ots.string(id),\n      'options',\n      isInfinite ? compiler.ots.boolean(true) : undefined,\n    ],\n  });\n  return createQueryKeyCallExpression;\n};\n\nexport const createQueryKeyType = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(context.config)}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.Options.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nexport const queryKeyFunctionIdentifier = ({\n  context,\n  isInfinite,\n  operation,\n}: {\n  context: IR.Context;\n  isInfinite?: boolean;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nexport const queryKeyStatement = ({\n  context,\n  isInfinite,\n  operation,\n  plugin,\n  typeQueryKey,\n}: {\n  context: IR.Context;\n  isInfinite: boolean;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  typeQueryKey?: string;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const typeData = useTypeData({ context, operation, plugin });\n  const name = queryKeyFunctionIdentifier({\n    context,\n    isInfinite,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${name}`,\n    create: true,\n    namespace: 'value',\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: hasOperationDataRequired(operation),\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      returnType: isInfinite ? typeQueryKey : undefined,\n      statements: createQueryKeyLiteral({\n        context,\n        id: operation.id,\n        isInfinite,\n        plugin,\n      }),\n    }),\n    name: identifierQueryKey.name || '',\n  });\n  return statement;\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst mutationOptionsFn = 'mutationOptions';\n\nconst mutationOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Mutation`;\n\nexport const createMutationOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.mutationOptions ||\n    !(\n      ['delete', 'patch', 'post', 'put'] as (typeof operation.method)[]\n    ).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  const file = context.file({ id: plugin.name })!;\n\n  if (!state.hasMutations) {\n    state.hasMutations = true;\n\n    file.import({\n      asType: true,\n      module: plugin.name,\n      name: mutationsType,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n  // TODO: better types syntax\n  const mutationType = `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`;\n\n  const expression = compiler.arrowFunction({\n    parameters: [\n      {\n        isRequired: false,\n        name: 'options',\n        type: `Partial<${typeData}>`,\n      },\n    ],\n    returnType: mutationType,\n    statements: [\n      compiler.constVariable({\n        expression: compiler.objectExpression({\n          obj: [\n            {\n              key: 'mutationFn',\n              value: compiler.arrowFunction({\n                async: true,\n                multiLine: true,\n                parameters: [\n                  {\n                    name: 'localOptions',\n                  },\n                ],\n                statements: [\n                  compiler.constVariable({\n                    destructure: true,\n                    expression: compiler.awaitExpression({\n                      expression: compiler.callExpression({\n                        functionName: queryFn,\n                        parameters: [\n                          compiler.objectExpression({\n                            multiLine: true,\n                            obj: [\n                              {\n                                spread: 'options',\n                              },\n                              {\n                                spread: 'localOptions',\n                              },\n                              {\n                                key: 'throwOnError',\n                                value: true,\n                              },\n                            ],\n                          }),\n                        ],\n                      }),\n                    }),\n                    name: 'data',\n                  }),\n                  compiler.returnVariable({\n                    expression: 'data',\n                  }),\n                ],\n              }),\n            },\n          ],\n        }),\n        name: mutationOptionsFn,\n        typeName: mutationType,\n      }),\n      compiler.returnVariable({\n        expression: mutationOptionsFn,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression,\n    name: mutationOptionsFunctionIdentifier({ context, operation }),\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { compiler } from '../../../compiler';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData } from './useType';\n\nconst queryOptionsFn = 'queryOptions';\n\nconst queryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Options`;\n\nexport const createQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.queryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequired = hasOperationDataRequired(operation);\n\n  if (!state.hasQueries) {\n    state.hasQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: queryOptionsFn,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: false,\n    operation,\n    plugin,\n  });\n  file.add(node);\n\n  const typeData = useTypeData({ context, operation, plugin });\n\n  const queryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: false,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${queryKeyName}`,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements: [\n                      compiler.constVariable({\n                        destructure: true,\n                        expression: compiler.awaitExpression({\n                          expression: compiler.callExpression({\n                            functionName: queryFn,\n                            parameters: [\n                              compiler.objectExpression({\n                                multiLine: true,\n                                obj: [\n                                  {\n                                    spread: 'options',\n                                  },\n                                  {\n                                    spread: 'queryKey[0]',\n                                  },\n                                  {\n                                    key: 'signal',\n                                    shorthand: true,\n                                    value: compiler.identifier({\n                                      text: 'signal',\n                                    }),\n                                  },\n                                  {\n                                    key: 'throwOnError',\n                                    value: true,\n                                  },\n                                ],\n                              }),\n                            ],\n                          }),\n                        }),\n                        name: 'data',\n                      }),\n                      compiler.returnVariable({\n                        expression: 'data',\n                      }),\n                    ],\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: queryOptionsFn,\n        }),\n      ],\n    }),\n    name: queryOptionsFunctionIdentifier({ context, operation }),\n    // TODO: add type error\n    // TODO: AxiosError<PutSubmissionMetaError>\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { clientApi } from '../../../generate/client';\nimport { getServiceName } from '../../../utils/postprocess';\nimport { transformServiceName } from '../../../utils/transform';\nimport { clientId } from '../../@hey-api/client-core/utils';\nimport { sdkId } from '../../@hey-api/sdk/constants';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { createInfiniteQueryOptions } from './infiniteQueryOptions';\nimport { createMutationOptions } from './mutationOptions';\nimport { createQueryOptions } from './queryOptions';\nimport type { PluginHandler, PluginState } from './types';\n\nexport const handler: PluginHandler = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: plugin.name,\n    path: plugin.output,\n  });\n\n  const state: PluginState = {\n    hasCreateInfiniteParamsFunction: false,\n    hasCreateQueryKeyParamsFunction: false,\n    hasInfiniteQueries: false,\n    hasMutations: false,\n    hasQueries: false,\n    hasUsedQueryFn: false,\n    typeInfiniteData: undefined!,\n  };\n\n  context.subscribe('before', () => {\n    file.import({\n      ...clientApi.Options,\n      module: file.relativePathToFile({ context, id: sdkId }),\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    state.hasUsedQueryFn = false;\n\n    const queryFn = [\n      context.config.plugins['@hey-api/sdk']?.asClass &&\n        transformServiceName({\n          config: context.config,\n          name: getServiceName(operation.tags?.[0] || 'default'),\n        }),\n      serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: !context.config.plugins['@hey-api/sdk']?.asClass,\n        id: operation.id,\n        operation,\n      }),\n    ]\n      .filter(Boolean)\n      .join('.');\n\n    createQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createInfiniteQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createMutationOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    if (state.hasUsedQueryFn) {\n      file.import({\n        module: file.relativePathToFile({ context, id: sdkId }),\n        name: queryFn.split('.')[0]!,\n      });\n    }\n  });\n\n  context.subscribe('after', () => {\n    if (state.hasQueries || state.hasInfiniteQueries) {\n      file.import({\n        alias: '_heyApiClient',\n        module: file.relativePathToFile({ context, id: clientId }),\n        name: 'client',\n      });\n    }\n  });\n};\n","import ts from 'typescript';\n\nimport { compiler, type Property } from '../../../compiler';\nimport type { ImportExportItem } from '../../../compiler/module';\nimport type { ImportExportItemObject } from '../../../compiler/utils';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { relativeModulePath } from '../../../generate/utils';\nimport { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport { getOperationKey } from '../../../openApi/common/parser/operation';\nimport type {\n  Client,\n  Method,\n  Model,\n  Operation,\n  OperationParameter,\n} from '../../../types/client';\nimport type { Config } from '../../../types/config';\nimport type { Files } from '../../../types/utils';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { transformServiceName } from '../../../utils/transform';\nimport {\n  getClientBaseUrlKey,\n  getClientPlugin,\n} from '../../@hey-api/client-core/utils';\nimport {\n  generateImport,\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationOptionsLegacyParserType,\n  operationResponseTypeName,\n  serviceFunctionIdentifier,\n} from '../../@hey-api/sdk/plugin-legacy';\nimport type { Plugin } from '../../types';\nimport type { Config as AngularQueryConfig } from '../angular-query-experimental';\nimport type { Config as ReactQueryConfig } from '../react-query';\nimport type { Config as SolidQueryConfig } from '../solid-query';\nimport type { Config as SvelteQueryConfig } from '../svelte-query';\nimport type { Config as VueQueryConfig } from '../vue-query';\n\nconst toInfiniteQueryOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}InfiniteOptions`;\n\nconst toMutationOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}Mutation`;\n\nconst toQueryOptionsName = ({\n  config,\n  id,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}Options`;\n\nconst toQueryKeyName = ({\n  config,\n  id,\n  isInfinite,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  isInfinite?: boolean;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nconst getPaginationIn = (parameter: OperationParameter) => {\n  switch (parameter.in) {\n    case 'formData':\n      return 'body';\n    case 'header':\n      return 'headers';\n    default:\n      return parameter.in;\n  }\n};\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst createQueryKeyFn = 'createQueryKey';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\nconst mutationOptionsFn = 'mutationOptions';\nconst queryKeyName = 'QueryKey';\nconst queryOptionsFn = 'queryOptions';\nconst TOptionsType = 'TOptions';\n\nconst createInfiniteParamsFunction = ({\n  file,\n}: {\n  file: Files[keyof Files];\n}) => {\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeNode(\n            `QueryKey<${clientApi.OptionsLegacyParser.name}>`,\n          ),\n        },\n        {\n          name: 'page',\n          type: compiler.typeNode('K'),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: ts.factory.createAsExpression(\n            ts.factory.createAsExpression(\n              compiler.identifier({ text: 'params' }),\n              ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n            ),\n            ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          ),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.OptionsLegacyParser.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyFunction = ({ file }: { file: Files[keyof Files] }) => {\n  const returnType = compiler.indexedAccessTypeNode({\n    indexType: compiler.typeNode(0),\n    objectType: compiler.typeNode(queryKeyName, [\n      compiler.typeNode(TOptionsType),\n    ]),\n  });\n\n  const infiniteIdentifier = compiler.identifier({ text: 'infinite' });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'id',\n          type: compiler.typeNode('string'),\n        },\n        {\n          isRequired: false,\n          name: 'options',\n          type: compiler.typeNode(TOptionsType),\n        },\n        {\n          isRequired: false,\n          name: 'infinite',\n          type: compiler.typeNode('boolean'),\n        },\n      ],\n      returnType,\n      statements: [\n        compiler.constVariable({\n          assertion: returnType,\n          expression: compiler.objectExpression({\n            multiLine: false,\n            obj: [\n              {\n                key: '_id',\n                value: compiler.identifier({ text: 'id' }),\n              },\n              {\n                key: getClientBaseUrlKey(getConfig()),\n                value: compiler.identifier({\n                  text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(getConfig())}`,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n          typeName: returnType,\n        }),\n        compiler.ifStatement({\n          expression: infiniteIdentifier,\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: '_infinite',\n                  }),\n                  right: infiniteIdentifier,\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'body',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'headers',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'path',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'query',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: 'params',\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: clientApi.OptionsLegacyParser.name,\n            }),\n          }),\n          name: TOptionsType,\n        },\n      ],\n    }),\n    name: createQueryKeyFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyType = ({ file }: { file: Files[keyof Files] }) => {\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(getConfig())}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.OptionsLegacyParser.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nconst createTypeData = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeData } = generateImport({\n    client,\n    meta: operation.parameters.length\n      ? {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        }\n      : undefined,\n    nameTransformer: operationDataTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  const typeData = operationOptionsLegacyParserType({\n    importedType: nameTypeData,\n  });\n\n  return { typeData };\n};\n\nconst createTypeError = ({\n  client,\n  file,\n  operation,\n  pluginName,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  pluginName: string;\n  typesModulePath: string;\n}) => {\n  const config = getConfig();\n\n  const { name: nameTypeError } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationErrorTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: nameTypeError,\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: pluginName,\n      name: 'DefaultError',\n    });\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n\n  return { typeError };\n};\n\nconst createTypeResponse = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeResponse } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationResponseTypeName,\n    onImport: (imported) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name: imported,\n      });\n    },\n  });\n\n  const typeResponse = nameTypeResponse || 'void';\n\n  return { typeResponse };\n};\n\nconst createQueryKeyLiteral = ({\n  id,\n  isInfinite,\n}: {\n  id: string;\n  isInfinite?: boolean;\n}) => {\n  const queryKeyLiteral = compiler.arrayLiteralExpression({\n    elements: [\n      compiler.callExpression({\n        functionName: createQueryKeyFn,\n        parameters: [\n          compiler.ots.string(id),\n          'options',\n          isInfinite ? compiler.ots.boolean(true) : undefined,\n        ],\n      }),\n    ],\n    multiLine: false,\n  });\n  return queryKeyLiteral;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<\n  | ReactQueryConfig\n  | AngularQueryConfig\n  | SolidQueryConfig\n  | SvelteQueryConfig\n  | VueQueryConfig\n> = ({ client, files, plugin }) => {\n  const config = getConfig();\n\n  if (isLegacyClient(config)) {\n    throw new Error('🚫 TanStack Query plugin does not support legacy clients');\n  }\n\n  const file = files[plugin.name]!;\n\n  file.import({\n    ...clientApi.OptionsLegacyParser,\n    module: clientModulePath({ config, sourceOutput: plugin.output }),\n  });\n\n  const typesModulePath = relativeModulePath({\n    moduleOutput: files.types!.nameWithoutExtension(),\n    sourceOutput: plugin.output,\n  });\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  let typeInfiniteData!: ImportExportItem;\n  let hasCreateInfiniteParamsFunction = false;\n  let hasCreateQueryKeyParamsFunction = false;\n  let hasInfiniteQueries = false;\n  let hasMutations = false;\n  let hasQueries = false;\n\n  const processedOperations = new Map<string, boolean>();\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      // track processed operations to avoid creating duplicates\n      const operationKey = getOperationKey(operation);\n      if (processedOperations.has(operationKey)) {\n        continue;\n      }\n      processedOperations.set(operationKey, true);\n\n      const queryFn = [\n        config.plugins['@hey-api/sdk']?.asClass &&\n          transformServiceName({\n            config,\n            name: service.name,\n          }),\n        serviceFunctionIdentifier({\n          config,\n          handleIllegal: !config.plugins['@hey-api/sdk']?.asClass,\n          id: operation.name,\n          operation,\n        }),\n      ]\n        .filter(Boolean)\n        .join('.');\n      let hasUsedQueryFn = false;\n\n      // queries\n      if (\n        plugin.queryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        if (!hasQueries) {\n          hasQueries = true;\n\n          if (!hasCreateQueryKeyParamsFunction) {\n            createQueryKeyType({ file });\n            createQueryKeyFunction({ file });\n            hasCreateQueryKeyParamsFunction = true;\n          }\n\n          file.import({\n            module: plugin.name,\n            name: queryOptionsFn,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const isRequired = isOperationParameterRequired(operation.parameters);\n\n        const queryKeyStatement = compiler.constVariable({\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: createQueryKeyLiteral({\n              id: operation.name,\n            }),\n          }),\n          name: toQueryKeyName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n        });\n        file.add(queryKeyStatement);\n\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: [\n              compiler.returnFunctionCall({\n                args: [\n                  compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'queryFn',\n                        value: compiler.arrowFunction({\n                          async: true,\n                          multiLine: true,\n                          parameters: [\n                            {\n                              destructure: [\n                                {\n                                  name: 'queryKey',\n                                },\n                                {\n                                  name: 'signal',\n                                },\n                              ],\n                            },\n                          ],\n                          statements: [\n                            compiler.constVariable({\n                              destructure: true,\n                              expression: compiler.awaitExpression({\n                                expression: compiler.callExpression({\n                                  functionName: queryFn,\n                                  parameters: [\n                                    compiler.objectExpression({\n                                      multiLine: true,\n                                      obj: [\n                                        {\n                                          spread: 'options',\n                                        },\n                                        {\n                                          spread: 'queryKey[0]',\n                                        },\n                                        {\n                                          key: 'signal',\n                                          shorthand: true,\n                                          value: compiler.identifier({\n                                            text: 'signal',\n                                          }),\n                                        },\n                                        {\n                                          key: 'throwOnError',\n                                          value: true,\n                                        },\n                                      ],\n                                    }),\n                                  ],\n                                }),\n                              }),\n                              name: 'data',\n                            }),\n                            compiler.returnVariable({\n                              expression: 'data',\n                            }),\n                          ],\n                        }),\n                      },\n                      {\n                        key: 'queryKey',\n                        value: compiler.callExpression({\n                          functionName: toQueryKeyName({\n                            config,\n                            id: operation.name,\n                            operation,\n                          }),\n                          parameters: ['options'],\n                        }),\n                      },\n                    ],\n                  }),\n                ],\n                name: queryOptionsFn,\n              }),\n            ],\n          }),\n          name: toQueryOptionsName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n          // TODO: add type error\n          // TODO: AxiosError<PutSubmissionMetaError>\n        });\n        file.add(statement);\n      }\n\n      // infinite queries\n      if (\n        plugin.infiniteQueryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        // the actual pagination field might be nested inside parameter, e.g. body\n        let paginationField!: Model | OperationParameter;\n\n        const paginationParameter = operation.parameters.find((parameter) => {\n          const paginationRegExp = getPaginationKeywordsRegExp(\n            config.input.pagination,\n          );\n          if (paginationRegExp.test(parameter.name)) {\n            paginationField = parameter;\n            return true;\n          }\n\n          if (parameter.in !== 'body') {\n            return;\n          }\n\n          if (parameter.export === 'reference') {\n            const ref = parameter.$refs[0];\n            const refModel = client.models.find(\n              (model) => model.meta?.$ref === ref,\n            );\n            return refModel?.properties.find((property) => {\n              const paginationRegExp = getPaginationKeywordsRegExp(\n                config.input.pagination,\n              );\n              if (paginationRegExp.test(property.name)) {\n                paginationField = property;\n                return true;\n              }\n            });\n          }\n\n          return parameter.properties.find((property) => {\n            const paginationRegExp = getPaginationKeywordsRegExp(\n              config.input.pagination,\n            );\n            if (paginationRegExp.test(property.name)) {\n              paginationField = property;\n              return true;\n            }\n          });\n        });\n\n        if (paginationParameter && paginationField) {\n          if (!hasInfiniteQueries) {\n            hasInfiniteQueries = true;\n\n            if (!hasCreateQueryKeyParamsFunction) {\n              createQueryKeyType({ file });\n              createQueryKeyFunction({ file });\n              hasCreateQueryKeyParamsFunction = true;\n            }\n\n            if (!hasCreateInfiniteParamsFunction) {\n              createInfiniteParamsFunction({ file });\n              hasCreateInfiniteParamsFunction = true;\n            }\n\n            file.import({\n              module: plugin.name,\n              name: infiniteQueryOptionsFn,\n            });\n\n            typeInfiniteData = file.import({\n              asType: true,\n              module: plugin.name,\n              name: 'InfiniteData',\n            });\n          }\n\n          hasUsedQueryFn = true;\n\n          const { typeData } = createTypeData({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n          const { typeError } = createTypeError({\n            client,\n            file,\n            operation,\n            pluginName: plugin.name,\n            typesModulePath,\n          });\n          const { typeResponse } = createTypeResponse({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n\n          const isRequired = isOperationParameterRequired(operation.parameters);\n\n          const typeQueryKey = `${queryKeyName}<${typeData}>`;\n          const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n          const typePageParam = `${paginationField.base} | ${typePageObjectParam}`;\n\n          const queryKeyStatement = compiler.constVariable({\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              returnType: typeQueryKey,\n              statements: createQueryKeyLiteral({\n                id: operation.name,\n                isInfinite: true,\n              }),\n            }),\n            name: toQueryKeyName({\n              config,\n              id: operation.name,\n              isInfinite: true,\n              operation,\n            }),\n          });\n          file.add(queryKeyStatement);\n\n          const statement = compiler.constVariable({\n            // TODO: describe options, same as the actual function call\n            comment: [],\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              statements: [\n                compiler.returnFunctionCall({\n                  args: [\n                    compiler.objectExpression({\n                      comments: [\n                        {\n                          jsdoc: false,\n                          lines: ['@ts-ignore'],\n                        },\n                      ],\n                      obj: [\n                        {\n                          key: 'queryFn',\n                          value: compiler.arrowFunction({\n                            async: true,\n                            multiLine: true,\n                            parameters: [\n                              {\n                                destructure: [\n                                  {\n                                    name: 'pageParam',\n                                  },\n                                  {\n                                    name: 'queryKey',\n                                  },\n                                  {\n                                    name: 'signal',\n                                  },\n                                ],\n                              },\n                            ],\n                            statements: [\n                              compiler.constVariable({\n                                comment: [\n                                  {\n                                    jsdoc: false,\n                                    lines: ['@ts-ignore'],\n                                  },\n                                ],\n                                expression: compiler.conditionalExpression({\n                                  condition: compiler.binaryExpression({\n                                    left: compiler.typeOfExpression({\n                                      text: 'pageParam',\n                                    }),\n                                    operator: '===',\n                                    right: compiler.ots.string('object'),\n                                  }),\n                                  whenFalse: compiler.objectExpression({\n                                    multiLine: true,\n                                    obj: [\n                                      {\n                                        key: getPaginationIn(\n                                          paginationParameter,\n                                        ),\n                                        value: compiler.objectExpression({\n                                          multiLine: true,\n                                          obj: [\n                                            {\n                                              key: paginationField.name,\n                                              value: compiler.identifier({\n                                                text: 'pageParam',\n                                              }),\n                                            },\n                                          ],\n                                        }),\n                                      },\n                                    ],\n                                  }),\n                                  whenTrue: compiler.identifier({\n                                    text: 'pageParam',\n                                  }),\n                                }),\n                                name: 'page',\n                                typeName: typePageObjectParam,\n                              }),\n                              compiler.constVariable({\n                                expression: compiler.callExpression({\n                                  functionName: 'createInfiniteParams',\n                                  parameters: ['queryKey', 'page'],\n                                }),\n                                name: 'params',\n                              }),\n                              compiler.constVariable({\n                                destructure: true,\n                                expression: compiler.awaitExpression({\n                                  expression: compiler.callExpression({\n                                    functionName: queryFn,\n                                    parameters: [\n                                      compiler.objectExpression({\n                                        multiLine: true,\n                                        obj: [\n                                          {\n                                            spread: 'options',\n                                          },\n                                          {\n                                            spread: 'params',\n                                          },\n                                          {\n                                            key: 'signal',\n                                            shorthand: true,\n                                            value: compiler.identifier({\n                                              text: 'signal',\n                                            }),\n                                          },\n                                          {\n                                            key: 'throwOnError',\n                                            value: true,\n                                          },\n                                        ],\n                                      }),\n                                    ],\n                                  }),\n                                }),\n                                name: 'data',\n                              }),\n                              compiler.returnVariable({\n                                expression: 'data',\n                              }),\n                            ],\n                          }),\n                        },\n                        {\n                          key: 'queryKey',\n                          value: compiler.callExpression({\n                            functionName: toQueryKeyName({\n                              config,\n                              id: operation.name,\n                              isInfinite: true,\n                              operation,\n                            }),\n                            parameters: ['options'],\n                          }),\n                        },\n                      ],\n                    }),\n                  ],\n                  name: infiniteQueryOptionsFn,\n                  // TODO: better types syntax\n                  types: [\n                    typeResponse,\n                    typeError.name,\n                    `${typeof typeInfiniteData === 'string' ? typeInfiniteData : typeInfiniteData.name}<${typeResponse}>`,\n                    typeQueryKey,\n                    typePageParam,\n                  ],\n                }),\n              ],\n            }),\n            name: toInfiniteQueryOptionsName(operation),\n          });\n          file.add(statement);\n        }\n      }\n\n      // mutations\n      if (\n        plugin.mutationOptions &&\n        (['DELETE', 'PATCH', 'POST', 'PUT'] as ReadonlyArray<Method>).includes(\n          operation.method,\n        )\n      ) {\n        if (!hasMutations) {\n          hasMutations = true;\n\n          file.import({\n            asType: true,\n            module: plugin.name,\n            name: mutationsType,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n        const { typeError } = createTypeError({\n          client,\n          file,\n          operation,\n          pluginName: plugin.name,\n          typesModulePath,\n        });\n        const { typeResponse } = createTypeResponse({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const expression = compiler.arrowFunction({\n          parameters: [\n            {\n              isRequired: false,\n              name: 'options',\n              type: `Partial<${typeData}>`,\n            },\n          ],\n          statements: [\n            compiler.constVariable({\n              expression: compiler.objectExpression({\n                obj: [\n                  {\n                    key: 'mutationFn',\n                    value: compiler.arrowFunction({\n                      async: true,\n                      multiLine: true,\n                      parameters: [\n                        {\n                          name: 'localOptions',\n                        },\n                      ],\n                      statements: [\n                        compiler.constVariable({\n                          destructure: true,\n                          expression: compiler.awaitExpression({\n                            expression: compiler.callExpression({\n                              functionName: queryFn,\n                              parameters: [\n                                compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      spread: 'options',\n                                    },\n                                    {\n                                      spread: 'localOptions',\n                                    },\n                                    {\n                                      key: 'throwOnError',\n                                      value: true,\n                                    },\n                                  ],\n                                }),\n                              ],\n                            }),\n                          }),\n                          name: 'data',\n                        }),\n                        compiler.returnVariable({\n                          expression: 'data',\n                        }),\n                      ],\n                    }),\n                  },\n                ],\n              }),\n              name: mutationOptionsFn,\n              // TODO: better types syntax\n              typeName: `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`,\n            }),\n            compiler.returnVariable({\n              expression: mutationOptionsFn,\n            }),\n          ],\n        });\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression,\n          name: toMutationOptionsName(operation),\n        });\n        file.add(statement);\n      }\n\n      if (hasQueries || hasInfiniteQueries) {\n        file.import({\n          alias: '_heyApiClient',\n          module: relativeModulePath({\n            moduleOutput: files.client!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: 'client',\n        });\n      }\n\n      if (hasUsedQueryFn) {\n        file.import({\n          module: relativeModulePath({\n            moduleOutput: files.sdk!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: queryFn.split('.')[0]!,\n        });\n      }\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/angular-query-experimental',\n  output: '@tanstack/angular-query-experimental',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/angular-query-experimental` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/react-query',\n  output: '@tanstack/react-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/react-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/solid-query',\n  output: '@tanstack/solid-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/solid-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/svelte-query',\n  output: '@tanstack/svelte-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/svelte-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/vue-query',\n  output: '@tanstack/vue-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/vue-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { hasParameterGroupObjectRequired } from '../../ir/parameter';\nimport type { IR } from '../../ir/types';\nimport { typesId } from '../@hey-api/typescript/ref';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\nconst fastifyId = 'fastify';\n\nconst operationToRouteHandler = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Property | undefined => {\n  const file = context.file({ id: fastifyId })!;\n  const fileTypes = context.file({ id: typesId })!;\n\n  const properties: Array<Property> = [];\n\n  const identifierData = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    namespace: 'type',\n  });\n  if (identifierData.name) {\n    if (operation.body) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifierData.name,\n      });\n      properties.push({\n        isRequired: operation.body.required,\n        name: 'Body',\n        type: `${identifierData.name}['body']`,\n      });\n    }\n\n    if (operation.parameters) {\n      if (operation.parameters.header) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.header,\n          ),\n          name: 'Headers',\n          type: `${identifierData.name}['headers']`,\n        });\n      }\n\n      if (operation.parameters.path) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.path,\n          ),\n          name: 'Params',\n          type: `${identifierData.name}['path']`,\n        });\n      }\n\n      if (operation.parameters.query) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.query,\n          ),\n          name: 'Querystring',\n          type: `${identifierData.name}['query']`,\n        });\n      }\n    }\n  }\n\n  const { errors, responses } = operationResponsesMap(operation);\n\n  let errorsTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierErrors = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'errors' }),\n    namespace: 'type',\n  });\n  if (identifierErrors.name && errors && errors.properties) {\n    const keys = Object.keys(errors.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        const errorsType = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeArguments: [errorsType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  let responsesTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierResponses = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'responses' }),\n    namespace: 'type',\n  });\n  if (identifierResponses.name && responses && responses.properties) {\n    const keys = Object.keys(responses.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        const responsesType = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeArguments: [responsesType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  const replyTypes = [errorsTypeReference, responsesTypeReference].filter(\n    Boolean,\n  );\n  if (replyTypes.length) {\n    properties.push({\n      name: 'Reply',\n      type: compiler.typeIntersectionNode({\n        types: replyTypes,\n      }),\n    });\n  }\n\n  if (!properties.length) {\n    return;\n  }\n\n  const routeHandler: Property = {\n    name: operation.id,\n    type: compiler.typeNode('RouteHandler', [\n      compiler.typeInterfaceNode({\n        properties,\n        useLegacyResolution: false,\n      }),\n    ]),\n  };\n  return routeHandler;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: fastifyId,\n    path: plugin.output,\n  });\n\n  const routeHandlers: Array<Property> = [];\n\n  context.subscribe('operation', ({ operation }) => {\n    const routeHandler = operationToRouteHandler({ context, operation });\n    if (routeHandler) {\n      routeHandlers.push(routeHandler);\n    }\n  });\n\n  context.subscribe('after', () => {\n    const identifier = file.identifier({\n      $ref: 'RouteHandlers',\n      create: true,\n      namespace: 'type',\n    });\n\n    if (!identifier.name) {\n      return;\n    }\n\n    if (routeHandlers.length) {\n      file.import({\n        asType: true,\n        module: 'fastify',\n        name: 'RouteHandler',\n      });\n    }\n\n    file.add(\n      compiler.typeAliasDeclaration({\n        exportType: true,\n        name: identifier.name,\n        type: compiler.typeInterfaceNode({\n          properties: routeHandlers,\n          useLegacyResolution: false,\n        }),\n      }),\n    );\n  });\n};\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: () => {},\n  exportFromIndex: false,\n  name: 'fastify',\n  output: 'fastify',\n};\n\n/**\n * Type helper for `fastify` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: () => {},\n  _tags: ['validator'],\n  exportFromIndex: false,\n  name: 'zod',\n  output: 'zod',\n};\n\n/**\n * Type helper for Zod plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import {\n  type Config as HeyApiClientAxios,\n  defaultConfig as heyApiClientAxios,\n} from './@hey-api/client-axios';\nimport {\n  type Config as HeyApiClientFetch,\n  defaultConfig as heyApiClientFetch,\n} from './@hey-api/client-fetch';\nimport {\n  type Config as HeyApiClientNext,\n  defaultConfig as heyApiClientNext,\n} from './@hey-api/client-next';\nimport {\n  type Config as HeyApiClientNuxt,\n  defaultConfig as heyApiClientNuxt,\n} from './@hey-api/client-nuxt';\nimport {\n  type Config as HeyApiLegacyAngular,\n  defaultConfig as heyApiLegacyAngular,\n} from './@hey-api/legacy-angular';\nimport {\n  type Config as HeyApiLegacyAxios,\n  defaultConfig as heyApiLegacyAxios,\n} from './@hey-api/legacy-axios';\nimport {\n  type Config as HeyApiLegacyFetch,\n  defaultConfig as heyApiLegacyFetch,\n} from './@hey-api/legacy-fetch';\nimport {\n  type Config as HeyApiLegacyNode,\n  defaultConfig as heyApiLegacyNode,\n} from './@hey-api/legacy-node';\nimport {\n  type Config as HeyApiLegacyXhr,\n  defaultConfig as heyApiLegacyXhr,\n} from './@hey-api/legacy-xhr';\nimport {\n  type Config as HeyApiSchemas,\n  defaultConfig as heyApiSchemas,\n} from './@hey-api/schemas';\nimport {\n  type Config as HeyApiSdk,\n  defaultConfig as heyApiSdk,\n} from './@hey-api/sdk';\nimport {\n  type Config as HeyApiTransformers,\n  defaultConfig as heyApiTransformers,\n} from './@hey-api/transformers';\nimport {\n  type Config as HeyApiTypeScript,\n  defaultConfig as heyApiTypeScript,\n} from './@hey-api/typescript';\nimport {\n  type Config as TanStackAngularQueryExperimental,\n  defaultConfig as tanStackAngularQueryExperimental,\n} from './@tanstack/angular-query-experimental';\nimport {\n  type Config as TanStackReactQuery,\n  defaultConfig as tanStackReactQuery,\n} from './@tanstack/react-query';\nimport {\n  type Config as TanStackSolidQuery,\n  defaultConfig as tanStackSolidQuery,\n} from './@tanstack/solid-query';\nimport {\n  type Config as TanStackSvelteQuery,\n  defaultConfig as tanStackSvelteQuery,\n} from './@tanstack/svelte-query';\nimport {\n  type Config as TanStackVueQuery,\n  defaultConfig as tanStackVueQuery,\n} from './@tanstack/vue-query';\nimport { type Config as Fastify, defaultConfig as fastify } from './fastify';\nimport type { DefaultPluginConfigs, Plugin } from './types';\nimport { type Config as Zod, defaultConfig as zod } from './zod';\n\n/**\n * User-facing plugin types.\n */\nexport type UserPlugins =\n  | Plugin.UserConfig<HeyApiClientAxios>\n  | Plugin.UserConfig<HeyApiClientFetch>\n  | Plugin.UserConfig<HeyApiClientNext>\n  | Plugin.UserConfig<HeyApiClientNuxt>\n  | Plugin.UserConfig<HeyApiLegacyAngular>\n  | Plugin.UserConfig<HeyApiLegacyAxios>\n  | Plugin.UserConfig<HeyApiLegacyFetch>\n  | Plugin.UserConfig<HeyApiLegacyNode>\n  | Plugin.UserConfig<HeyApiLegacyXhr>\n  | Plugin.UserConfig<HeyApiSchemas>\n  | Plugin.UserConfig<HeyApiSdk>\n  | Plugin.UserConfig<HeyApiTransformers>\n  | Plugin.UserConfig<HeyApiTypeScript>\n  | Plugin.UserConfig<TanStackAngularQueryExperimental>\n  | Plugin.UserConfig<TanStackReactQuery>\n  | Plugin.UserConfig<TanStackSolidQuery>\n  | Plugin.UserConfig<TanStackSvelteQuery>\n  | Plugin.UserConfig<TanStackVueQuery>\n  | Plugin.UserConfig<Fastify>\n  | Plugin.UserConfig<Zod>;\n\n/**\n * Internal plugin types.\n */\nexport type ClientPlugins =\n  | Plugin.Config<HeyApiClientAxios>\n  | Plugin.Config<HeyApiClientFetch>\n  | Plugin.Config<HeyApiClientNext>\n  | Plugin.Config<HeyApiClientNuxt>\n  | Plugin.Config<HeyApiLegacyAngular>\n  | Plugin.Config<HeyApiLegacyAxios>\n  | Plugin.Config<HeyApiLegacyFetch>\n  | Plugin.Config<HeyApiLegacyNode>\n  | Plugin.Config<HeyApiLegacyXhr>\n  | Plugin.Config<HeyApiSchemas>\n  | Plugin.Config<HeyApiSdk>\n  | Plugin.Config<HeyApiTransformers>\n  | Plugin.Config<HeyApiTypeScript>\n  | Plugin.Config<TanStackAngularQueryExperimental>\n  | Plugin.Config<TanStackReactQuery>\n  | Plugin.Config<TanStackSolidQuery>\n  | Plugin.Config<TanStackSvelteQuery>\n  | Plugin.Config<TanStackVueQuery>\n  | Plugin.Config<Fastify>\n  | Plugin.Config<Zod>;\n\nexport const defaultPluginConfigs: DefaultPluginConfigs<ClientPlugins> = {\n  '@hey-api/client-axios': heyApiClientAxios,\n  '@hey-api/client-fetch': heyApiClientFetch,\n  '@hey-api/client-next': heyApiClientNext,\n  '@hey-api/client-nuxt': heyApiClientNuxt,\n  '@hey-api/schemas': heyApiSchemas,\n  '@hey-api/sdk': heyApiSdk,\n  '@hey-api/transformers': heyApiTransformers,\n  '@hey-api/typescript': heyApiTypeScript,\n  '@tanstack/angular-query-experimental': tanStackAngularQueryExperimental,\n  '@tanstack/react-query': tanStackReactQuery,\n  '@tanstack/solid-query': tanStackSolidQuery,\n  '@tanstack/svelte-query': tanStackSvelteQuery,\n  '@tanstack/vue-query': tanStackVueQuery,\n  fastify,\n  'legacy/angular': heyApiLegacyAngular,\n  'legacy/axios': heyApiLegacyAxios,\n  'legacy/fetch': heyApiLegacyFetch,\n  'legacy/node': heyApiLegacyNode,\n  'legacy/xhr': heyApiLegacyXhr,\n  zod,\n};\n","import path from 'node:path';\n\nimport { loadConfig } from 'c12';\n\nimport { getLogs } from './getLogs';\nimport type { ClientPlugins, UserPlugins } from './plugins';\nimport { defaultPluginConfigs } from './plugins';\nimport type {\n  AnyPluginName,\n  DefaultPluginConfigs,\n  PluginContext,\n  PluginNames,\n} from './plugins/types';\nimport type { Config, UserConfig } from './types/config';\nimport { isLegacyClient, setConfig } from './utils/config';\n\n/**\n * Default plugins used to generate artifacts if plugins aren't specified.\n */\nexport const defaultPlugins = [\n  '@hey-api/typescript',\n  '@hey-api/sdk',\n] as const satisfies ReadonlyArray<UserPlugins['name']>;\n\nconst getInput = (userConfig: UserConfig): Config['input'] => {\n  let input: Config['input'] = {\n    path: '',\n  };\n  if (typeof userConfig.input === 'string') {\n    input.path = userConfig.input;\n  } else if (\n    userConfig.input &&\n    (userConfig.input.path || userConfig.input.organization)\n  ) {\n    input = {\n      ...input,\n      path: 'https://get.heyapi.dev',\n      ...userConfig.input,\n    };\n  } else {\n    input = {\n      ...input,\n      path: userConfig.input as Record<string, unknown>,\n    };\n  }\n  return input;\n};\n\nconst getPluginsConfig = ({\n  pluginConfigs,\n  userPlugins,\n  userPluginsConfig,\n}: {\n  pluginConfigs: DefaultPluginConfigs<ClientPlugins>;\n  userPlugins: ReadonlyArray<AnyPluginName>;\n  userPluginsConfig: Config['plugins'];\n}): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const circularReferenceTracker = new Set<AnyPluginName>();\n  const pluginOrder = new Set<AnyPluginName>();\n  const plugins: Config['plugins'] = {};\n\n  const dfs = (name: AnyPluginName) => {\n    if (circularReferenceTracker.has(name)) {\n      throw new Error(`Circular reference detected at '${name}'`);\n    }\n\n    if (!pluginOrder.has(name)) {\n      circularReferenceTracker.add(name);\n\n      const pluginConfig = pluginConfigs[name as PluginNames];\n      if (!pluginConfig) {\n        throw new Error(\n          `🚫 unknown plugin dependency \"${name}\" - do you need to register a custom plugin with this name?`,\n        );\n      }\n\n      const defaultOptions = defaultPluginConfigs[name as PluginNames];\n      const userOptions = userPluginsConfig[name as PluginNames];\n      if (userOptions && defaultOptions) {\n        const nativePluginOption = Object.keys(userOptions).find((key) =>\n          key.startsWith('_'),\n        );\n        if (nativePluginOption) {\n          throw new Error(\n            `🚫 cannot register plugin \"${name}\" - attempting to override a native plugin option \"${nativePluginOption}\"`,\n          );\n        }\n      }\n\n      const config = {\n        _dependencies: [],\n        ...defaultOptions,\n        ...userOptions,\n      };\n\n      if (config._infer) {\n        const context: PluginContext = {\n          ensureDependency: (dependency) => {\n            if (\n              typeof dependency === 'string' &&\n              !config._dependencies.includes(dependency)\n            ) {\n              config._dependencies = [...config._dependencies, dependency];\n            }\n          },\n          pluginByTag: (tag, errorMessage) => {\n            for (const userPlugin of userPlugins) {\n              const defaultConfig =\n                defaultPluginConfigs[userPlugin as PluginNames] ||\n                pluginConfigs[userPlugin as PluginNames];\n              if (\n                defaultConfig &&\n                defaultConfig._tags?.includes(tag) &&\n                userPlugin !== name\n              ) {\n                return userPlugin;\n              }\n            }\n\n            throw new Error(\n              errorMessage ||\n                `🚫 missing plugin - no plugin with tag \"${tag}\" found`,\n            );\n          },\n        };\n        config._infer(config, context);\n      }\n\n      for (const dependency of config._dependencies) {\n        dfs(dependency);\n      }\n\n      circularReferenceTracker.delete(name);\n      pluginOrder.add(name);\n\n      // @ts-expect-error\n      plugins[name] = config;\n    }\n  };\n\n  for (const name of userPlugins) {\n    dfs(name);\n  }\n\n  return {\n    pluginOrder: Array.from(pluginOrder) as ReadonlyArray<PluginNames>,\n    plugins,\n  };\n};\n\nconst getOutput = (userConfig: UserConfig): Config['output'] => {\n  let output: Config['output'] = {\n    clean: true,\n    format: false,\n    indexFile: true,\n    lint: false,\n    path: '',\n  };\n  if (typeof userConfig.output === 'string') {\n    output.path = userConfig.output;\n  } else {\n    output = {\n      ...output,\n      ...userConfig.output,\n    };\n  }\n  return output;\n};\n\nconst isPluginClient = (plugin: Required<UserConfig>['plugins'][number]) => {\n  if (typeof plugin === 'string') {\n    return plugin.startsWith('@hey-api/client') || plugin.startsWith('legacy/');\n  }\n\n  return (\n    plugin.name.startsWith('@hey-api/client') ||\n    plugin.name.startsWith('legacy/') ||\n    // @ts-expect-error\n    (plugin._tags && plugin._tags.includes('client'))\n  );\n};\n\nconst getPlugins = (\n  userConfig: UserConfig,\n): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const userPluginsConfig: Config['plugins'] = {};\n\n  let definedPlugins: UserConfig['plugins'] = defaultPlugins;\n  if (userConfig.plugins) {\n    userConfig.plugins = userConfig.plugins.filter(\n      (plugin) =>\n        (typeof plugin === 'string' && plugin) ||\n        (typeof plugin !== 'string' && plugin.name),\n    );\n    if (\n      userConfig.plugins.length === 1 &&\n      isPluginClient(userConfig.plugins[0]!)\n    ) {\n      definedPlugins = [...defaultPlugins, ...userConfig.plugins];\n    } else {\n      definedPlugins = userConfig.plugins;\n    }\n  }\n\n  const userPlugins = definedPlugins\n    .map((plugin) => {\n      if (typeof plugin === 'string') {\n        return plugin;\n      }\n\n      if (plugin.name) {\n        // @ts-expect-error\n        userPluginsConfig[plugin.name] = plugin;\n      }\n\n      return plugin.name;\n    })\n    .filter(Boolean);\n\n  return getPluginsConfig({\n    pluginConfigs: {\n      ...userPluginsConfig,\n      ...defaultPluginConfigs,\n    },\n    userPlugins,\n    userPluginsConfig,\n  });\n};\n\nconst getWatch = (\n  userConfig: Pick<UserConfig, 'watch'> & Pick<Config, 'input'>,\n): Config['watch'] => {\n  let watch: Config['watch'] = {\n    enabled: false,\n    interval: 1_000,\n    timeout: 60_000,\n  };\n  // we cannot watch spec passed as an object\n  if (typeof userConfig.input.path !== 'string') {\n    return watch;\n  }\n  if (typeof userConfig.watch === 'boolean') {\n    watch.enabled = userConfig.watch;\n  } else if (typeof userConfig.watch === 'number') {\n    watch.enabled = true;\n    watch.interval = userConfig.watch;\n  } else if (userConfig.watch) {\n    watch = {\n      ...watch,\n      ...userConfig.watch,\n    };\n  }\n  return watch;\n};\n\n/**\n * @internal\n */\nexport const initConfigs = async (\n  userConfig: UserConfig | undefined,\n): Promise<Config[]> => {\n  let configurationFile: string | undefined = undefined;\n  if (userConfig?.configFile) {\n    const parts = userConfig.configFile.split('.');\n    configurationFile = parts.slice(0, parts.length - 1).join('.');\n  }\n\n  const { config: configFromFile } = await loadConfig<UserConfig>({\n    configFile: configurationFile,\n    name: 'openapi-ts',\n  });\n\n  const userConfigs: UserConfig[] = Array.isArray(userConfig)\n    ? userConfig\n    : Array.isArray(configFromFile)\n      ? configFromFile.map((config) => ({\n          ...config,\n          ...userConfig,\n        }))\n      : [{ ...(configFromFile ?? {}), ...userConfig }];\n\n  return userConfigs.map((userConfig) => {\n    const {\n      base,\n      configFile = '',\n      dryRun = false,\n      experimentalParser = true,\n      exportCore = true,\n      name,\n      request,\n      useOptions = true,\n    } = userConfig;\n\n    const logs = getLogs(userConfig);\n\n    if (logs.level === 'debug') {\n      console.warn('userConfig:', userConfig);\n    }\n\n    const input = getInput(userConfig);\n    const output = getOutput(userConfig);\n\n    if (!input.path) {\n      throw new Error(\n        '🚫 missing input - which OpenAPI specification should we use to generate your output?',\n      );\n    }\n\n    if (!output.path) {\n      throw new Error(\n        '🚫 missing output - where should we generate your output?',\n      );\n    }\n\n    if (!useOptions) {\n      console.warn(\n        '❗️ Deprecation warning: useOptions set to false. This setting will be removed in future versions. Please migrate useOptions to true https://heyapi.dev/openapi-ts/migrating.html#v0-27-38',\n      );\n    }\n\n    output.path = path.resolve(process.cwd(), output.path);\n\n    const config = setConfig({\n      ...getPlugins(userConfig),\n      base,\n      configFile,\n      dryRun,\n      experimentalParser,\n      exportCore: false,\n      input,\n      logs,\n      name,\n      output,\n      request,\n      useOptions,\n      watch: getWatch({ ...userConfig, input }),\n    });\n    config.exportCore = isLegacyClient(config) ? exportCore : false;\n\n    if (logs.level === 'debug') {\n      console.warn('config:', config);\n    }\n\n    return config;\n  });\n};\n"]}