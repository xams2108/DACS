import type { Chain } from "../../chains/types.js";
import type { ThirdwebClient } from "../../client/client.js";
import type { AsyncStorage } from "../../utils/storage/AsyncStorage.js";
import type { AuthArgsType, AuthStoredTokenWithCookieReturnType } from "../in-app/core/authentication/types.js";
import type { Wallet } from "../interfaces/wallet.js";
import { type ConnectionManager } from "../manager/index.js";
import type { WalletId } from "../wallet-types.js";
import type { AutoConnectProps } from "./types.js";
/**
 * @internal
 */
export declare const autoConnectCore: ({ storage, props, createWalletFn, manager, connectOverride, getInstalledWallets, setLastAuthProvider, }: {
    storage: AsyncStorage;
    props: AutoConnectProps & {
        wallets: Wallet[];
    };
    createWalletFn: (id: WalletId) => Wallet;
    manager: ConnectionManager;
    connectOverride?: (walletOrFn: Wallet | (() => Promise<Wallet>)) => Promise<Wallet | null>;
    getInstalledWallets?: () => Wallet[];
    setLastAuthProvider?: (authProvider: AuthArgsType["strategy"], storage: AsyncStorage) => Promise<void>;
}) => Promise<boolean>;
/**
 * @internal
 */
export declare function handleWalletConnection(props: {
    wallet: Wallet;
    client: ThirdwebClient;
    authResult: AuthStoredTokenWithCookieReturnType | undefined;
    lastConnectedChain: Chain | undefined;
}): Promise<import("../interfaces/wallet.js").Account>;
//# sourceMappingURL=autoConnectCore.d.ts.map