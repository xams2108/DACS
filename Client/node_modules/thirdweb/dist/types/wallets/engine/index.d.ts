import type { Chain } from "../../chains/types.js";
import type { Account } from "../interfaces/wallet.js";
/**
 * Options for creating an engine account.
 */
export type EngineAccountOptions = {
    /**
     * The URL of your engine instance.
     */
    engineUrl: string;
    /**
     * The auth token to use with the engine instance.
     */
    authToken: string;
    /**
     * The backend wallet to use for sending transactions inside engine.
     */
    walletAddress: string;
    overrides?: {
        /**
         * The address of the smart account to act on behalf of. Requires your backend wallet to be a valid signer on that smart account.
         */
        accountAddress?: string;
        /**
         * The address of the smart account factory to use for creating smart accounts.
         */
        accountFactoryAddress?: string;
        /**
         * The salt to use for creating the smart account.
         */
        accountSalt?: string;
    };
    /**
     * The chain to use for signing messages and typed data (smart backend wallet only).
     */
    chain?: Chain;
};
/**
 * Creates an account that uses your engine backend wallet for sending transactions and signing messages.
 *
 * @param options - The options for the engine account.
 * @returns An account that uses your engine backend wallet.
 *
 * @beta
 * @wallet
 *
 * @example
 * ```ts
 * import { engineAccount } from "thirdweb/wallets/engine";
 *
 * const engineAcc = engineAccount({
 *   engineUrl: "https://engine.thirdweb.com",
 *   authToken: "your-auth-token",
 *   walletAddress: "0x...",
 * });
 *
 * // then use the account as you would any other account
 * const transaction = claimTo({
 *   contract,
 *   to: "0x...",
 *   quantity: 1n,
 * });
 * const result = await sendTransaction({ transaction, account: engineAcc });
 * console.log("Transaction sent:", result.transactionHash);
 * ```
 */
export declare function engineAccount(options: EngineAccountOptions): Account;
//# sourceMappingURL=index.d.ts.map