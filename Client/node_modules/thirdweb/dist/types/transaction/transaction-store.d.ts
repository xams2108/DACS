import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import { type Store } from "../reactive/store.js";
import type { Hex } from "../utils/encoding/hex.js";
export type StoredTransaction = {
    transactionHash: Hex;
    chainId: number;
    receipt?: {
        status: "success" | "failed";
        to: string;
    };
};
/**
 * Retrieve the transaction store for a given address.
 * @param address - The address to retrieve the transaction store for.
 * @returns A store of transactions for the given account to subscribe to.
 * @transaction
 * @example
 * ```ts
 * import { getTransactionStore } from "thirdweb/transaction";
 *
 * const store = getTransactionStore("0x...");
 * store.subscribe((transactions) => {
 *   console.log(transactions);
 * });
 * ```
 */
export declare function getTransactionStore(address: string): Store<StoredTransaction[]>;
/**
 * @internal
 */
export declare function addTransactionToStore(options: {
    address: string;
    transactionHash: Hex;
    chainId: number;
}): void;
/**
 * @internal for now
 */
export declare function getPastTransactions(options: {
    walletAddress: string;
    chain: Chain;
    client: ThirdwebClient;
}): Promise<StoredTransaction[]>;
//# sourceMappingURL=transaction-store.d.ts.map