import { type UseQueryOptions } from "@tanstack/react-query";
import type React from "react";
import type { JSX } from "react";
import { type ResolveNameOptions } from "../../../../../extensions/ens/resolve-name.js";
import type { SocialProfile } from "../../../../../social/types.js";
/**
 * Props for the AccountAvatar component
 * @component
 * @wallet
 */
export interface AccountAvatarProps extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, "src">, Omit<ResolveNameOptions, "client" | "address"> {
    /**
     * Use this prop to prioritize the social profile that you want to display
     * This is useful for a wallet containing multiple social profiles.
     * This component inherits all attributes of a HTML's <img />, so you can interact with it just like a normal <img />
     *
     * @example
     * If you have ENS, Lens and Farcaster profiles linked to your wallet
     * you can prioritize showing the image for Lens by:
     * ```tsx
     * <AccountAvatar
     *   socialType="lens" // Choose between: "farcaster" | "lens" | "ens"
     * />
     * ```
     */
    socialType?: SocialProfile["type"];
    /**
     * This component will be shown while the avatar of the account is being fetched
     * If not passed, the component will return `null`.
     *
     * You can pass a loading sign or spinner to this prop.
     * @example
     * ```tsx
     * <AccountAvatar loadingComponent={<Spinner />} />
     * ```
     */
    loadingComponent?: JSX.Element;
    /**
     * This component will be shown if the request for fetching the avatar is done
     * but could not retreive any result.
     * You can pass a dummy avatar/image to this prop.
     *
     * If not passed, the component will return `null`
     *
     * @example
     * ```tsx
     * <AccountAvatar fallbackComponent={<DummyImage />} />
     * ```
     */
    fallbackComponent?: JSX.Element;
    /**
     * Optional query options for `useQuery`
     */
    queryOptions?: Omit<UseQueryOptions<string>, "queryFn" | "queryKey">;
}
/**
 * The component for showing the avatar of the account.
 * If fetches all the social profiles linked to your wallet, including: Farcaster, ENS, Lens (more to be added)
 * You can choose which social profile you want to display. Defaults to the first item in the list.
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { AccountProvider, AccountAvatar } from "thirdweb/react";
 *
 * <AccountProvider address="0x...">
 *   <AccountAvatar />
 * </AccountProvider>
 * ```
 * Result: An <img /> component, if the avatar is resolved successfully
 * ```html
 * <img alt="" src="resolved-url-for-the-avatar" />
 * ```
 *
 * ### Show a loading sign when the avatar is being resolved
 * ```tsx
 * import { AccountProvider, AccountAvatar } from "thirdweb/react";
 *
 * <AccountProvider address="0x...">
 *   <AccountAvatar
 *     loadingComponent={<YourLoadingComponent />}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Fallback to something when the avatar fails to resolve
 * ```tsx
 * import { AccountProvider, AccountAvatar } from "thirdweb/react";
 *
 * <AccountProvider address="0x...">
 *   <AccountAvatar
 *     fallbackComponent={<DummyImage />}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Select a social profile to display
 * If you wallet associates with more than one social profiles (Lens, Farcaster, ENS, etc.)
 * You can specify which service you want to prioritize using the `socialType` props
 * ```tsx
 * import { AccountProvider, AccountAvatar } from "thirdweb/react";
 *
 * <AccountProvider address="0x...">
 *   <AccountAvatar
 *     // Choose between: "farcaster" | "lens" | "ens"
 *     socialType={"ens"}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Custom ENS resolver chain
 * This component shares the same props with the ENS extension `resolveAvatar`
 * ```tsx
 * import { AccountProvider, AccountAvatar } from "thirdweb/react";
 * import { base } from "thirdweb/chains";
 *
 * <AccountProvider address="0x...">
 *   <AccountAvatar
 *     resolverAddress={"0x..."}
 *     resolverChain={base}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <AccountAvatar
 *   queryOptions={{
 *     enabled: isEnabled,
 *     retry: 3,
 *   }}
 * />
 * ```
 * @returns An <img /> if the avatar is resolved successfully
 * @component
 * @wallet
 * @beta
 */
export declare function AccountAvatar({ socialType, resolverAddress, resolverChain, loadingComponent, fallbackComponent, queryOptions, ...restProps }: AccountAvatarProps): import("react/jsx-runtime.js").JSX.Element | null;
//# sourceMappingURL=avatar.d.ts.map