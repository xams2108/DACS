import { type UseQueryOptions } from "@tanstack/react-query";
import type React from "react";
import type { JSX } from "react";
import type { Chain } from "../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../client/client.js";
/**
 * Props for the TokenSymbol component
 * @component
 * @token
 */
export interface TokenSymbolProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, "children"> {
    /**
     * This prop can be a string or a (async) function that resolves to a string, representing the symbol of the token
     * This is particularly useful if you already have a way to fetch the token symbol.
     */
    symbolResolver?: string | (() => string) | (() => Promise<string>);
    /**
     * A function to format the symbol's value
     * Particularly useful to avoid overflowing-UI issues
     *
     * ```tsx
     * <TokenSymbol formatFn={(str: string) => doSomething()} />
     * ```
     */
    formatFn?: (str: string) => string;
    /**
     * This component will be shown while the symbol of the token is being fetched
     * If not passed, the component will return `null`.
     *
     * You can/should pass a loading sign or spinner to this prop.
     * @example
     * ```tsx
     * <TokenSymbol loadingComponent={<Spinner />} />
     * ```
     */
    loadingComponent?: JSX.Element;
    /**
     * This component will be shown if the symbol fails to be retreived
     * If not passed, the component will return `null`.
     *
     * You can/should pass a descriptive text/component to this prop, indicating that the
     * symbol was not fetched succesfully
     * @example
     * ```tsx
     * <TokenSymbol fallbackComponent={"Failed to load"}
     * />
     * ```
     */
    fallbackComponent?: JSX.Element;
    /**
     * Optional `useQuery` params
     */
    queryOptions?: Omit<UseQueryOptions<string>, "queryFn" | "queryKey">;
}
/**
 * This component fetches then shows the symbol of a token. For ERC20 tokens, it calls the `symbol` function in the ERC20 contract.
 * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>
 *
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { TokenProvider, TokenSymbol } from "thirdweb/react";
 * import { ethereum } from "thirdweb/chains";
 *
 * <TokenProvider {...props}>
 *   <TokenSymbol  />
 * </TokenProvider>
 * ```
 * Result:
 * ```html
 * <span>ETH</span>
 * ```
 *
 * ### Custom symbol resolver
 * By default, TokenSymbol calls the `symbol` function of your contract,
 * however, if your token as an unconventional way to fetch the symbol, you can pass the custom logic to the `symbolResolver` prop.
 * It can either be a string or a function (async) that returns or resolves to a string.
 * ```tsx
 * async function getSymbol() {
 *   // your own fetching logic
 *   return "the symbol";
 * }
 *
 * <TokenSymbol symbolResolver={getSymbol} />
 * ```
 * Alternatively, you can pass in a string directly:
 * ```tsx
 * <TokenSymbol symbolResolver="USDC.e" />
 * ```
 *
 * ### Format the symbol (capitalize, truncate, etc.)
 * The TokenSymbol component accepts a `formatFn` which takes in a string and outputs a string
 * The function is used to modify the symbol of the token
 *
 * ```tsx
 * const concatStr = (str: string):string => str + "Token"
 *
 * <TokenSymbol formatFn={concatStr} />
 * ```
 *
 * Result:
 * ```html
 * <span>Ether Token</span>
 * ```
 *
 * ### Show a loading sign when the symbol is being fetched
 * ```tsx
 * import { TokenProvider, TokenSymbol } from "thirdweb/react";
 *
 * <TokenProvider address="0x...">
 *   <TokenSymbol loadingComponent={<Spinner />} />
 * </TokenProvider>
 * ```
 *
 * ### Fallback to something when the symbol fails to resolve
 * ```tsx
 * <TokenProvider address="0x...">
 *   <TokenSymbol fallbackComponent={"Failed to load"} />
 * </TokenProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <TokenSymbol queryOptions={{
 *     enabled: isEnabled,
 *     retry: 4,
 *   }}
 * />
 * ```
 *
 * @component
 * @token
 * @beta
 */
export declare function TokenSymbol({ symbolResolver, formatFn, loadingComponent, fallbackComponent, queryOptions, ...restProps }: TokenSymbolProps): import("react/jsx-runtime.js").JSX.Element | null;
/**
 * @internal Exported for tests only
 */
export declare function fetchTokenSymbol(props: {
    address: string;
    client: ThirdwebClient;
    chain: Chain;
    symbolResolver?: string | (() => string) | (() => Promise<string>);
}): Promise<string>;
/**
 * @internal
 */
export declare function getQueryKeys(props: {
    chainId: number;
    address: string;
    symbolResolver?: string | (() => string) | (() => Promise<string>);
}): readonly ["_internal_token_symbol_", number, string, {
    readonly resolver: string | undefined;
}];
//# sourceMappingURL=symbol.d.ts.map