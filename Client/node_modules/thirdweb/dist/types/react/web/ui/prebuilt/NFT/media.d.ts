import { type UseQueryOptions } from "@tanstack/react-query";
import type { JSX } from "react";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
import type { MediaRendererProps } from "../../MediaRenderer/types.js";
/**
 * @component
 * @beta
 * @wallet
 */
export type NFTMediaInfo = {
    src: string;
    poster: string | undefined;
};
/**
 * @component
 * @beta
 * @wallet
 * The props for the <NFTMedia /> component
 * It is similar to the [`MediaRendererProps`](https://portal.thirdweb.com/references/typescript/v5/MediaRendererProps)
 * (excluding `src`, `poster` and `client`) that you can
 * use to style the NFTMedia
 */
export type NFTMediaProps = Omit<MediaRendererProps, "src" | "poster" | "client"> & {
    loadingComponent?: JSX.Element;
    fallbackComponent?: JSX.Element;
    /**
     * Optional `useQuery` params
     */
    queryOptions?: Omit<UseQueryOptions<NFTMediaInfo>, "queryFn" | "queryKey">;
    /**
     * This prop can be a string or a (async) function that resolves to a string, representing the media url of the NFT
     * This is particularly useful if you already have a way to fetch the image.
     * In case of function, the function must resolve to an object of type `NFTMediaInfo`
     */
    mediaResolver?: NFTMediaInfo | (() => NFTMediaInfo) | (() => Promise<NFTMediaInfo>);
};
/**
 * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/refernces/typescript/v5/MediaRenderer) under the hood
 * so you can style it just like how you would style a MediaRenderer.
 * @returns A MediaRenderer component
 *
 * @component
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia />
 * </NFTProvider>
 * ```
 *
 * ### Show a loading sign while the media is being fetched
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia loadingComponent={<YourLoadingSign />} />
 * </NFTProvider>
 * ```
 *
 * ### Show something in case the media failed to resolve
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia fallbackComponent={<span>Failed to load media</span>} />
 * </NFTProvider>
 * ```
 *
 * ### Custom query options for useQuery (tanstack-query)
 * ```tsx
 * import { NFTProvider, NFTMedia } from "thirdweb/react";
 *
 * <NFTProvider>
 *   <NFTMedia queryOptions={{ retry: 3, enabled: false, }} />
 * </NFTProvider>
 * ```
 *
 * ### Basic stylings
 *
 * You can style NFTMedia with the `style` and `className` props.
 *
 * ```tsx
 * <NFTMedia style={{ borderRadius: "8px" }} className="mx-auto" />
 * ```
 *
 * ### Override the media with the `mediaResolver` prop
 * If you already have the url, you can skip the network requests and pass it directly to the NFTMedia
 * ```tsx
 * <NFTMedia mediaResolver={{
 *   src: "/cat_video.mp4",
 *   // Poster is applicable to medias that are videos and audios
 *   poster: "/cat-image.png",
 * }} />
 * ```
 *
 * You can also pass in your own custom (async) function that retrieves the media url
 * ```tsx
 * const getMedia = async () => {
 *   const url = getNFTMedia(props);
 *   return url;
 * };
 *
 * <NFTMedia mediaResolver={getMedia} />
 * ```
 * @nft
 * @beta
 */
export declare function NFTMedia({ loadingComponent, fallbackComponent, queryOptions, mediaResolver, ...mediaRendererProps }: NFTMediaProps): import("react/jsx-runtime.js").JSX.Element | null;
/**
 * @internal
 */
export declare function getQueryKey(props: {
    contractAddress: string;
    chainId: number;
    tokenId: bigint;
    mediaResolver?: NFTMediaInfo | (() => NFTMediaInfo) | (() => Promise<NFTMediaInfo>);
}): readonly ["_internal_nft_media_", number, string, string, {
    readonly resolver: string | NFTMediaInfo | undefined;
}];
/**
 * @internal Exported for tests only
 */
export declare function fetchNftMedia(props: {
    mediaResolver?: NFTMediaInfo | (() => NFTMediaInfo) | (() => Promise<NFTMediaInfo>);
    contract: ThirdwebContract;
    tokenId: bigint;
}): Promise<{
    src: string;
    poster: string | undefined;
}>;
//# sourceMappingURL=media.d.ts.map