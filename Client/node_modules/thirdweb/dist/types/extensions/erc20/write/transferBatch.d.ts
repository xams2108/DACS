import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { Prettify } from "../../../utils/type-utils.js";
/**
 * Represents the parameters for a batch transfer operation.
 * @extension ERC20
 */
export type TransferBatchParams = Prettify<{
    batch: Array<{
        to: string;
    } & ({
        amount: number | string;
    } | {
        amountWei: bigint;
    })>;
}>;
/**
 * Transfers a batch of ERC20 tokens from the sender's address to the specified recipient address.
 * @param options - The options for the batch transfer transaction.
 * @returns A promise that resolves to the prepared transaction.
 * @extension ERC20
 * @example
 * ```ts
 * import { transferBatch } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = transferBatch({
 *  contract,
 *  batch: [
 *    {
 *      to: "0x...",
 *      amount: 100,
 *    },
 *    {
 *      to: "0x...",
 *      amount: "0.1",
 *    },
 * ]);
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function transferBatch(options: BaseTransactionOptions<TransferBatchParams>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
/**
 * Records with the same recipient (`to`) can be packed into one transaction
 * For example, the data below:
 * ```ts
 * [
 *   {
 *     to: "wallet-a",
 *     amount: 1,
 *   },
 *   {
 *     to: "wallet-A",
 *     amountWei: 1000000000000000000n,
 *   },
 * ]
 * ```
 *
 * can be packed to:
 * ```ts
 * [
 *   {
 *     to: "wallet-a",
 *     amountWei: 2000000000000000000n,
 *   },
 * ]
 * ```
 * @internal
 */
export declare function optimizeTransferContent(options: BaseTransactionOptions<TransferBatchParams>): Promise<Array<{
    to: string;
    amountWei: bigint;
}>>;
//# sourceMappingURL=transferBatch.d.ts.map