"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractEvents = getContractEvents;
/**
 * Get contract events
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const events = await Insight.getContractEvents({
 *   client,
 *   chains: [sepolia],
 *   contractAddress: "0x1234567890123456789012345678901234567890",
 *   event: transferEvent(),
 *   decodeLogs: true,
 * });
 * ```
 * @insight
 */
async function getContractEvents(options) {
    const [{ getV1EventsByContractAddress }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify },] = await Promise.all([
        Promise.resolve().then(() => require("@thirdweb-dev/insight")),
        Promise.resolve().then(() => require("../utils/domains.js")),
        Promise.resolve().then(() => require("../utils/fetch.js")),
        Promise.resolve().then(() => require("./common.js")),
        Promise.resolve().then(() => require("../utils/json.js")),
    ]);
    const { client, chains, contractAddress, event, queryOptions, decodeLogs } = options;
    await assertInsightEnabled(chains);
    const defaultQueryOptions = {
        chain: chains.map((chain) => chain.id),
        limit: 100,
        decode: decodeLogs,
    };
    if (event) {
        defaultQueryOptions.filter_topic_0 = event.topics[0];
        defaultQueryOptions.filter_topic_1 = event.topics[1];
        defaultQueryOptions.filter_topic_2 = event.topics[2];
        defaultQueryOptions.filter_topic_3 = event.topics[3];
    }
    const result = await getV1EventsByContractAddress({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        path: {
            contractAddress,
        },
        query: {
            ...defaultQueryOptions,
            ...queryOptions,
        },
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    return result.data?.data ?? [];
}
//# sourceMappingURL=get-events.js.map