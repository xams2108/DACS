"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountBalance = AccountBalance;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_native_1 = require("react-native");
const useActiveWalletChain_js_1 = require("../../../../../react/core/hooks/wallets/useActiveWalletChain.js");
const address_js_1 = require("../../../../../utils/address.js");
const provider_js_1 = require("../../../../core/account/provider.js");
const account_js_1 = require("../../../../core/utils/account.js");
const account_js_2 = require("../../../../core/utils/account.js");
/**
 * This component fetches and shows the balance of the wallet address on a given chain.
 * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>
 *
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { AccountProvider, AccountBalance } from "thirdweb/react";
 * import { ethereum } from "thirdweb/chains";
 *
 * <AccountProvider address="0x...">
 *   <AccountBalance chain={ethereum} />
 * </AccountProvider>
 * ```
 * Result:
 * ```html
 * <span>1.091435 ETH</span>
 * ```
 *
 *
 * ### Format the balance (round up, shorten etc.)
 * The AccountBalance component accepts a `formatFn` which takes in an object of type `AccountBalanceInfo` and outputs a string
 * The function is used to modify the display value of the wallet balance (either in crypto or fiat)
 *
 * ```tsx
 * import type { AccountBalanceInfo } from "thirdweb/react";
 * import { formatNumber } from "thirdweb/utils";
 *
 * const format = (props: AccountInfoBalance):string => `${formatNumber(props.balance, 1)} ${props.symbol.toLowerCase()}`
 *
 * <AccountBalance formatFn={format} />
 * ```
 *
 * Result:
 * ```html
 * <span>1.1 eth</span> // the balance is rounded up to 1 decimal and the symbol is lowercased
 * ```
 *
 * ### Show a loading sign when the balance is being fetched
 * ```tsx
 * import { AccountProvider, AccountBalance } from "thirdweb/react";
 *
 * <AccountProvider address="0x...">
 *   <AccountBalance
 *     chain={ethereum}
 *     loadingComponent={<Spinner />}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Fallback to something when the balance fails to resolve
 * ```tsx
 * <AccountProvider address="0x...">
 *   <AccountBalance
 *     chain={nonExistentChain}
 *     fallbackComponent={"Failed to load"}
 *   />
 * </AccountProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <AccountBalance
 *   queryOptions={{
 *     enabled: isEnabled,
 *     retry: 4,
 *   }}
 * />
 * ```
 *
 * @component
 * @wallet
 * @beta
 */
function AccountBalance({ chain, tokenAddress, loadingComponent, fallbackComponent, queryOptions, formatFn, showBalanceInFiat, ...restProps }) {
    const { address, client } = (0, provider_js_1.useAccountContext)();
    const walletChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const chainToLoad = chain || walletChain;
    const balanceQuery = (0, react_query_1.useQuery)({
        queryKey: [
            "internal_account_balance",
            chainToLoad?.id || -1,
            address,
            { tokenAddress },
            showBalanceInFiat,
        ],
        queryFn: async () => (0, account_js_1.loadAccountBalance)({
            chain: chainToLoad,
            client,
            address: (0, address_js_1.getAddress)(address),
            tokenAddress: tokenAddress ? (0, address_js_1.getAddress)(tokenAddress) : undefined,
            showBalanceInFiat,
        }),
        retry: false,
        ...queryOptions,
    });
    if (balanceQuery.isLoading) {
        return loadingComponent || null;
    }
    if (balanceQuery.data === undefined) {
        return fallbackComponent || null;
    }
    // Prioritize using the formatFn from users
    if (formatFn) {
        return (0, jsx_runtime_1.jsx)(react_native_1.Text, { ...restProps, children: formatFn(balanceQuery.data) });
    }
    if (showBalanceInFiat) {
        return ((0, jsx_runtime_1.jsx)(react_native_1.Text, { ...restProps, children: (0, account_js_1.formatAccountFiatBalance)({ ...balanceQuery.data, decimals: 2 }) }));
    }
    return ((0, jsx_runtime_1.jsx)(react_native_1.Text, { ...restProps, children: (0, account_js_2.formatAccountTokenBalance)({
            ...balanceQuery.data,
            decimals: balanceQuery.data.balance < 1 ? 3 : 2,
        }) }));
}
//# sourceMappingURL=balance.js.map