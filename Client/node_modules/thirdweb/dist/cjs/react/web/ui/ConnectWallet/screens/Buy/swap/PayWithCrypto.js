"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayWithCryptoQuoteInfo = PayWithCryptoQuoteInfo;
const jsx_runtime_1 = require("react/jsx-runtime");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useWalletBalance_js_1 = require("../../../../../../core/hooks/others/useWalletBalance.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const basic_js_1 = require("../../../../components/basic.js");
const text_js_1 = require("../../../../components/text.js");
const TokenRow_js_1 = require("../../../../components/token/TokenRow.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const formatTokenBalance_js_1 = require("../../formatTokenBalance.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const WalletRow_js_1 = require("./WalletRow.js");
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
function PayWithCryptoQuoteInfo(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: props.payerAccount.address,
        chain: props.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(props.token)
            ? undefined
            : props.token?.address,
        client: props.client,
    }, {
        enabled: !!props.chain && !!props.token,
    });
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", style: {
            borderRadius: index_js_1.radius.lg,
            border: `1px solid ${theme.colors.borderColor}`,
            ...(props.swapRequired
                ? {
                    borderBottom: "none",
                    borderBottomLeftRadius: 0,
                    borderBottomRightRadius: 0,
                }
                : {}),
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", style: {
                    justifyContent: "space-between",
                    padding: index_js_1.spacing.sm,
                    borderBottom: `1px solid ${theme.colors.borderColor}`,
                }, children: [(0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { client: props.client, address: props.payerAccount.address }), props.token && props.chain && balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", center: "y", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", weight: 500, children: (0, formatTokenBalance_js_1.formatTokenBalance)(balanceQuery.data, false, 4) }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "xs", color: "secondaryText" })] })) : props.token && props.chain && balanceQuery.isLoading ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "70px", height: index_js_1.fontSize.xs })) : null] }), (0, jsx_runtime_1.jsx)(TokenRow_js_1.TokenRow, { token: props.token, chain: props.chain, client: props.client, isLoading: props.isLoading, value: props.value, onSelectToken: props.onSelectToken, style: {
                    border: "none",
                    borderRadius: 0,
                    borderBottomLeftRadius: !props.token || !props.chain || !props.swapRequired ? index_js_1.radius.lg : 0,
                    borderBottomRightRadius: !props.token || !props.chain || !props.swapRequired ? index_js_1.radius.lg : 0,
                } })] }));
}
//# sourceMappingURL=PayWithCrypto.js.map