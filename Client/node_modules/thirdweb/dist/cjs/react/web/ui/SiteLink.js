"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteLink = SiteLink;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const storage_js_1 = require("../../../react/core/utils/storage.js");
const webStorage_js_1 = require("../../../utils/storage/webStorage.js");
const is_ecosystem_wallet_js_1 = require("../../../wallets/ecosystem/is-ecosystem-wallet.js");
const client_scoped_storage_js_1 = require("../../../wallets/in-app/core/authentication/client-scoped-storage.js");
const useActiveWallet_js_1 = require("../../core/hooks/wallets/useActiveWallet.js");
/**
 * Creates a link to another thirdweb-supported site with wallet connection parameters.
 *
 *  The target site must support the connected wallet (ecosystem or in-app).
 *
 * @param {Object} props - The props to pass to the anchor tag
 * @param {String} props.href - The URL of the site to link to
 * @param {ThirdwebClient} props.client - The current site's thirdweb client
 * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the target site
 * @param {React.ReactNode} props.children - The content to render inside the link
 *
 * @example
 * ```tsx
 * import { SiteLink } from "thirdweb/react";
 *
 * <SiteLink href="https://thirdweb.com" client={thirdwebClient} ecosystem={{ id: "ecosystem.thirdweb" }}>
 *   Visit Site
 * </SiteLink>
 * ```
 * @walletConnection
 */
function SiteLink({ href, client, ecosystem, children, ...props }) {
    if (!client.clientId) {
        throw new Error("The SiteLink client must have a clientId");
    }
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const walletId = activeWallet?.id;
    const { data: { authProvider, authCookie } = {}, } = (0, react_query_1.useQuery)({
        queryKey: ["site-link", walletId, href, client.clientId, ecosystem],
        enabled: activeWallet &&
            ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(activeWallet) ||
                walletId === "inApp" ||
                walletId === "smart"),
        queryFn: async () => {
            const storage = new client_scoped_storage_js_1.ClientScopedStorage({
                storage: webStorage_js_1.webLocalStorage,
                clientId: client.clientId,
                ecosystem,
            });
            const authProvider = await (0, storage_js_1.getLastAuthProvider)(webStorage_js_1.webLocalStorage);
            const authCookie = await storage.getAuthCookie();
            return { authProvider, authCookie };
        },
    });
    const url = new URL(href);
    if (walletId) {
        url.searchParams.set("walletId", walletId === "smart" ? "inApp" : walletId);
    }
    if (authProvider) {
        url.searchParams.set("authProvider", authProvider);
    }
    if (authCookie) {
        url.searchParams.set("authCookie", authCookie);
    }
    return ((0, jsx_runtime_1.jsx)("a", { href: encodeURI(url.toString()), ...props, children: children }));
}
//# sourceMappingURL=SiteLink.js.map