"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenRow = TokenRow;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const formatNumber_js_1 = require("../../../../../utils/formatNumber.js");
const CustomThemeProvider_js_1 = require("../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../core/hooks/others/useChainQuery.js");
const PayTokenIcon_js_1 = require("../../ConnectWallet/screens/Buy/PayTokenIcon.js");
const Skeleton_js_1 = require("../Skeleton.js");
const basic_js_1 = require("../basic.js");
const buttons_js_1 = require("../buttons.js");
const text_js_1 = require("../text.js");
const TokenSymbol_js_1 = require("./TokenSymbol.js");
function TokenRow(props) {
    const { name } = (0, useChainQuery_js_1.useChainName)(props.chain);
    if (!props.token || !props.chain) {
        return ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "secondary", fullWidth: true, style: {
                fontSize: index_js_1.fontSize.sm,
                justifyContent: "space-between",
                paddingTop: index_js_1.spacing.md,
                paddingBottom: index_js_1.spacing.md,
                ...props.style,
            }, gap: "xxs", onClick: props.onSelectToken, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: "Select payment token" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "primaryText", children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(TokenButton, { variant: "secondary", fullWidth: true, style: {
            fontSize: index_js_1.fontSize.sm,
            ...props.style,
        }, gap: "xxs", onClick: props.onSelectToken, disabled: props.freezeChainAndToken, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "sm", children: [(0, jsx_runtime_1.jsx)(PayTokenIcon_js_1.PayTokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "4xs", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "4xs", children: props.isLoading ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "120px", height: index_js_1.fontSize.md, color: "borderColor" })) : props.value ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xxs", center: "y", color: "primaryText", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: props.value ? "primaryText" : "secondaryText", children: (0, formatNumber_js_1.formatNumber)(Number(props.value), 6) || "" }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, color: "secondaryText", size: "sm" })] })) : ((0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "sm" })) }), name ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "90px", height: index_js_1.fontSize.xs }))] })] }), !props.freezeChainAndToken && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "primaryText", children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) }))] }));
}
const TokenButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: theme.colors.tertiaryBg,
        border: `1px solid ${theme.colors.borderColor}`,
        justifyContent: "space-between",
        transition: "background 0.3s",
        padding: index_js_1.spacing.sm,
    };
});
//# sourceMappingURL=TokenRow.js.map