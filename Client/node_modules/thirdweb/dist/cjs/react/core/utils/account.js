"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.COLOR_OPTIONS = void 0;
exports.loadAccountBalance = loadAccountBalance;
exports.formatAccountTokenBalance = formatAccountTokenBalance;
exports.formatAccountFiatBalance = formatAccountFiatBalance;
const addresses_js_1 = require("../../../constants/addresses.js");
const cryptoToFiat_js_1 = require("../../../pay/convert/cryptoToFiat.js");
const type_js_1 = require("../../../pay/convert/type.js");
const address_js_1 = require("../../../utils/address.js");
const formatNumber_js_1 = require("../../../utils/formatNumber.js");
const shortenLargeNumber_js_1 = require("../../../utils/shortenLargeNumber.js");
const getWalletBalance_js_1 = require("../../../wallets/utils/getWalletBalance.js");
exports.COLOR_OPTIONS = [
    ["#fca5a5", "#b91c1c"],
    ["#fdba74", "#c2410c"],
    ["#fcd34d", "#b45309"],
    ["#fde047", "#a16207"],
    ["#a3e635", "#4d7c0f"],
    ["#86efac", "#15803d"],
    ["#67e8f9", "#0e7490"],
    ["#7dd3fc", "#0369a1"],
    ["#93c5fd", "#1d4ed8"],
    ["#a5b4fc", "#4338ca"],
    ["#c4b5fd", "#6d28d9"],
    ["#d8b4fe", "#7e22ce"],
    ["#f0abfc", "#a21caf"],
    ["#f9a8d4", "#be185d"],
    ["#fda4af", "#be123c"],
];
/**
 * @internal Exported for tests
 */
async function loadAccountBalance(props) {
    const { chain, client, address, tokenAddress, showBalanceInFiat } = props;
    if (!chain) {
        throw new Error("chain is required");
    }
    if (tokenAddress &&
        tokenAddress?.toLowerCase() === addresses_js_1.NATIVE_TOKEN_ADDRESS.toLowerCase()) {
        throw new Error(`Invalid tokenAddress - cannot be ${addresses_js_1.NATIVE_TOKEN_ADDRESS}`);
    }
    if (!(0, address_js_1.isAddress)(address)) {
        throw new Error("Invalid wallet address. Expected an EVM address");
    }
    if (tokenAddress && !(0, address_js_1.isAddress)(tokenAddress)) {
        throw new Error("Invalid tokenAddress. Expected an EVM contract address");
    }
    const tokenBalanceData = await (0, getWalletBalance_js_1.getWalletBalance)({
        chain,
        client,
        address,
        tokenAddress,
    }).catch(() => undefined);
    if (!tokenBalanceData) {
        throw new Error(`Failed to retrieve ${tokenAddress ? `token: ${tokenAddress}` : "native token"} balance for address: ${address} on chainId:${chain.id}`);
    }
    if (showBalanceInFiat) {
        const fiatData = await (0, cryptoToFiat_js_1.convertCryptoToFiat)({
            fromAmount: Number(tokenBalanceData.displayValue),
            fromTokenAddress: tokenAddress || addresses_js_1.NATIVE_TOKEN_ADDRESS,
            to: showBalanceInFiat,
            chain,
            client,
        }).catch(() => undefined);
        if (fiatData === undefined) {
            throw new Error(`Failed to resolve fiat value for ${tokenAddress ? `token: ${tokenAddress}` : "native token"} on chainId: ${chain.id}`);
        }
        const result = {
            balance: fiatData?.result,
            symbol: (0, type_js_1.getFiatSymbol)(showBalanceInFiat),
        };
        return result;
    }
    return {
        balance: Number(tokenBalanceData.displayValue),
        symbol: tokenBalanceData.symbol,
    };
}
/**
 * Format the display balance for both crypto and fiat, in the Details button and Modal
 * If both crypto balance and fiat balance exist, we have to keep the string very short to avoid UI issues.
 * @internal
 * Used internally for the Details button and the Details Modal
 */
function formatAccountTokenBalance(props) {
    const formattedTokenBalance = (0, formatNumber_js_1.formatNumber)(props.balance, props.decimals);
    return `${formattedTokenBalance} ${props.symbol}`;
}
/**
 * Used internally for the Details button and Details Modal
 * @internal
 */
function formatAccountFiatBalance(props) {
    const num = (0, formatNumber_js_1.formatNumber)(props.balance, props.decimals);
    // Need to keep them short to avoid UI overflow issues
    const formattedFiatBalance = (0, shortenLargeNumber_js_1.shortenLargeNumber)(num);
    return `${props.symbol}${formattedFiatBalance}`;
}
//# sourceMappingURL=account.js.map