"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferBatch = transferBatch;
exports.optimizeTransferContent = optimizeTransferContent;
const units_js_1 = require("../../../utils/units.js");
const multicall_js_1 = require("../../common/__generated__/IMulticall/write/multicall.js");
const transfer_js_1 = require("../__generated__/IERC20/write/transfer.js");
/**
 * Transfers a batch of ERC20 tokens from the sender's address to the specified recipient address.
 * @param options - The options for the batch transfer transaction.
 * @returns A promise that resolves to the prepared transaction.
 * @extension ERC20
 * @example
 * ```ts
 * import { transferBatch } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = transferBatch({
 *  contract,
 *  batch: [
 *    {
 *      to: "0x...",
 *      amount: 100,
 *    },
 *    {
 *      to: "0x...",
 *      amount: "0.1",
 *    },
 * ]);
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function transferBatch(options) {
    return (0, multicall_js_1.multicall)({
        contract: options.contract,
        asyncParams: async () => {
            const content = await optimizeTransferContent(options);
            return {
                data: content.map((item) => {
                    return (0, transfer_js_1.encodeTransfer)({
                        to: item.to,
                        value: item.amountWei,
                        overrides: {
                            erc20Value: {
                                amountWei: item.amountWei,
                                tokenAddress: options.contract.address,
                            },
                        },
                    });
                }),
            };
        },
    });
}
/**
 * Records with the same recipient (`to`) can be packed into one transaction
 * For example, the data below:
 * ```ts
 * [
 *   {
 *     to: "wallet-a",
 *     amount: 1,
 *   },
 *   {
 *     to: "wallet-A",
 *     amountWei: 1000000000000000000n,
 *   },
 * ]
 * ```
 *
 * can be packed to:
 * ```ts
 * [
 *   {
 *     to: "wallet-a",
 *     amountWei: 2000000000000000000n,
 *   },
 * ]
 * ```
 * @internal
 */
async function optimizeTransferContent(options) {
    const groupedRecords = await options.batch.reduce(async (accPromise, record) => {
        const acc = await accPromise;
        let amountInWei;
        if ("amount" in record) {
            // it's OK to call this multiple times because the call is cached
            const { decimals } = await Promise.resolve().then(() => require("../read/decimals.js"));
            // if this fails we fall back to `18` decimals
            const d = await decimals(options).catch(() => undefined);
            if (d === undefined) {
                throw new Error(`Failed to get the decimals for contract: ${options.contract.address}`);
            }
            amountInWei = (0, units_js_1.toUnits)(record.amount.toString(), d);
        }
        else {
            amountInWei = record.amountWei;
        }
        const existingRecord = acc.find((r) => r.to.toLowerCase() === record.to.toLowerCase());
        if (existingRecord) {
            existingRecord.amountWei = existingRecord.amountWei + amountInWei;
        }
        else {
            acc.push({
                to: record.to,
                amountWei: amountInWei,
            });
        }
        return acc;
    }, Promise.resolve([]));
    return groupedRecords;
}
//# sourceMappingURL=transferBatch.js.map