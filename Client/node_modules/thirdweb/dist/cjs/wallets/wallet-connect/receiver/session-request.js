"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fulfillRequest = fulfillRequest;
const send_raw_transaction_js_1 = require("./request-handlers/send-raw-transaction.js");
const send_transaction_js_1 = require("./request-handlers/send-transaction.js");
const sign_transaction_js_1 = require("./request-handlers/sign-transaction.js");
const sign_typed_data_js_1 = require("./request-handlers/sign-typed-data.js");
// Due to some edge cases, we can't import these handlers dynamically
const sign_js_1 = require("./request-handlers/sign.js");
const utils_js_1 = require("./utils.js");
/**
 * @internal
 */
async function fulfillRequest(options) {
    const { wallet, walletConnectClient, thirdwebClient, event: { topic, id, params: { chainId: rawChainId, request }, }, handlers, } = options;
    const account = wallet.getAccount();
    if (!account) {
        throw new Error("No account connected to provided wallet");
    }
    let result;
    try {
        switch (request.method) {
            case "personal_sign": {
                if (handlers?.personal_sign) {
                    result = await handlers.personal_sign({
                        account,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, sign_js_1.handleSignRequest)({
                        account,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_sign": {
                if (handlers?.eth_sign) {
                    result = await handlers.eth_sign({
                        account,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, sign_js_1.handleSignRequest)({
                        account,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_signTypedData": {
                if (handlers?.eth_signTypedData) {
                    result = await handlers.eth_signTypedData({
                        account,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, sign_typed_data_js_1.handleSignTypedDataRequest)({
                        account,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_signTypedData_v4": {
                if (handlers?.eth_signTypedData_v4) {
                    result = await handlers.eth_signTypedData_v4({
                        account,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, sign_typed_data_js_1.handleSignTypedDataRequest)({
                        account,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_signTransaction": {
                if (handlers?.eth_signTransaction) {
                    result = await handlers.eth_signTransaction({
                        account,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, sign_transaction_js_1.handleSignTransactionRequest)({
                        account,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_sendTransaction": {
                const chainId = (0, utils_js_1.parseEip155ChainId)(rawChainId);
                if (handlers?.eth_sendTransaction) {
                    result = await handlers.eth_sendTransaction({
                        account,
                        chainId,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, send_transaction_js_1.handleSendTransactionRequest)({
                        account,
                        chainId,
                        thirdwebClient,
                        params: request.params,
                    });
                }
                break;
            }
            case "eth_sendRawTransaction": {
                const chainId = (0, utils_js_1.parseEip155ChainId)(rawChainId);
                if (handlers?.eth_sendRawTransaction) {
                    result = await handlers.eth_sendRawTransaction({
                        account,
                        chainId,
                        params: request.params,
                    });
                }
                else {
                    result = await (0, send_raw_transaction_js_1.handleSendRawTransactionRequest)({
                        account,
                        chainId,
                        params: request.params,
                    });
                }
                break;
            }
            case "wallet_addEthereumChain": {
                if (handlers?.wallet_addEthereumChain) {
                    result = await handlers.wallet_addEthereumChain({
                        wallet,
                        params: request.params,
                    });
                }
                else {
                    throw new Error("Unsupported request method: wallet_addEthereumChain");
                }
                break;
            }
            case "wallet_switchEthereumChain": {
                if (handlers?.wallet_switchEthereumChain) {
                    result = await handlers.wallet_switchEthereumChain({
                        wallet,
                        params: request.params,
                    });
                }
                else {
                    const { handleSwitchChain } = await Promise.resolve().then(() => require("./request-handlers/switch-chain.js"));
                    result = await handleSwitchChain({
                        wallet,
                        params: request.params,
                    });
                }
                break;
            }
            default: {
                const potentialHandler = handlers?.[request.method];
                if (potentialHandler) {
                    result = await potentialHandler({
                        account,
                        chainId: (0, utils_js_1.parseEip155ChainId)(rawChainId),
                        params: request.params,
                    });
                }
                else {
                    throw new Error(`Unsupported request method: ${request.method}`);
                }
            }
        }
    }
    catch (error) {
        result = {
            code: typeof error === "object" && error !== null && "code" in error
                ? error.code
                : 500,
            message: typeof error === "object" && error !== null && "message" in error
                ? error.message
                : "Unknown error",
        };
    }
    walletConnectClient.respond({
        topic,
        response: {
            id,
            jsonrpc: "2.0",
            result,
        },
    });
}
//# sourceMappingURL=session-request.js.map