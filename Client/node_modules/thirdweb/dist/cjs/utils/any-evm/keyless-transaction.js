"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeylessTransaction = getKeylessTransaction;
const ox__Hash = require("ox/Hash");
const ox__Hex = require("ox/Hex");
const ox__Signature = require("ox/Signature");
const viem_1 = require("viem");
const serialize_transaction_js_1 = require("../../transaction/serialize-transaction.js");
/**
 * Retrieves the keyless transaction information.
 *
 * @param options - The options for retrieving the keyless transaction.
 * @returns An object containing the signer address and the signed serialized transaction string.
 * @internal
 */
async function getKeylessTransaction(options) {
    // 1. Create serialized txn string
    const hash = ox__Hash.keccak256((0, serialize_transaction_js_1.serializeTransaction)({ transaction: options.transaction }));
    const yParity = (() => {
        if ("yParity" in options.signature &&
            typeof options.signature.yParity !== "undefined") {
            return options.signature.yParity;
        }
        if ("v" in options.signature &&
            typeof options.signature.v !== "undefined") {
            return ox__Signature.vToYParity(Number(options.signature.v));
        }
        throw new Error("Invalid recovered signature provided with transaction, missing v or yParity");
    })();
    // 2. Determine signer address from custom signature + txn
    const address = await (0, viem_1.recoverAddress)({
        hash,
        signature: ox__Signature.toHex({
            r: ox__Hex.toBigInt(options.signature.r),
            s: ox__Hex.toBigInt(options.signature.s),
            yParity,
        }),
    });
    // 3. Create the signed serialized txn string.
    // To be sent directly to the chain using a provider.
    const transaction = (0, serialize_transaction_js_1.serializeTransaction)({
        transaction: options.transaction,
        signature: options.signature,
    });
    return {
        signerAddress: address,
        transaction,
    };
}
//# sourceMappingURL=keyless-transaction.js.map