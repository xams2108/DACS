"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareAutoFactoryDeployTransaction = prepareAutoFactoryDeployTransaction;
exports.deployViaAutoFactory = deployViaAutoFactory;
const parse_logs_js_1 = require("../../event/actions/parse-logs.js");
const ProxyDeployedV2_js_1 = require("../../extensions/thirdweb/__generated__/IContractFactory/events/ProxyDeployedV2.js");
const deployProxyByImplementationV2_js_1 = require("../../extensions/thirdweb/__generated__/IContractFactory/write/deployProxyByImplementationV2.js");
const eth_blockNumber_js_1 = require("../../rpc/actions/eth_blockNumber.js");
const rpc_js_1 = require("../../rpc/rpc.js");
const encode_js_1 = require("../../transaction/actions/encode.js");
const send_and_confirm_transaction_js_1 = require("../../transaction/actions/send-and-confirm-transaction.js");
const keccak_id_js_1 = require("../../utils/any-evm/keccak-id.js");
const isZkSyncChain_js_1 = require("../../utils/any-evm/zksync/isZkSyncChain.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const resolve_promised_value_js_1 = require("../../utils/promise/resolve-promised-value.js");
const zkDeployProxy_js_1 = require("./zksync/zkDeployProxy.js");
/**
 * @internal
 */
function prepareAutoFactoryDeployTransaction(args) {
    return (0, deployProxyByImplementationV2_js_1.deployProxyByImplementationV2)({
        contract: args.cloneFactoryContract,
        async asyncParams() {
            const rpcRequest = (0, rpc_js_1.getRpcClient)({
                ...args,
            });
            const blockNumber = await (0, eth_blockNumber_js_1.eth_blockNumber)(rpcRequest);
            const salt = args.salt
                ? args.salt.startsWith("0x") && args.salt.length === 66
                    ? args.salt
                    : (0, keccak_id_js_1.keccakId)(args.salt)
                : `0x03${(0, hex_js_1.toHex)(blockNumber, {
                    size: 31,
                }).replace(/^0x/, "")}`;
            if (args.isCrosschain) {
                if (!args.initializeData || !args.implementationAddress) {
                    throw new Error("initializeData or implementationAddress can't be undefined");
                }
                return {
                    data: args.initializeData,
                    implementation: args.implementationAddress,
                    salt,
                    extraData: "0x",
                };
            }
            if (!args.initializeTransaction) {
                throw new Error("initializeTransaction can't be undefined");
            }
            const implementation = await (0, resolve_promised_value_js_1.resolvePromisedValue)(args.initializeTransaction.to);
            if (!implementation) {
                throw new Error("initializeTransaction must have a 'to' field set");
            }
            return {
                data: await (0, encode_js_1.encode)(args.initializeTransaction),
                implementation,
                salt,
                extraData: "0x",
            };
        },
    });
}
/**
 * @internal
 */
async function deployViaAutoFactory(options) {
    const { chain, client, account, cloneFactoryContract, initializeTransaction, initializeData, implementationAddress, isCrosschain, salt, } = options;
    if (await (0, isZkSyncChain_js_1.isZkSyncChain)(chain)) {
        if (!initializeTransaction) {
            throw new Error("initializeTransaction can't be undefined");
        }
        return (0, zkDeployProxy_js_1.zkDeployProxy)({
            chain,
            client,
            account,
            cloneFactoryContract,
            initializeTransaction,
            salt,
        });
    }
    const tx = prepareAutoFactoryDeployTransaction({
        chain,
        client,
        cloneFactoryContract,
        initializeTransaction,
        initializeData,
        implementationAddress,
        isCrosschain,
        salt,
    });
    const receipt = await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
        transaction: tx,
        account,
    });
    const proxyEvent = (0, ProxyDeployedV2_js_1.proxyDeployedV2Event)();
    const decodedEvent = (0, parse_logs_js_1.parseEventLogs)({
        events: [proxyEvent],
        logs: receipt.logs,
    });
    if (decodedEvent.length === 0 || !decodedEvent[0]) {
        throw new Error(`No ProxyDeployed event found in transaction: ${receipt.transactionHash}`);
    }
    return decodedEvent[0]?.args.proxy;
}
//# sourceMappingURL=deploy-via-autofactory.js.map