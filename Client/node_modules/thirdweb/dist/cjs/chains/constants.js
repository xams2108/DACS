"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOpStackChain = isOpStackChain;
const base_sepolia_js_1 = require("./chain-definitions/base-sepolia.js");
const base_js_1 = require("./chain-definitions/base.js");
const optimism_sepolia_js_1 = require("./chain-definitions/optimism-sepolia.js");
const optimism_js_1 = require("./chain-definitions/optimism.js");
const zora_sepolia_js_1 = require("./chain-definitions/zora-sepolia.js");
const zora_js_1 = require("./chain-definitions/zora.js");
const opChains = [
    base_js_1.base.id,
    base_sepolia_js_1.baseSepolia.id,
    optimism_js_1.optimism.id,
    optimism_sepolia_js_1.optimismSepolia.id,
    zora_js_1.zora.id,
    zora_sepolia_js_1.zoraSepolia.id,
    34443, // mode
    919, // mode testnet
    42220, // celo
    44787, // celo testnet
    204, // opBNB
    5611, // opBNB testnet
];
/**
 * TODO this should be in the chain definition itself
 * @internal
 */
async function isOpStackChain(chain) {
    if (chain.id === 1337 || chain.id === 31337) {
        return false;
    }
    if (opChains.includes(chain.id)) {
        return true;
    }
    // fallback to checking the stack on rpc
    try {
        const { getChainMetadata } = await Promise.resolve().then(() => require("./utils.js"));
        const chainMetadata = await getChainMetadata(chain);
        return chainMetadata.stackType === "optimism_bedrock";
    }
    catch {
        // If the network check fails, assume it's not a OP chain
        return false;
    }
}
//# sourceMappingURL=constants.js.map