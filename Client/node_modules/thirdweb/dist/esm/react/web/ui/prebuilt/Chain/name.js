"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { getChainMetadata } from "../../../../../chains/utils.js";
import { getFunctionId } from "../../../../../utils/function-id.js";
import { useChainContext } from "./provider.js";
/**
 * This component fetches then shows the name of a chain.
 * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>
 *
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { ChainProvider, ChainName } from "thirdweb/react";
 * import { ethereum } from "thirdweb/chains";
 *
 * <ChainProvider {...props}>
 *   <ChainName  />
 * </ChainProvider>
 * ```
 * Result:
 * ```html
 * <span>Ethereum Mainnet</span>
 * ```
 *
 * ### Custom name resolver
 * By default ChainName will call the thirdweb API to retrieve the chain name.
 * However if you have a different way to fetch the name, you can pass the function to the `nameResolver` prop.
 * Note: nameResolver should either be a string or a function (async) that returns a string.
 * ```tsx
 * async function fetchNameMethod() {
 *   // your own fetching logic
 *   return "the chain name";
 * }
 *
 * <ChainName nameResolver={fetchNameMethod} />
 * ```
 *
 * Alternatively you can also pass in a string directly:
 * ```tsx
 * <ChainName nameResolver="ETH Mainnet" />
 * ```
 *
 *
 * ### Format the name (capitalize, truncate, etc.)
 * The ChainName component accepts a `formatFn` which takes in a string and outputs a string
 * The function is used to modify the name of the chain
 *
 * ```tsx
 * const concatStr = (str: string):string => str + "Network"
 *
 * <ChainProvider {...props}>
 *   <ChainName formatFn={concatStr} />
 * </ChainProvider>
 * ```
 *
 * Result:
 * ```html
 * <span>Ethereum Mainnet Network</span>
 * ```
 *
 * ### Show a loading sign when the name is being fetched
 * ```tsx
 * import { ChainProvider, ChainName } from "thirdweb/react";
 *
 * <ChainProvider {...props}>
 *   <ChainName loadingComponent={<Spinner />} />
 * </ChainProvider>
 * ```
 *
 * ### Fallback to something when the name fails to resolve
 * ```tsx
 * <ChainProvider {...props}>
 *   <ChainName fallbackComponent={"Failed to load"} />
 * </ChainProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <ChainName
 *   queryOptions={{
 *     enabled: isEnabled,
 *     retry: 4,
 *   }}
 * />
 * ```
 *
 * @component
 * @chain
 * @beta
 */
export function ChainName({ nameResolver, formatFn, loadingComponent, fallbackComponent, queryOptions, ...restProps }) {
    const { chain } = useChainContext();
    const nameQuery = useQuery({
        queryKey: getQueryKeys({ chainId: chain.id, nameResolver }),
        queryFn: async () => fetchChainName({ chain, nameResolver }),
        ...queryOptions,
    });
    if (nameQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!nameQuery.data) {
        return fallbackComponent || null;
    }
    const displayValue = formatFn ? formatFn(nameQuery.data) : nameQuery.data;
    return _jsx("span", { ...restProps, children: displayValue });
}
/**
 * @internal Exported for tests only
 */
export async function fetchChainName(props) {
    const { nameResolver, chain } = props;
    if (typeof nameResolver === "string") {
        return nameResolver;
    }
    if (typeof nameResolver === "function") {
        return nameResolver();
    }
    if (chain.name) {
        return chain.name;
    }
    return getChainMetadata(chain).then((data) => data.name);
}
/**
 * @internal Exported for tests
 */
export function getQueryKeys(props) {
    if (typeof props.nameResolver === "function") {
        return [
            "_internal_chain_name_",
            props.chainId,
            { resolver: getFunctionId(props.nameResolver) },
        ];
    }
    return ["_internal_chain_name_", props.chainId];
}
//# sourceMappingURL=name.js.map