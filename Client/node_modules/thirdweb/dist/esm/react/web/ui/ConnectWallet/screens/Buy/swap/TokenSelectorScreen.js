import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { CardStackIcon, ChevronRightIcon, Cross2Icon, } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import { getCachedChain } from "../../../../../../../chains/utils.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { getWalletBalance, } from "../../../../../../../wallets/utils/getWalletBalance.js";
import { useCustomTheme } from "../../../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, spacing, } from "../../../../../../core/design-system/index.js";
import { useChainMetadata, useChainName, } from "../../../../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../../../../core/hooks/wallets/useActiveAccount.js";
import { useConnectedWallets } from "../../../../../../core/hooks/wallets/useConnectedWallets.js";
import { useDisconnect } from "../../../../../../core/hooks/wallets/useDisconnect.js";
import { LoadingScreen } from "../../../../../wallets/shared/LoadingScreen.js";
import { Spacer } from "../../../../components/Spacer.js";
import { TextDivider } from "../../../../components/TextDivider.js";
import { TokenIcon } from "../../../../components/TokenIcon.js";
import { Container } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { OutlineWalletIcon } from "../../../icons/OutlineWalletIcon.js";
import { formatTokenBalance } from "../../formatTokenBalance.js";
import { isNativeToken } from "../../nativeToken.js";
import { FiatValue } from "./FiatValue.js";
import { WalletRow } from "./WalletRow.js";
export function TokenSelectorScreen(props) {
    const connectedWallets = useConnectedWallets();
    const activeAccount = useActiveAccount();
    const chainInfo = useChainMetadata(props.toChain);
    const theme = useCustomTheme();
    const walletsAndBalances = useQuery({
        queryKey: [
            "wallets-and-balances",
            props.sourceSupportedTokens,
            props.toChain.id,
            props.toToken,
            props.tokenAmount,
            props.mode,
            activeAccount?.address,
            connectedWallets.map((w) => w.getAccount()?.address),
        ],
        queryFn: async () => {
            // in parallel, get the balances of all the wallets on each of the sourceSupportedTokens
            const walletBalanceMap = new Map();
            const balancePromises = connectedWallets.flatMap((wallet) => {
                const account = wallet.getAccount();
                if (!account)
                    return [];
                const walletKey = {
                    id: wallet.id,
                    address: account.address,
                };
                walletBalanceMap.set(walletKey, []);
                // inject the destination token too since it can be used as well to pay/transfer
                const toToken = isNativeToken(props.toToken)
                    ? {
                        address: NATIVE_TOKEN_ADDRESS,
                        name: chainInfo.data?.nativeCurrency.name || "",
                        symbol: chainInfo.data?.nativeCurrency.symbol || "",
                        icon: chainInfo.data?.icon?.url,
                    }
                    : props.toToken;
                const tokens = {
                    ...props.sourceSupportedTokens,
                    [props.toChain.id]: [
                        toToken,
                        ...(props.sourceSupportedTokens?.[props.toChain.id] || []),
                    ],
                };
                return Object.entries(tokens).flatMap(([chainId, tokens]) => {
                    return tokens.map(async (token) => {
                        try {
                            const chain = getCachedChain(Number(chainId));
                            const balance = await getWalletBalance({
                                address: account.address,
                                chain,
                                tokenAddress: isNativeToken(token) ? undefined : token.address,
                                client: props.client,
                            });
                            // show the token if:
                            // - its not the destination token and balance is greater than 0
                            // - its the destination token and balance is greater than the token amount AND we the account is not the default account in fund_wallet mode
                            const shouldInclude = token.address === toToken.address &&
                                chain.id === props.toChain.id
                                ? props.mode === "fund_wallet" &&
                                    account.address === activeAccount?.address
                                    ? false
                                    : Number(balance.displayValue) > Number(props.tokenAmount)
                                : balance.value > 0n;
                            if (shouldInclude) {
                                const existingBalances = walletBalanceMap.get(walletKey) || [];
                                existingBalances.push({ balance, chain, token });
                                existingBalances.sort((a, b) => {
                                    if (a.chain.id === props.toChain.id &&
                                        a.token.address === toToken.address)
                                        return -1;
                                    if (b.chain.id === props.toChain.id &&
                                        b.token.address === toToken.address)
                                        return 1;
                                    if (a.chain.id === props.toChain.id)
                                        return -1;
                                    if (b.chain.id === props.toChain.id)
                                        return 1;
                                    return a.chain.id > b.chain.id ? 1 : -1;
                                });
                            }
                        }
                        catch (error) {
                            console.error(`Failed to fetch balance for wallet ${wallet.id} on chain ${chainId} for token ${token.symbol}:`, error);
                        }
                    });
                });
            });
            await Promise.all(balancePromises);
            return walletBalanceMap;
        },
        enabled: !!props.sourceSupportedTokens && !!chainInfo.data,
    });
    if (walletsAndBalances.isLoading ||
        chainInfo.isLoading ||
        !chainInfo.data ||
        !props.sourceSupportedTokens) {
        return _jsx(LoadingScreen, {});
    }
    const filteredWallets = Array.from(walletsAndBalances.data?.entries() || [])
        .filter(([w]) => !props.hiddenWallets?.includes(w.id))
        .filter(([, balances]) => {
        const hasEnoughBalance = balances.some((b) => b.balance.value > 0);
        return hasEnoughBalance;
    });
    return (_jsxs(Container, { animate: "fadein", style: {
            minHeight: "200px",
        }, children: [filteredWallets.length === 0 ? (_jsx(Container, { flex: "column", gap: "xs", py: "lg", children: _jsxs(Text, { size: "xs", color: "secondaryText", center: true, children: ["No suitable payment token found", _jsx("br", {}), "in connected wallets"] }) })) : (_jsxs(Container, { flex: "column", gap: "xs", children: [_jsx(Text, { size: "sm", children: "Select payment token" }), _jsx(Spacer, { y: "xs" })] })), _jsx(Container, { scrollY: true, style: {
                    maxHeight: "350px",
                }, children: _jsxs(Container, { flex: "column", gap: "sm", children: [filteredWallets.map(([w, balances]) => {
                            const address = w.address;
                            const wallet = connectedWallets.find((w) => w.getAccount()?.address === address);
                            if (!wallet)
                                return null;
                            return (_jsx(WalletRowWithBalances, { wallet: wallet, balances: balances, client: props.client, address: address, onClick: props.onSelectToken }, w.id));
                        }), filteredWallets.length > 0 && _jsx(TextDivider, { text: "OR" }), _jsx(Button, { variant: "secondary", fullWidth: true, onClick: props.onConnect, bg: "tertiaryBg", style: {
                                border: `1px solid ${theme.colors.borderColor}`,
                                padding: spacing.sm,
                            }, children: _jsxs(Container, { flex: "row", gap: "sm", center: "y", expand: true, color: "secondaryIconColor", children: [_jsx(OutlineWalletIcon, { size: iconSize.md }), _jsx(Text, { size: "sm", color: "primaryText", children: "Pay with another wallet" })] }) }), props.fiatSupported && (_jsx(Button, { variant: "secondary", fullWidth: true, onClick: props.onPayWithFiat, bg: "tertiaryBg", style: {
                                border: `1px solid ${theme.colors.borderColor}`,
                                padding: spacing.sm,
                            }, children: _jsxs(Container, { flex: "row", gap: "sm", center: "y", expand: true, color: "secondaryIconColor", children: [_jsx(CardStackIcon, { width: iconSize.md, height: iconSize.md }), _jsx(Text, { size: "sm", color: "primaryText", children: "Pay with a debit card" })] }) }))] }) })] }));
}
function WalletRowWithBalances(props) {
    const theme = useCustomTheme();
    const displayedBalances = props.balances;
    const activeAccount = useActiveAccount();
    const { disconnect } = useDisconnect();
    const isActiveAccount = activeAccount?.address === props.address;
    return (_jsxs(Container, { flex: "column", style: {
            borderRadius: radius.lg,
            border: `1px solid ${theme.colors.borderColor}`,
        }, children: [_jsxs(Container, { flex: "row", gap: "sm", bg: "tertiaryBg", style: {
                    justifyContent: "space-between",
                    borderTopRightRadius: radius.lg,
                    borderTopLeftRadius: radius.lg,
                    padding: spacing.sm,
                    paddingRight: spacing.xs,
                    borderBottom: `1px solid ${theme.colors.borderColor}`,
                }, children: [_jsx(WalletRow, { ...props }), !isActiveAccount && (_jsx(Button, { variant: "ghost", onClick: () => disconnect(props.wallet), style: {
                            padding: spacing.xxs,
                            color: theme.colors.secondaryText,
                        }, children: _jsx(Cross2Icon, { width: iconSize.sm, height: iconSize.sm }) }))] }), _jsx(Container, { flex: "column", children: props.balances.length > 0 ? (displayedBalances.map((b, idx) => (_jsx(TokenBalanceRow, { client: props.client, onClick: () => props.onClick(props.wallet, b.token, b.chain), tokenBalance: b, wallet: props.wallet, style: {
                        borderTopLeftRadius: 0,
                        borderTopRightRadius: 0,
                        borderBottomRightRadius: idx === displayedBalances.length - 1 ? radius.lg : 0,
                        borderBottomLeftRadius: idx === displayedBalances.length - 1 ? radius.lg : 0,
                        borderBottom: idx === displayedBalances.length - 1
                            ? "none"
                            : `1px solid ${theme.colors.borderColor}`,
                    } }, `${b.token.address}-${b.chain.id}`)))) : (_jsx(Container, { style: { padding: spacing.sm }, children: _jsx(Text, { size: "sm", color: "secondaryText", children: "Insufficient Funds" }) })) })] }));
}
function TokenBalanceRow(props) {
    const { tokenBalance, wallet, onClick, client, style } = props;
    const chainInfo = useChainName(tokenBalance.chain);
    return (_jsxs(StyledButton, { onClick: () => onClick(tokenBalance.token, wallet), variant: "secondary", style: {
            ...style,
            display: "flex",
            justifyContent: "space-between",
            minWidth: 0, // Needed for text truncation to work
        }, children: [_jsxs(Container, { flex: "row", center: "y", gap: "sm", style: {
                    flex: "1 1 50%",
                    minWidth: 0,
                    maxWidth: "50%",
                    overflow: "hidden",
                    flexWrap: "nowrap",
                }, children: [_jsx(TokenIcon, { token: tokenBalance.token, chain: tokenBalance.chain, size: "md", client: client }), _jsxs(Container, { flex: "column", gap: "4xs", style: { minWidth: 0 }, children: [_jsx(Text, { size: "xs", color: "primaryText", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: tokenBalance.token.symbol }), chainInfo && (_jsx(Text, { size: "xs", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: chainInfo.name }))] })] }), _jsxs(Container, { flex: "row", center: "y", gap: "4xs", color: "secondaryText", style: {
                    flex: "1 1 50%",
                    maxWidth: "50%",
                    minWidth: 0,
                    justifyContent: "flex-end",
                    flexWrap: "nowrap",
                }, children: [_jsxs(Container, { flex: "column", color: "secondaryText", gap: "4xs", style: {
                            alignItems: "flex-end",
                            minWidth: 0,
                            overflow: "hidden",
                        }, children: [_jsx(Text, { size: "xs", color: "primaryText", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: formatTokenBalance(tokenBalance.balance, true, 2) }), _jsx(FiatValue, { tokenAmount: tokenBalance.balance.displayValue, token: tokenBalance.token, chain: tokenBalance.chain, client: client, size: "xs" })] }), _jsx(ChevronRightIcon, { width: iconSize.md, height: iconSize.md, style: { flexShrink: 0 } })] })] }));
}
const StyledButton = /* @__PURE__ */ styled(Button)((props) => {
    const theme = useCustomTheme();
    return {
        background: "transparent",
        justifyContent: "space-between",
        flexWrap: "nowrap",
        flexDirection: "row",
        padding: spacing.sm,
        paddingRight: spacing.xs,
        gap: spacing.sm,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        transition: "background 200ms ease, transform 150ms ease",
        ...props.style,
    };
});
//# sourceMappingURL=TokenSelectorScreen.js.map