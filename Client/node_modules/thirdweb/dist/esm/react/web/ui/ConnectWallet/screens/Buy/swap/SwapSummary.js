import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCustomTheme } from "../../../../../../core/design-system/CustomThemeProvider.js";
import { radius } from "../../../../../../core/design-system/index.js";
import { Container } from "../../../../components/basic.js";
import { TokenRow } from "../../../../components/token/TokenRow.js";
import { StepConnectorArrow } from "./StepConnector.js";
import { WalletRow } from "./WalletRow.js";
export function SwapSummary(props) {
    const theme = useCustomTheme();
    const isDifferentRecipient = props.receiver.toLowerCase() !== props.sender.toLowerCase();
    return (_jsxs(Container, { children: [_jsxs(Container, { bg: "tertiaryBg", flex: "column", style: {
                    borderRadius: radius.lg,
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: [_jsx(Container, { flex: "row", gap: "sm", p: "sm", style: {
                            borderBottom: `1px solid ${theme.colors.borderColor}`,
                        }, children: _jsx(WalletRow, { address: props.sender, client: props.client, iconSize: "md", textSize: "sm" }) }), _jsx(TokenRow, { token: props.fromToken, chain: props.fromChain, client: props.client, isLoading: false, value: props.fromAmount, freezeChainAndToken: true, onSelectToken: () => { }, style: {
                            background: "transparent",
                            borderRadius: 0,
                            border: "none",
                        } })] }), _jsx(StepConnectorArrow, {}), _jsxs(Container, { flex: "column", bg: "tertiaryBg", style: {
                    borderRadius: radius.lg,
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: [isDifferentRecipient && (_jsx(Container, { flex: "row", gap: "sm", p: "sm", style: {
                            borderBottom: `1px solid ${theme.colors.borderColor}`,
                        }, children: _jsx(WalletRow, { address: props.receiver, client: props.client, iconSize: "md", textSize: "sm" }) })), _jsx(TokenRow, { token: props.toToken, chain: props.toChain, client: props.client, isLoading: false, value: props.toAmount, freezeChainAndToken: true, onSelectToken: () => { }, style: {
                            background: "transparent",
                            borderRadius: 0,
                            border: "none",
                        } })] })] }));
}
//# sourceMappingURL=SwapSummary.js.map