"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { useCallback, useEffect, useRef, useState } from "react";
import { useConnectionManager } from "../../../../core/providers/connection-manager.js";
import { useWalletInfo } from "../../../../core/utils/wallet.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { getSmartWalletLocale } from "../../../wallets/smartWallet/locale/getSmartWalletLocale.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container } from "../../components/basic.js";
import { Text } from "../../components/text.js";
import { AnyWalletConnectUI } from "./AnyWalletConnectUI.js";
/**
 * @internal
 */
export function SmartConnectUI(props) {
    const personalWalletInfo = useWalletInfo(props.personalWallet.id);
    const [keyConnected, setKeyConnected] = useState(false);
    if (!personalWalletInfo.data) {
        return _jsx(LoadingScreen, {});
    }
    // connect personal wallet
    if (!keyConnected) {
        return (_jsx(AnyWalletConnectUI, { wallet: props.personalWallet, done: () => {
                setKeyConnected(true);
            }, onBack: props.onBack, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, meta: props.meta, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale }));
    }
    return (_jsx(SmartWalletConnecting, { done: props.done, personalWallet: props.personalWallet, accountAbstraction: props.accountAbstraction, onBack: props.onBack, personalWalletInfo: personalWalletInfo.data, localeId: props.connectLocale.id, size: props.size, client: props.client }));
}
function SmartWalletConnecting(props) {
    const localeQuery = useQuery({
        queryKey: ["getSmartWalletLocale", props.localeId],
        queryFn: () => getSmartWalletLocale(props.localeId),
    });
    const { personalWallet } = props;
    const { done } = props;
    const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] = useState("idle");
    const connectionManager = useConnectionManager();
    const handleConnect = useCallback(async () => {
        if (!personalWallet) {
            throw new Error("No personal wallet");
        }
        setSmartWalletConnectionStatus("connecting");
        try {
            const connected = await connectionManager.handleConnection(personalWallet, {
                accountAbstraction: props.accountAbstraction,
                client: props.client,
            });
            done(connected);
            setSmartWalletConnectionStatus("idle");
        }
        catch (e) {
            console.error(e);
            setSmartWalletConnectionStatus("connect-error");
        }
    }, [
        done,
        personalWallet,
        props.client,
        props.accountAbstraction,
        connectionManager,
    ]);
    const connectStarted = useRef(false);
    useEffect(() => {
        if (!connectStarted.current) {
            handleConnect();
            connectStarted.current = true;
        }
    }, [handleConnect]);
    if (!localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    if (smartWalletConnectionStatus === "connect-error") {
        return (_jsx(Container, { fullHeight: true, animate: "fadein", flex: "column", center: "both", p: "lg", style: {
                minHeight: "300px",
            }, children: _jsx(Text, { color: "danger", children: localeQuery.data.failedToConnect }) }));
    }
    return (_jsxs(Container, { fullHeight: true, flex: "column", center: "both", style: {
            minHeight: "300px",
        }, children: [_jsx(Text, { color: "primaryText", multiline: true, center: true, children: localeQuery.data.connecting }), _jsx(Spacer, { y: "lg" }), _jsx(Spinner, { color: "accentText", size: "lg" })] }));
}
//# sourceMappingURL=SmartWalletConnectUI.js.map