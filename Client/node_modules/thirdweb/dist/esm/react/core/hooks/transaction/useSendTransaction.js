import { useMutation } from "@tanstack/react-query";
import { trackPayEvent } from "../../../../analytics/track/pay.js";
import { sendTransaction } from "../../../../transaction/actions/send-transaction.js";
import { getTransactionGasCost } from "../../../../transaction/utils.js";
import { resolvePromisedValue } from "../../../../utils/promise/resolve-promised-value.js";
import { getTokenBalance } from "../../../../wallets/utils/getTokenBalance.js";
import { getWalletBalance } from "../../../../wallets/utils/getWalletBalance.js";
import { fetchBuySupportedDestinations } from "../../../web/ui/ConnectWallet/screens/Buy/swap/useSwapSupportedChains.js";
import { hasSponsoredTransactionsEnabled } from "../../utils/wallet.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @example
 * ```jsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 * @internal
 */
export function useSendTransactionCore(args) {
    const { showPayModal, gasless, wallet, switchChain } = args;
    let _account = wallet?.getAccount();
    return useMutation({
        mutationFn: async (tx) => {
            // switch chain if needed
            if (wallet && tx.chain.id !== wallet.getChain()?.id) {
                await switchChain(tx.chain);
                // in smart wallet case, account may change after chain switch
                _account = wallet.getAccount();
            }
            const account = _account;
            if (!account) {
                throw new Error("No active account");
            }
            if (!showPayModal) {
                trackPayEvent({
                    client: tx.client,
                    walletAddress: account.address,
                    walletType: wallet?.id,
                    dstChainId: tx.chain.id,
                    event: "pay_transaction_modal_disabled",
                });
                return sendTransaction({
                    transaction: tx,
                    account,
                    gasless,
                });
            }
            return new Promise((resolve, reject) => {
                const sendTx = async () => {
                    try {
                        const res = await sendTransaction({
                            transaction: tx,
                            account,
                            gasless,
                        });
                        resolve(res);
                    }
                    catch (e) {
                        reject(e);
                    }
                };
                (async () => {
                    try {
                        const [_nativeValue, _erc20Value, supportedDestinations] = await Promise.all([
                            resolvePromisedValue(tx.value),
                            resolvePromisedValue(tx.erc20Value),
                            fetchBuySupportedDestinations(tx.client).catch((err) => {
                                trackPayEvent({
                                    client: tx.client,
                                    walletAddress: account.address,
                                    walletType: wallet?.id,
                                    dstChainId: tx.chain.id,
                                    event: "pay_transaction_modal_pay_api_error",
                                    error: err?.message,
                                });
                                return null;
                            }),
                        ]);
                        if (!supportedDestinations) {
                            // could not fetch supported destinations, just send the tx
                            sendTx();
                            return;
                        }
                        if (!supportedDestinations
                            .map((x) => x.chain.id)
                            .includes(tx.chain.id) ||
                            (_erc20Value &&
                                !supportedDestinations.some((x) => x.chain.id === tx.chain.id &&
                                    x.tokens.find((t) => t.address.toLowerCase() ===
                                        _erc20Value.tokenAddress.toLowerCase())))) {
                            trackPayEvent({
                                client: tx.client,
                                walletAddress: account.address,
                                walletType: wallet?.id,
                                dstChainId: tx.chain.id,
                                event: "pay_transaction_modal_chain_token_not_supported",
                                error: `chain ${tx.chain.id} ${_erc20Value ? `/ token ${_erc20Value?.tokenAddress}` : ""} not supported`,
                            });
                            // chain/token not supported, just send the tx
                            sendTx();
                            return;
                        }
                        const nativeValue = _nativeValue || 0n;
                        const erc20Value = _erc20Value?.amountWei || 0n;
                        const [nativeBalance, erc20Balance, gasCost] = await Promise.all([
                            getWalletBalance({
                                client: tx.client,
                                address: account.address,
                                chain: tx.chain,
                            }),
                            _erc20Value?.tokenAddress
                                ? getTokenBalance({
                                    client: tx.client,
                                    account,
                                    chain: tx.chain,
                                    tokenAddress: _erc20Value.tokenAddress,
                                })
                                : undefined,
                            getTransactionGasCost(tx, account.address),
                        ]);
                        const gasSponsored = hasSponsoredTransactionsEnabled(wallet);
                        const txGasCost = gasSponsored ? 0n : gasCost;
                        const nativeCost = nativeValue + txGasCost;
                        const shouldShowModal = (erc20Value > 0n &&
                            erc20Balance &&
                            erc20Balance.value < erc20Value) ||
                            (nativeCost > 0n && nativeBalance.value < nativeCost);
                        if (shouldShowModal) {
                            showPayModal({
                                tx,
                                sendTx,
                                rejectTx: reject,
                                resolveTx: resolve,
                            });
                        }
                        else {
                            trackPayEvent({
                                client: tx.client,
                                walletAddress: account.address,
                                walletType: wallet?.id,
                                dstChainId: tx.chain.id,
                                event: "pay_transaction_modal_has_enough_funds",
                            });
                            sendTx();
                        }
                    }
                    catch (e) {
                        console.error("Failed to estimate cost", e);
                        // send it anyway?
                        sendTx();
                    }
                })();
            });
        },
    });
}
//# sourceMappingURL=useSendTransaction.js.map