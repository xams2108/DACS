import { signLoginPayload } from "../../../../auth/core/sign-login-payload.js";
import { getClientFetch } from "../../../../utils/fetch.js";
import { stringify } from "../../../../utils/json.js";
import { getLoginCallbackUrl, getLoginUrl } from "./getLoginPath.js";
/**
 * @internal
 */
export async function siweAuthenticate(args) {
    const { wallet, chain, client, ecosystem } = args;
    // only connect if the wallet doesn't already have an account
    const account = wallet.getAccount() || (await wallet.connect({ client, chain }));
    const clientFetch = getClientFetch(client, ecosystem);
    const payload = await (async () => {
        const path = getLoginUrl({
            authOption: "wallet",
            client: args.client,
            ecosystem: args.ecosystem,
        });
        const res = await clientFetch(`${path}&address=${account.address}&chainId=${chain.id}`);
        if (!res.ok)
            throw new Error("Failed to generate SIWE login payload");
        return (await res.json());
    })();
    const { signature } = await signLoginPayload({ payload, account });
    const authResult = await (async () => {
        const path = getLoginCallbackUrl({
            authOption: "wallet",
            client: args.client,
            ecosystem: args.ecosystem,
        });
        const res = await clientFetch(`${path}&signature=${signature}&payload=${encodeURIComponent(payload)}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: stringify({
                signature,
                payload,
            }),
        });
        if (!res.ok)
            throw new Error("Failed to verify SIWE signature");
        return (await res.json());
    })();
    return authResult;
}
//# sourceMappingURL=siwe.js.map