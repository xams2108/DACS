{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/in-app/web/ecosystem.ts", "../../thirdweb/src/wallets/in-app/web/in-app.ts", "../../thirdweb/src/wallets/smart/smart-wallet.ts", "../../thirdweb/src/utils/web/isMobile.ts", "../../thirdweb/src/utils/web/openWindow.ts", "../../thirdweb/src/wallets/coinbase/coinbase-wallet.ts", "../../thirdweb/src/wallets/create-wallet.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Wallet } from \"../../interfaces/wallet.js\";\nimport type {\n  CreateWalletArgs,\n  EcosystemWalletId,\n} from \"../../wallet-types.js\";\nimport { createInAppWallet } from \"../core/wallet/in-app-core.js\";\n\n/**\n * Creates an [Ecosystem Wallet](https://portal.thirdweb.com/connect/wallet/overview) based on various authentication methods. Full list of available authentication methods [here](/connect/wallet/sign-in-methods/configure).\n *\n * Can also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\n *\n * Refer to [inAppWallet](/typescript/v5/inAppWallet) for detailed usage examples.\n *\n * @param createOptions - configuration options\n * Refer to [EcosystemWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/EcosystemWalletCreationOptions) for more details.\n * @returns The created ecosystem wallet.\n *\n *\n * @example\n * ### Logging into an ecosystem wallet\n *\n * Below is the general code snippet needed to connect via a given auth strategy to an ecosystem wallet. For more variants on the various auth strategies, refer to [inAppWallet](/typescript/v5/inAppWallet).\n *\n * ```ts\n * import { ecosystemWallet } from \"thirdweb/wallets\";\n *\n * const wallet = ecosystemWallet(\"ecosystem.hooli\");\n *\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"google\",\n * });\n * ```\n *\n * [View all connection options](https://portal.thirdweb.com/references/typescript/v5/EcosystemWalletConnectionOptions).\n *\n * ### Connect to a restricted ecosystem wallet with your designated partner ID\n *\n * The partner ID will be provided to you by the ecosystem with which you're integrating.\n *\n * ```ts\n * import { ecosystemWallet } from \"thirdweb/wallets\";\n * const wallet = ecosystemWallet(\"ecosystem.hooli\", {\n *  partnerId: \"...\"\n * });\n * ```\n *\n *\n * @wallet\n */\nexport function ecosystemWallet(\n  ...args: CreateWalletArgs<EcosystemWalletId>\n): Wallet<EcosystemWalletId> {\n  const [ecosystemId, createOptions] = args;\n  const ecosystem = {\n    id: ecosystemId,\n    partnerId: createOptions?.partnerId,\n  };\n  return createInAppWallet({\n    ecosystem,\n    createOptions: {\n      auth: {\n        ...createOptions?.auth,\n        options: [], // controlled by ecosystem\n      },\n      partnerId: ecosystem.partnerId,\n    },\n    connectorFactory: async (client: ThirdwebClient) => {\n      const { InAppWebConnector } = await import(\"./lib/web-connector.js\");\n      return new InAppWebConnector({\n        client,\n        ecosystem,\n        storage: createOptions?.storage,\n      });\n    },\n  }) as Wallet<EcosystemWalletId>;\n}\n", "import type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Wallet } from \"../../interfaces/wallet.js\";\nimport type { CreateWalletArgs } from \"../../wallet-types.js\";\nimport { createInAppWallet } from \"../core/wallet/in-app-core.js\";\n\n/**\n * Creates an app scoped wallet for users based on various authentication methods. Full list of available authentication methods [here](https://portal.thirdweb.com/connect/wallet/sign-in-methods/configure).\n *\n * Can also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\n *\n * @param createOptions - configuration options\n * Refer to [InAppWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/InAppWalletCreationOptions) to see the available options.\n * @returns The created in-app wallet.\n * @example\n *\n * ### Login with socials\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"google\",\n * });\n * ```\n *\n * [View all available social auth methods](https://portal.thirdweb.com/connect/wallet/sign-in-methods/configure)\n *\n * ### Enable smart accounts and sponsor gas for your users:\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = inAppWallet({\n *  smartAccount: {\n *   chain: sepolia,\n *   sponsorGas: true,\n * },\n * });\n *\n * // account will be a smart account with sponsored gas enabled\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"google\",\n * });\n * ```\n *\n * ### Login with email\n *\n * ```ts\n * import { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * // sends a verification code to the provided email\n * await preAuthenticate({\n *   client,\n *   strategy: \"email\",\n *   email: \"example@example.com\",\n * });\n *\n * // login with the verification code\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"email\",\n *   email: \"example@example.com\",\n *   verificationCode: \"123456\",\n * });\n * ```\n *\n * ### Login with SIWE\n * ```ts\n * import { inAppWallet, createWallet } from \"thirdweb/wallets\";\n *\n * const rabby = createWallet(\"io.rabby\");\n * const inAppWallet = inAppWallet();\n *\n * const account = await inAppWallet.connect({\n *    strategy: \"wallet\",\n *    chain: mainnet,\n *    wallet: rabby,\n *    client: MY_CLIENT\n * });\n * ```\n *\n * ### Login with phone number\n * ```ts\n * import { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * // sends a verification code to the provided phone number\n * await preAuthenticate({\n *   client,\n *   strategy: \"phone\",\n *   phoneNumber: \"+1234567890\",\n * });\n *\n * // login with the verification code\n * const account = await wallet.connect({\n *   client,\n *   chain,\n *   strategy: \"phone\",\n *   honeNumber: \"+1234567890\",\n *   verificationCode: \"123456\",\n * });\n * ```\n *\n * ### Login with passkey\n *\n * ```ts\n * import { inAppWallet, hasStoredPasskey } from \"thirdweb/wallets/in-app\";\n *\n * const wallet = inAppWallet();\n *\n * const wallet = inAppWallet();\n * const hasPasskey = await hasStoredPasskey(client);\n * await wallet.connect({\n *   client,\n *   strategy: \"passkey\",\n *  type: hasPasskey ? \"sign-in\" : \"sign-up\",\n * });\n * ```\n *\n * ### Connect to a guest account\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"guest\",\n * });\n * ```\n *\n * ### Connect to a backend account\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"backend\",\n *   walletSecret: \"...\", // Provided by your app\n * });\n * ```\n *\n * ### Connect with custom JWT (any OIDC provider)\n *\n * You can use any OIDC provider to authenticate your users. Make sure to configure it in your dashboard under in-app wallet settings.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"jwt\",\n *   jwt: \"your_jwt_here\",\n * });\n * ```\n *\n * ### Connect with custom endpoint\n *\n * You can also use your own endpoint to authenticate your users. Make sure to configure it in your dashboard under in-app wallet settings.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n *\n * const wallet = inAppWallet();\n *\n * const account = await wallet.connect({\n *   client,\n *   strategy: \"auth_endpoint\",\n *   payload: \"your_auth_payload_here\",\n * });\n * ```\n *\n * ### Specify a logo for your login page (Connect UI)\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  metadata: {\n *   image: {\n *    src: \"https://example.com/logo.png\",\n *    alt: \"My logo\",\n *    width: 100,\n *    height: 100,\n *   },\n *  },\n * });\n * ```\n *\n * ### Hide the ability to export the private key within the Connect Modal UI\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  hidePrivateKeyExport: true\n * });\n * ```\n *\n * ### Open the Oauth window in the same tab\n *\n * By default, the Oauth window will open in a popup window. You can change this behavior by setting the `auth.mode` option to `\"redirect\"`.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * const wallet = inAppWallet({\n *  auth: {\n *    mode: \"redirect\"\n *  }\n * });\n * ```\n *\n * ### Override storage for the wallet state\n *\n * By default, wallet state is stored in the browser's local storage. You can override this behavior by providing a custom storage object, useful for server side integrations.\n *\n * ```ts\n * import { inAppWallet } from \"thirdweb/wallets\";\n * import { AsyncStorage } from \"thirdweb/storage\";\n *\n * const myStorage: AsyncStorage = {\n *  getItem: async (key) => {\n *    return customGet(`CUSTOM_STORAGE_KEY${key}`);\n *  },\n *  setItem: async (key, value) => {\n *    return customSet(`CUSTOM_STORAGE_KEY${key}`, value);\n *  },\n *  removeItem: async (key) => {\n *    return customRemove(`CUSTOM_STORAGE_KEY${key}`);\n *  },\n * };\n *\n * const wallet = inAppWallet({\n *  storage: myStorage,\n * });\n * ```\n *\n * @returns The created in-app wallet.\n * @wallet\n */\nexport function inAppWallet(\n  createOptions?: CreateWalletArgs<\"inApp\">[1],\n): Wallet<\"inApp\"> {\n  return createInAppWallet({\n    createOptions,\n    connectorFactory: async (client: ThirdwebClient) => {\n      const { InAppWebConnector } = await import(\"./lib/web-connector.js\");\n      return new InAppWebConnector({\n        client,\n        passkeyDomain: createOptions?.auth?.passkeyDomain,\n        storage: createOptions?.storage,\n      });\n    },\n  }) as Wallet<\"inApp\">;\n}\n", "import { trackConnect } from \"../../analytics/track/connect.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getCachedChainIfExists } from \"../../chains/utils.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { isZkSyncChain } from \"../../utils/any-evm/zksync/isZkSyncChain.js\";\nimport { isContractDeployed } from \"../../utils/bytecode/is-contract-deployed.js\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport { createWalletEmitter } from \"../wallet-emitter.js\";\nimport type { WalletConnectionOption } from \"../wallet-types.js\";\nimport { getDefaultAccountFactory } from \"./lib/constants.js\";\nimport type { SmartWalletOptions } from \"./types.js\";\n\n/**\n * Creates a ERC4337 smart wallet based on a admin account.\n *\n * Smart wallets are smart contract wallets that enable multiple benefits for users:\n *\n * - Sponsor gas fees for transactions\n * - Multiple owners\n * - Session keys\n * - Batch transactions\n * - Predictable addresses\n * - Programmable features\n *\n * [Learn more about account abstraction](https://portal.thirdweb.com/connect/account-abstraction/how-it-works)\n *\n * @param createOptions - The options for creating the wallet.\n * Refer to [SmartWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/SmartWalletCreationOptions) for more details.\n * @returns The created smart wallet.\n * @example\n *\n * ## Connect to a smart wallet\n *\n * To connect to a smart wallet, you need to provide an admin account as the `personalAccount` option.\n *\n * Any wallet can be used as an admin account, including an in-app wallets.\n *\n * The `sponsorGas` option is used to enable sponsored gas for transactions automatically.\n *\n * ```ts\n * import { smartWallet, inAppWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n * });\n *\n * // any wallet can be used as an admin account\n * // in this example we use an in-app wallet\n * const adminWallet = inAppWallet();\n * const personalAccount = await adminWallet.connect({\n *   client,\n *   chain: sepolia,\n *   strategy: \"google\",\n * });\n *\n * const smartAccount = await wallet.connect({\n *   client,\n *   personalAccount, // pass the admin account\n * });\n *\n * // sending sponsored transactions with the smartAccount\n * await sendTransaction({\n *   account: smartAccount,\n *   transaction,\n * });\n * ```\n *\n * ## Using a custom account factory\n *\n * You can pass a custom account factory to the `smartWallet` function to use a your own account factory.\n *\n * ```ts\n * import { smartWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: \"0x...\", // custom factory address\n * });\n * ```\n *\n * ## Using v0.7 Entrypoint\n *\n * Both v0.6 (default) and v0.7 ERC4337 Entrypoints are supported. To use the v0.7 Entrypoint, simply pass in a compatible account factory.\n *\n * You can use the predeployed `DEFAULT_ACCOUNT_FACTORY_V0_7` or deploy your own [AccountFactory  v0.7](https://thirdweb.com/thirdweb.eth/AccountFactory_0_7).\n *\n * ```ts\n * import { smartWallet, DEFAULT_ACCOUNT_FACTORY_V0_7 } from \"thirdweb/wallets/smart\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: DEFAULT_ACCOUNT_FACTORY_V0_7, // 0.7 factory address\n * });\n * ```\n *\n * ## Configuring the smart wallet\n *\n * You can pass options to the `smartWallet` function to configure the smart wallet.\n *\n * ```ts\n * import { smartWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: \"0x...\", // custom factory address\n *  overrides: {\n *    accountAddress: \"0x...\", // override account address\n *    accountSalt: \"0x...\", // override account salt\n *    entrypointAddress: \"0x...\", // override entrypoint address\n *    tokenPaymaster: TokenPaymaster.BASE_USDC, // enable erc20 paymaster\n *    bundlerUrl: \"https://...\", // override bundler url\n *    paymaster: (userOp) => { ... }, // override paymaster\n *    ...\n *  }\n * });\n * ```\n *\n * Refer to [SmartWalletOptions](https://portal.thirdweb.com/references/typescript/v5/SmartWalletOptions) for more details.\n *\n * @wallet\n */\nexport function smartWallet(\n  createOptions: SmartWalletOptions,\n): Wallet<\"smart\"> {\n  const emitter = createWalletEmitter<\"smart\">();\n  let account: Account | undefined = undefined;\n  let adminAccount: Account | undefined = undefined;\n  let chain: Chain | undefined = undefined;\n  let lastConnectOptions: WalletConnectionOption<\"smart\"> | undefined;\n\n  return {\n    id: \"smart\",\n    subscribe: emitter.subscribe,\n    getChain() {\n      if (!chain) {\n        return undefined;\n      }\n\n      chain = getCachedChainIfExists(chain.id) || chain;\n      return chain;\n    },\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    getAdminAccount: () => adminAccount,\n    autoConnect: async (options) => {\n      const { connectSmartAccount: connectSmartWallet } = await import(\n        \"./index.js\"\n      );\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        options,\n        createOptions,\n      );\n      // set the states\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      return account;\n    },\n    connect: async (options) => {\n      const { connectSmartAccount } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartAccount(\n        options,\n        createOptions,\n      );\n      // set the states\n      adminAccount = options.personalAccount;\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      emitter.emit(\"accountChanged\", account);\n      return account;\n    },\n    disconnect: async () => {\n      if (account) {\n        const { disconnectSmartAccount } = await import(\"./index.js\");\n        await disconnectSmartAccount(account);\n      }\n      account = undefined;\n      adminAccount = undefined;\n      chain = undefined;\n      emitter.emit(\"disconnect\", undefined);\n    },\n    switchChain: async (newChain: Chain) => {\n      if (!lastConnectOptions) {\n        throw new Error(\"Cannot switch chain without a previous connection\");\n      }\n      const isZksyncChain = await isZkSyncChain(newChain);\n      if (!isZksyncChain) {\n        // check if factory is deployed\n        const factory = getContract({\n          address:\n            createOptions.factoryAddress ||\n            getDefaultAccountFactory(\n              createOptions.overrides?.entrypointAddress,\n            ),\n          chain: newChain,\n          client: lastConnectOptions.client,\n        });\n        const isDeployed = await isContractDeployed(factory);\n        if (!isDeployed) {\n          throw new Error(\n            `Factory contract not deployed on chain: ${newChain.id}`,\n          );\n        }\n      }\n      const { connectSmartAccount } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartAccount(\n        { ...lastConnectOptions, chain: newChain },\n        createOptions,\n      );\n      // set the states\n      account = connectedAccount;\n      chain = connectedChain;\n      emitter.emit(\"accountChanged\", connectedAccount);\n      emitter.emit(\"chainChanged\", connectedChain);\n    },\n  };\n}\n", "import { detectOS } from \"../detect-platform.js\";\n\n/**\n * @internal\n */\nexport function isAndroid(): boolean {\n  // can only detect if useragent is defined\n  if (typeof navigator === \"undefined\") {\n    return false;\n  }\n  const os = detectOS(navigator.userAgent);\n  return os ? os.toLowerCase().includes(\"android\") : false;\n}\n\n/**\n * @internal\n */\nexport function isIOS(): boolean {\n  // can only detect if useragent is defined\n  if (typeof navigator === \"undefined\") {\n    return false;\n  }\n  const os = detectOS(navigator.userAgent);\n  return os\n    ? os.toLowerCase().includes(\"ios\") ||\n        (os.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1)\n    : false;\n}\n\n/**\n * @internal\n */\nexport function isMobile(): boolean {\n  return isAndroid() || isIOS();\n}\n", "/**\n * @internal\n */\nexport function openWindow(uri: string) {\n  const isInsideIframe = window !== window.top;\n  if (isInsideIframe) {\n    window.open(uri);\n  } else {\n    if (uri.startsWith(\"http\")) {\n      // taken from for https://github.com/rainbow-me/rainbowkit/\n\n      // Using 'window.open' causes issues on iOS in non-Safari browsers and\n      // WebViews where a blank tab is left behind after connecting.\n      // This is especially bad in some WebView scenarios (e.g. following a\n      // link from Twitter) where the user doesn't have any mechanism for\n      // closing the blank tab.\n      // For whatever reason, links with a target of \"_blank\" don't suffer\n      // from this problem, and programmatically clicking a detached link\n      // element with the same attributes also avoids the issue.\n\n      const link = document.createElement(\"a\");\n      link.href = uri;\n      link.target = \"_blank\";\n      link.rel = \"noreferrer noopener\";\n      link.click();\n    } else {\n      window.location.href = uri;\n    }\n  }\n}\n", "/**\n * internal helper functions\n */\n\nimport type { ProviderInterface } from \"@coinbase/wallet-sdk\";\nimport { trackConnect } from \"../../analytics/track/connect.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getCachedChainIfExists } from \"../../chains/utils.js\";\nimport { COINBASE } from \"../constants.js\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport { createWalletEmitter } from \"../wallet-emitter.js\";\nimport type { CreateWalletArgs } from \"../wallet-types.js\";\n\n/**\n * @internal\n */\nexport function coinbaseWalletSDK(args: {\n  createOptions?: CreateWalletArgs<typeof COINBASE>[1];\n  providerFactory: () => Promise<ProviderInterface>;\n  onConnectRequested?: (provider: ProviderInterface) => Promise<void>;\n}): Wallet<typeof COINBASE> {\n  const { createOptions } = args;\n  const emitter = createWalletEmitter<typeof COINBASE>();\n  let account: Account | undefined = undefined;\n  let chain: Chain | undefined = undefined;\n\n  function reset() {\n    account = undefined;\n    chain = undefined;\n  }\n\n  let handleDisconnect = async () => {};\n\n  let handleSwitchChain = async (newChain: Chain) => {\n    chain = newChain;\n  };\n\n  const unsubscribeChainChanged = emitter.subscribe(\n    \"chainChanged\",\n    (newChain) => {\n      chain = newChain;\n    },\n  );\n\n  const unsubscribeDisconnect = emitter.subscribe(\"disconnect\", () => {\n    reset();\n    unsubscribeChainChanged();\n    unsubscribeDisconnect();\n  });\n\n  emitter.subscribe(\"accountChanged\", (_account) => {\n    account = _account;\n  });\n\n  return {\n    id: COINBASE,\n    subscribe: emitter.subscribe,\n    getChain() {\n      if (!chain) {\n        return undefined;\n      }\n\n      chain = getCachedChainIfExists(chain.id) || chain;\n      return chain;\n    },\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    autoConnect: async (options) => {\n      const { autoConnectCoinbaseWalletSDK } = await import(\n        \"./coinbase-web.js\"\n      );\n      const provider = await args.providerFactory();\n      const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] =\n        await autoConnectCoinbaseWalletSDK(options, emitter, provider);\n      // set the states\n      account = connectedAccount;\n      chain = connectedChain;\n      handleDisconnect = doDisconnect;\n      handleSwitchChain = doSwitchChain;\n      trackConnect({\n        client: options.client,\n        walletType: COINBASE,\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      return account;\n    },\n    connect: async (options) => {\n      const { connectCoinbaseWalletSDK } = await import(\"./coinbase-web.js\");\n      const provider = await args.providerFactory();\n      const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] =\n        await connectCoinbaseWalletSDK(options, emitter, provider);\n\n      // set the states\n      account = connectedAccount;\n      chain = connectedChain;\n      handleDisconnect = doDisconnect;\n      handleSwitchChain = doSwitchChain;\n      trackConnect({\n        client: options.client,\n        walletType: COINBASE,\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      return account;\n    },\n    disconnect: async () => {\n      reset();\n      await handleDisconnect();\n    },\n    switchChain: async (newChain) => {\n      await handleSwitchChain(newChain);\n    },\n    onConnectRequested: async () => {\n      if (args.onConnectRequested) {\n        const provider = await args.providerFactory();\n        return args.onConnectRequested?.(provider);\n      }\n    },\n  };\n}\n", "import type { Chain } from \"../chains/types.js\";\nimport type {\n  InjectedSupportedWalletIds,\n  WCSupportedWalletIds,\n} from \"./__generated__/wallet-ids.js\";\nimport type { Account, Wallet } from \"./interfaces/wallet.js\";\nimport type {\n  CreateWalletArgs,\n  EcosystemWalletId,\n  WalletAutoConnectionOption,\n  WalletId,\n} from \"./wallet-types.js\";\n\nimport { trackConnect } from \"../analytics/track/connect.js\";\nimport { getCachedChainIfExists } from \"../chains/utils.js\";\nimport { webLocalStorage } from \"../utils/storage/webStorage.js\";\nimport { isMobile } from \"../utils/web/isMobile.js\";\nimport { openWindow } from \"../utils/web/openWindow.js\";\nimport { coinbaseWalletSDK } from \"./coinbase/coinbase-wallet.js\";\nimport { getCoinbaseWebProvider } from \"./coinbase/coinbase-web.js\";\nimport { COINBASE } from \"./constants.js\";\nimport { isEcosystemWallet } from \"./ecosystem/is-ecosystem-wallet.js\";\nimport { ecosystemWallet } from \"./in-app/web/ecosystem.js\";\nimport { inAppWallet } from \"./in-app/web/in-app.js\";\nimport { getInjectedProvider } from \"./injected/index.js\";\nimport { smartWallet } from \"./smart/smart-wallet.js\";\nimport type { WCConnectOptions } from \"./wallet-connect/types.js\";\nimport { createWalletEmitter } from \"./wallet-emitter.js\";\n\n// TODO: figure out how to define the type without tuple args type and using function overloads\n\n/**\n * Creates a wallet based on the provided ID and arguments.\n *\n * - Supports 500+ wallets\n * - Handles both injected browser wallets and WalletConnect sessions\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n * @param args - The arguments for creating the wallet.\n * @param args.id - The ID of the wallet to create, this will be autocompleted by your IDE.\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n * @param args.createOptions - The options for creating the wallet.\n * The arguments are different for each wallet type.\n * Refer to the [WalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/WalletCreationOptions) type for more details.\n * @returns - The created wallet.\n * @example\n *\n * ## Connecting the wallet\n *\n * Once created, you can connect the wallet to your app by calling the `connect` method.\n *\n * The `connect` method returns a promise that resolves to the connected account.\n *\n * Each wallet type can have different connect options. [View the different connect options](https://portal.thirdweb.com/references/typescript/v5/WalletConnectionOption)\n *\n * ## Connecting to an injected wallet\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const metamaskWallet = createWallet(\"io.metamask\");\n *\n * const account = await metamaskWallet.connect({\n *  client,\n * });\n * ```\n *\n * You can check if a wallet is installed by calling the [injectedProvider](https://portal.thirdweb.com/references/typescript/v5/injectedProvider) method.\n *\n * ## Connecting via WalletConnect modal\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const metamaskWallet = createWallet(\"io.metamask\");\n *\n * await metamask.connect({\n *   client,\n *   walletConnect: {\n *     projectId: \"YOUR_PROJECT_ID\",\n *     showQrModal: true,\n *     appMetadata: {\n *       name: \"My App\",\n *       url: \"https://my-app.com\",\n *       description: \"my app description\",\n *       logoUrl: \"https://path/to/my-app/logo.svg\",\n *     },\n *   },\n * });\n * ```\n * [View ConnectWallet connection options](https://portal.thirdweb.com/references/typescript/v5/WCConnectOptions)\n *\n * ## Connecting with coinbase wallet\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const cbWallet = createWallet(\"com.coinbase.wallet\", {\n *   appMetadata: {\n *     name: \"My App\",\n *     url: \"https://my-app.com\",\n *     description: \"my app description\",\n *     logoUrl: \"https://path/to/my-app/logo.svg\",\n *   },\n *   walletConfig: {\n *     // options: 'all' | 'smartWalletOnly' | 'eoaOnly'\n *     options: 'all',\n *   },\n * });\n *\n * const account = await cbWallet.connect({\n *  client,\n * });\n * ```\n *\n * [View Coinbase wallet creation options](https://portal.thirdweb.com/references/typescript/v5/CoinbaseWalletCreationOptions)\n *\n * ## Connecting with a smart wallet\n *\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const wallet = createWallet(\"smart\", {\n *   chain: sepolia,\n *   sponsorGas: true,\n * });\n *\n * const account = await wallet.connect({\n *  client,\n *  personalAccount, // pass the admin account\n * });\n * ```\n *\n * @wallet\n */\nexport function createWallet<const ID extends WalletId>(\n  ...args: CreateWalletArgs<ID>\n): Wallet<ID> {\n  const [id, creationOptions] = args;\n\n  switch (true) {\n    /**\n     * SMART WALLET\n     */\n    case id === \"smart\": {\n      return smartWallet(\n        creationOptions as CreateWalletArgs<\"smart\">[1],\n      ) as Wallet<ID>;\n    }\n    /**\n     * IN-APP WALLET\n     */\n    case id === \"embedded\" || id === \"inApp\": {\n      return inAppWallet(\n        creationOptions as CreateWalletArgs<\"inApp\">[1],\n      ) as Wallet<ID>;\n    }\n    /**\n     * ECOSYSTEM WALLET\n     */\n    case isEcosystemWallet(id):\n      return ecosystemWallet(\n        ...(args as CreateWalletArgs<EcosystemWalletId>),\n      ) as Wallet<ID>;\n\n    /**\n     * COINBASE WALLET VIA SDK\n     * -> if no injected coinbase found, we'll use the coinbase SDK\n     */\n    case id === COINBASE: {\n      const options = creationOptions as CreateWalletArgs<typeof COINBASE>[1];\n      return coinbaseWalletSDK({\n        createOptions: options,\n        providerFactory: () => getCoinbaseWebProvider(options),\n        onConnectRequested: async (provider) => {\n          // on the web, make sure to show the coinbase popup IMMEDIATELY on connection requested\n          // otherwise the popup might get blocked in safari\n          // TODO awaiting the provider is fast only thanks to preloading that happens in our components\n          // these probably need to actually imported / created synchronously to be used headless properly\n          const { showCoinbasePopup } = await import(\"./coinbase/utils.js\");\n          return showCoinbasePopup(provider);\n        },\n      }) as Wallet<ID>;\n    }\n    /**\n     * WALLET CONNECT AND INJECTED WALLETS + walletConnect standalone\n     */\n    default: {\n      const emitter = createWalletEmitter<ID>();\n      let account: Account | undefined = undefined;\n      let chain: Chain | undefined = undefined;\n      let unsubscribeChain: (() => void) | undefined = undefined;\n\n      function reset() {\n        account = undefined;\n        chain = undefined;\n      }\n\n      let handleDisconnect = async () => {};\n\n      const unsubscribeDisconnect = emitter.subscribe(\"disconnect\", () => {\n        reset();\n        unsubscribeChain?.();\n        unsubscribeDisconnect();\n      });\n\n      emitter.subscribe(\"accountChanged\", (_account) => {\n        account = _account;\n      });\n\n      let handleSwitchChain: (chain: Chain) => Promise<void> = async () => {\n        throw new Error(\"Not implemented yet\");\n      };\n\n      // on mobile, deeplink to the wallet app for session handling\n      const sessionHandler = isMobile()\n        ? (uri: string) => openWindow(uri)\n        : undefined;\n\n      const wallet: Wallet<ID> = {\n        id,\n        subscribe: emitter.subscribe,\n        getConfig: () => args[1],\n        getChain() {\n          if (!chain) {\n            return undefined;\n          }\n\n          chain = getCachedChainIfExists(chain.id) || chain;\n          return chain;\n        },\n        getAccount: () => account,\n        autoConnect: async (\n          options: WalletAutoConnectionOption<\n            WCSupportedWalletIds | InjectedSupportedWalletIds\n          >,\n        ) => {\n          const { injectedProvider } = await import(\"./injected/mipdStore.js\");\n          // injected wallet priority for autoConnect\n          if (id !== \"walletConnect\" && injectedProvider(id)) {\n            const { autoConnectEip1193Wallet } = await import(\n              \"./injected/index.js\"\n            );\n\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await autoConnectEip1193Wallet({\n              id: id as InjectedSupportedWalletIds,\n              provider: getInjectedProvider(id),\n              emitter,\n              chain: options.chain,\n              client: options.client,\n            });\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            unsubscribeChain = emitter.subscribe(\"chainChanged\", (newChain) => {\n              chain = newChain;\n            });\n            trackConnect({\n              client: options.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            // return account\n            return account;\n          }\n\n          if (options && \"client\" in options) {\n            const { autoConnectWC } = await import(\n              \"./wallet-connect/controller.js\"\n            );\n\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await autoConnectWC(\n              options,\n              emitter,\n              wallet.id as WCSupportedWalletIds,\n              webLocalStorage,\n              sessionHandler,\n            );\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            trackConnect({\n              client: options.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            // return account\n            return account;\n          }\n          throw new Error(\"Failed to auto connect\");\n        },\n        connect: async (options) => {\n          async function wcConnect(wcOptions: WCConnectOptions) {\n            const { connectWC } = await import(\n              \"./wallet-connect/controller.js\"\n            );\n\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await connectWC(\n              wcOptions,\n              emitter,\n              wallet.id as WCSupportedWalletIds | \"walletConnect\",\n              webLocalStorage,\n              sessionHandler,\n            );\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            trackConnect({\n              client: wcOptions.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            return account;\n          }\n\n          if (id === \"walletConnect\") {\n            const { client, chain: _chain, ...walletConnectOptions } = options;\n\n            return wcConnect({\n              client,\n              chain: _chain,\n              walletConnect: {\n                ...walletConnectOptions,\n              },\n            });\n          }\n\n          // prefer walletconnect over injected if explicitely passing walletConnect options\n          const forceWalletConnectOption =\n            options && \"walletConnect\" in options;\n\n          const { injectedProvider } = await import(\"./injected/mipdStore.js\");\n          if (injectedProvider(id) && !forceWalletConnectOption) {\n            const { connectEip1193Wallet } = await import(\n              \"./injected/index.js\"\n            );\n\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await connectEip1193Wallet({\n              id: id as InjectedSupportedWalletIds,\n              provider: getInjectedProvider(id),\n              client: options.client,\n              chain: options.chain,\n              emitter,\n            });\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            unsubscribeChain = emitter.subscribe(\"chainChanged\", (newChain) => {\n              chain = newChain;\n            });\n            trackConnect({\n              client: options.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            // return account\n            return account;\n          }\n\n          if (options && \"client\" in options) {\n            return wcConnect(options);\n          }\n          throw new Error(\"Failed to connect\");\n        },\n        // these get overridden in connect and autoConnect\n        disconnect: async () => {\n          reset();\n          await handleDisconnect();\n        },\n        switchChain: (c) => handleSwitchChain(c),\n      };\n      return wallet;\n    }\n  }\n}\n\n/**\n * Creates a wallet that allows connecting to any wallet that supports the WalletConnect protocol.\n * @returns The created smart wallet.\n * @example\n * ```ts\n * import { walletConnect } from \"thirdweb/wallets\";\n *\n * const wallet = walletConnect();\n *\n * const account = await wallet.connect({\n *  client\n * });\n * ```\n * @wallet\n */\nexport function walletConnect() {\n  return createWallet(\"walletConnect\");\n}\n"],
  "mappings": "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",
  "names": []
}
