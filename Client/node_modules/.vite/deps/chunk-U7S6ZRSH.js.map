{
  "version": 3,
  "sources": ["../../thirdweb/src/insight/get-transactions.ts"],
  "sourcesContent": ["import type {\n  GetV1WalletsByWalletAddressTransactionsData,\n  GetV1WalletsByWalletAddressTransactionsResponse,\n} from \"@thirdweb-dev/insight\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\n\nexport type Transaction = NonNullable<\n  GetV1WalletsByWalletAddressTransactionsResponse[\"data\"]\n>[number];\n\n/**\n * Get transactions for a wallet\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const transactions = await Insight.getTransactions({\n *   client,\n *   walletAddress: \"0x1234567890123456789012345678901234567890\",\n *   chains: [sepolia],\n * });\n * ```\n * @insight\n */\nexport async function getTransactions(args: {\n  client: ThirdwebClient;\n  walletAddress: string;\n  chains: Chain[];\n  queryOptions?: GetV1WalletsByWalletAddressTransactionsData[\"query\"];\n}): Promise<Transaction[]> {\n  const [\n    { getV1WalletsByWalletAddressTransactions },\n    { getThirdwebDomains },\n    { getClientFetch },\n    { assertInsightEnabled },\n    { stringify },\n  ] = await Promise.all([\n    import(\"@thirdweb-dev/insight\"),\n    import(\"../utils/domains.js\"),\n    import(\"../utils/fetch.js\"),\n    import(\"./common.js\"),\n    import(\"../utils/json.js\"),\n  ]);\n\n  await assertInsightEnabled(args.chains);\n  const threeMonthsAgoInSeconds = Math.floor(\n    (Date.now() - 3 * 30 * 24 * 60 * 60 * 1000) / 1000,\n  );\n  const { client, walletAddress, chains, queryOptions } = args;\n\n  const defaultQueryOptions: GetV1WalletsByWalletAddressTransactionsData[\"query\"] =\n    {\n      chain: chains.map((chain) => chain.id),\n      filter_block_timestamp_gte: threeMonthsAgoInSeconds,\n      limit: 100,\n    };\n\n  const result = await getV1WalletsByWalletAddressTransactions({\n    baseUrl: `https://${getThirdwebDomains().insight}`,\n    fetch: getClientFetch(client),\n    query: {\n      ...defaultQueryOptions,\n      ...queryOptions,\n    },\n    path: {\n      wallet_address: walletAddress,\n    },\n  });\n  if (result.error) {\n    throw new Error(\n      `${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`,\n    );\n  }\n  return result.data.data || [];\n}\n"],
  "mappings": ";AAyBA,eAAsB,gBAAgB,MAKrC;AACC,QAAM,CACJ,EAAE,wCAAuC,GACzC,EAAE,mBAAkB,GACpB,EAAE,eAAc,GAChB,EAAE,qBAAoB,GACtB,EAAE,UAAS,CAAE,IACX,MAAM,QAAQ,IAAI;IACpB,OAAO,wBAAuB;IAC9B,OAAO,uBAAqB;IAC5B,OAAO,qBAAmB;IAC1B,OAAO,sBAAa;IACpB,OAAO,oBAAkB;GAC1B;AAED,QAAM,qBAAqB,KAAK,MAAM;AACtC,QAAM,0BAA0B,KAAK,OAClC,KAAK,IAAG,IAAK,IAAI,KAAK,KAAK,KAAK,KAAK,OAAQ,GAAI;AAEpD,QAAM,EAAE,QAAQ,eAAe,QAAQ,aAAY,IAAK;AAExD,QAAM,sBACJ;IACE,OAAO,OAAO,IAAI,CAAC,UAAU,MAAM,EAAE;IACrC,4BAA4B;IAC5B,OAAO;;AAGX,QAAM,SAAS,MAAM,wCAAwC;IAC3D,SAAS,WAAW,mBAAkB,EAAG,OAAO;IAChD,OAAO,eAAe,MAAM;IAC5B,OAAO;MACL,GAAG;MACH,GAAG;;IAEL,MAAM;MACJ,gBAAgB;;GAEnB;AACD,MAAI,OAAO,OAAO;AAChB,UAAM,IAAI,MACR,GAAG,OAAO,SAAS,MAAM,IAAI,OAAO,SAAS,UAAU,MAAM,OAAO,QAAQ,UAAU,OAAO,KAAK,IAAI,eAAe,EAAE;EAE3H;AACA,SAAO,OAAO,KAAK,QAAQ,CAAA;AAC7B;",
  "names": []
}
