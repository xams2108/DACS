import {
  sendAndConfirmTransaction,
  sendBatchTransaction
} from "./chunk-LWHB3UTO.js";
import {
  eth_getTransactionReceipt
} from "./chunk-UNRKWXWF.js";
import "./chunk-QWTK625L.js";
import "./chunk-6HYR3QZE.js";
import "./chunk-NGHGMRK7.js";
import "./chunk-U7S6ZRSH.js";
import "./chunk-DI3CVITR.js";
import "./chunk-ZVVOIXUB.js";
import "./chunk-AQF7QQD3.js";
import "./chunk-3TGJ2UPP.js";
import "./chunk-6KK2ZA3Q.js";
import "./chunk-QEOWYB53.js";
import "./chunk-UZ6XBB6C.js";
import "./chunk-U373M5NZ.js";
import "./chunk-IOJX74IG.js";
import {
  getRpcClient
} from "./chunk-G525EIYN.js";
import "./chunk-HAADYJEF.js";
import "./chunk-DZNHJFU5.js";
import {
  randomBytesHex
} from "./chunk-PH3VXGO4.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-OC3SQ5HK.js";
import "./chunk-3VPP7LG4.js";
import "./chunk-2LSBKOGS.js";
import "./chunk-7OW24QWY.js";
import "./chunk-O2PTR6DB.js";
import "./chunk-SQPSG2HH.js";
import "./chunk-6OSAHK2J.js";
import "./chunk-MTFDOOBS.js";
import "./chunk-Q3BUNRF4.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-5UJ7PIRT.js";
import {
  LruMap
} from "./chunk-PPP72TBL.js";
import "./chunk-OS7ZSSJM.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5972/in-app-wallet-calls.js
var bundlesToTransactions = new LruMap(1e3);
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const bundleId = randomBytesHex(65);
  bundlesToTransactions.set(bundleId, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    bundlesToTransactions.set(bundleId, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(bundleId, hashes);
    }
  }
  return bundleId;
}
async function inAppWalletGetCallsStatus(args) {
  const { wallet, client, bundleId } = args;
  const chain = wallet.getChain();
  if (!chain) {
    throw new Error("Failed to get calls status, no active chain found");
  }
  const bundle = bundlesToTransactions.get(bundleId);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ client, chain });
  let status = "CONFIRMED";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "PENDING";
    return null;
  })));
  return {
    status,
    receipts: receipts.filter((r) => r !== null)
    // ts 5.5 please come we need you
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-ZDAASUZU.js.map
