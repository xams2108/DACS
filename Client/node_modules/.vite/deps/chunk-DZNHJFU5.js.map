{
  "version": 3,
  "sources": ["../../thirdweb/src/storage/mock.ts"],
  "sourcesContent": ["import { randomBytesHex } from \"../utils/random.js\";\n\nconst mockStorage = new Map<string, unknown>();\n\n/**\n * Extracts file contents from FormData and stores it as JSON\n * @returns The storage key with filename if present\n */\nexport async function addToMockStorage(value: FormData): Promise<string[]> {\n  const key = randomBytesHex();\n\n  // Get the first file from FormData\n  const files = value.getAll(\"file\") as File[];\n  if (!files) {\n    throw new Error(\"No file found in FormData\");\n  }\n\n  // Read file contents\n  return Promise.all(\n    files.map(async (file) => {\n      const text = await file.text();\n      let data: unknown;\n\n      try {\n        // Parse the contents as JSON\n        data = JSON.parse(text);\n      } catch {\n        throw new Error(\"File contents must be valid JSON\");\n      }\n\n      // If file has a name, return key/filename format\n      const filename =\n        \"name\" in file && file.name ? file.name.replace(\"files/\", \"\") : \"\";\n\n      //   console.log(\"mockStorage upload\", key, data, filename);\n\n      const hash = `${key}${filename ? `/${filename}` : \"\"}`;\n      mockStorage.set(hash, data);\n      return `ipfs://${hash}`;\n    }),\n  );\n}\n\n/**\n * Retrieves parsed JSON data from storage\n * @returns The parsed data object or undefined if not found\n */\nexport function getFromMockStorage(key: string): unknown {\n  const data = mockStorage.get(key);\n  //   console.log(\"mockStorage get\", key, data);\n  return data;\n}\n"],
  "mappings": ";;;;;AAEA,IAAM,cAAc,oBAAI,IAAG;AAM3B,eAAsB,iBAAiB,OAAe;AACpD,QAAM,MAAM,eAAc;AAG1B,QAAM,QAAQ,MAAM,OAAO,MAAM;AACjC,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MAAM,2BAA2B;EAC7C;AAGA,SAAO,QAAQ,IACb,MAAM,IAAI,OAAO,SAAQ;AACvB,UAAM,OAAO,MAAM,KAAK,KAAI;AAC5B,QAAI;AAEJ,QAAI;AAEF,aAAO,KAAK,MAAM,IAAI;IACxB,QAAQ;AACN,YAAM,IAAI,MAAM,kCAAkC;IACpD;AAGA,UAAM,WACJ,UAAU,QAAQ,KAAK,OAAO,KAAK,KAAK,QAAQ,UAAU,EAAE,IAAI;AAIlE,UAAM,OAAO,GAAG,GAAG,GAAG,WAAW,IAAI,QAAQ,KAAK,EAAE;AACpD,gBAAY,IAAI,MAAM,IAAI;AAC1B,WAAO,UAAU,IAAI;EACvB,CAAC,CAAC;AAEN;AAMM,SAAU,mBAAmB,KAAW;AAC5C,QAAM,OAAO,YAAY,IAAI,GAAG;AAEhC,SAAO;AACT;",
  "names": []
}
