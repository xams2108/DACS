{
  "version": 3,
  "sources": ["../../thirdweb/src/contract/contract.ts"],
  "sourcesContent": ["import type { Abi } from \"abitype\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport { type Address, isAddress } from \"../utils/address.js\";\n\n/**\n * @contract\n */\nexport type ContractOptions<\n  abi extends Abi = [],\n  address extends string = string,\n> = {\n  client: ThirdwebClient;\n  address: address;\n  chain: Chain;\n  readonly abi?: abi;\n};\n\n/**\n * @contract\n */\nexport type ThirdwebContract<\n  abi extends Abi = [],\n  address extends string = `0x${string}`,\n> = Readonly<ContractOptions<abi, address>>;\n\n/**\n * Creates a Thirdweb contract by combining the Thirdweb client and contract options.\n * @param options - The options for creating the contract.\n * @returns The Thirdweb contract.\n * @example\n * ```ts\n * import { createThirdwebClient, getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const contract = getContract({\n *  client,\n *  chain: sepolia,\n *  address: \"0x123...\",\n *  // optional ABI\n *  abi: [...],\n * });\n * ```\n * @contract\n */\nexport function getContract<const abi extends Abi = []>(\n  options: ContractOptions<abi>,\n): ThirdwebContract<abi, Address> {\n  if (!options.client) {\n    throw new Error(\n      `getContract validation error - invalid client: ${options.client}`,\n    );\n  }\n  if (!isAddress(options.address)) {\n    throw new Error(\n      `getContract validation error - invalid address: ${options.address}`,\n    );\n  }\n  if (!options.chain || !options.chain.id) {\n    throw new Error(\n      `getContract validation error - invalid chain: ${options.chain}`,\n    );\n  }\n  return options as ThirdwebContract<abi, Address>;\n}\n"],
  "mappings": ";;;;;AA8CM,SAAU,YACd,SAA6B;AAE7B,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MACR,kDAAkD,QAAQ,MAAM,EAAE;EAEtE;AACA,MAAI,CAAC,UAAU,QAAQ,OAAO,GAAG;AAC/B,UAAM,IAAI,MACR,mDAAmD,QAAQ,OAAO,EAAE;EAExE;AACA,MAAI,CAAC,QAAQ,SAAS,CAAC,QAAQ,MAAM,IAAI;AACvC,UAAM,IAAI,MACR,iDAAiD,QAAQ,KAAK,EAAE;EAEpE;AACA,SAAO;AACT;",
  "names": []
}
