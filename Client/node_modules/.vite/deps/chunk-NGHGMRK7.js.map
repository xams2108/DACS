{
  "version": 3,
  "sources": ["../../thirdweb/src/reactive/store.ts", "../../thirdweb/src/transaction/transaction-store.ts"],
  "sourcesContent": ["export type Store<T> = {\n  getValue(): T;\n  setValue(newValue: T): void;\n  subscribe(listener: () => void): () => void;\n};\n\n/**\n * Create a reactive value store\n * @param initialValue - The initial value to store\n * @example\n * ```ts\n * const store = createStore(0);\n * ```\n * @returns A store object\n * @internal\n */\nexport function createStore<T>(initialValue: T): Store<T> {\n  type Listener = () => void;\n  const listeners = new Set<Listener>();\n\n  let value = initialValue;\n\n  const notify = () => {\n    for (const listener of listeners) {\n      listener();\n    }\n  };\n\n  return {\n    getValue() {\n      return value;\n    },\n    setValue(newValue: T) {\n      if (newValue === value) {\n        return;\n      }\n      value = newValue;\n      notify();\n    },\n    subscribe(listener: Listener) {\n      listeners.add(listener);\n      return () => {\n        listeners.delete(listener);\n      };\n    },\n  };\n}\n", "import type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport { getTransactions } from \"../insight/get-transactions.js\";\nimport { type Store, createStore } from \"../reactive/store.js\";\nimport type { Hex } from \"../utils/encoding/hex.js\";\n\nexport type StoredTransaction = {\n  transactionHash: Hex;\n  chainId: number;\n  receipt?: {\n    status: \"success\" | \"failed\";\n    to: string;\n  };\n};\n\nconst transactionsByAddress = new Map<string, Store<StoredTransaction[]>>();\n\n/**\n * Retrieve the transaction store for a given address.\n * @param address - The address to retrieve the transaction store for.\n * @returns A store of transactions for the given account to subscribe to.\n * @transaction\n * @example\n * ```ts\n * import { getTransactionStore } from \"thirdweb/transaction\";\n *\n * const store = getTransactionStore(\"0x...\");\n * store.subscribe((transactions) => {\n *   console.log(transactions);\n * });\n * ```\n */\nexport function getTransactionStore(\n  address: string,\n): Store<StoredTransaction[]> {\n  const existingStore = transactionsByAddress.get(address);\n  if (existingStore) {\n    return existingStore;\n  }\n\n  const newStore = createStore<StoredTransaction[]>([]);\n  transactionsByAddress.set(address, newStore);\n\n  return newStore;\n}\n\n/**\n * @internal\n */\nexport function addTransactionToStore(options: {\n  address: string;\n  transactionHash: Hex;\n  chainId: number;\n}) {\n  const { address, transactionHash, chainId } = options;\n  const tranasctionStore = getTransactionStore(address);\n\n  tranasctionStore.setValue([\n    ...tranasctionStore.getValue(),\n    { transactionHash, chainId },\n  ]);\n\n  transactionsByAddress.set(address, tranasctionStore);\n}\n\n/**\n * @internal for now\n */\nexport async function getPastTransactions(options: {\n  walletAddress: string;\n  chain: Chain;\n  client: ThirdwebClient;\n}): Promise<StoredTransaction[]> {\n  const { walletAddress, chain, client } = options;\n  const oneMonthsAgoInSeconds = Math.floor(\n    (Date.now() - 1 * 30 * 24 * 60 * 60 * 1000) / 1000,\n  );\n  const result = await getTransactions({\n    client,\n    walletAddress,\n    chains: [chain],\n    queryOptions: {\n      filter_block_timestamp_gte: oneMonthsAgoInSeconds,\n      limit: 20,\n    },\n  });\n  return result.map((tx) => ({\n    transactionHash: tx.hash as Hex,\n    chainId: tx.chain_id,\n    receipt: {\n      status: tx.status === 1 ? \"success\" : \"failed\",\n      to: tx.to_address,\n    },\n  }));\n}\n"],
  "mappings": ";;;;;AAgBM,SAAU,YAAe,cAAe;AAE5C,QAAM,YAAY,oBAAI,IAAG;AAEzB,MAAI,QAAQ;AAEZ,QAAM,SAAS,MAAK;AAClB,eAAW,YAAY,WAAW;AAChC,eAAQ;IACV;EACF;AAEA,SAAO;IACL,WAAQ;AACN,aAAO;IACT;IACA,SAAS,UAAW;AAClB,UAAI,aAAa,OAAO;AACtB;MACF;AACA,cAAQ;AACR,aAAM;IACR;IACA,UAAU,UAAkB;AAC1B,gBAAU,IAAI,QAAQ;AACtB,aAAO,MAAK;AACV,kBAAU,OAAO,QAAQ;MAC3B;IACF;;AAEJ;;;AC/BA,IAAM,wBAAwB,oBAAI,IAAG;AAiB/B,SAAU,oBACd,SAAe;AAEf,QAAM,gBAAgB,sBAAsB,IAAI,OAAO;AACvD,MAAI,eAAe;AACjB,WAAO;EACT;AAEA,QAAM,WAAW,YAAiC,CAAA,CAAE;AACpD,wBAAsB,IAAI,SAAS,QAAQ;AAE3C,SAAO;AACT;AAKM,SAAU,sBAAsB,SAIrC;AACC,QAAM,EAAE,SAAS,iBAAiB,QAAO,IAAK;AAC9C,QAAM,mBAAmB,oBAAoB,OAAO;AAEpD,mBAAiB,SAAS;IACxB,GAAG,iBAAiB,SAAQ;IAC5B,EAAE,iBAAiB,QAAO;GAC3B;AAED,wBAAsB,IAAI,SAAS,gBAAgB;AACrD;AAKA,eAAsB,oBAAoB,SAIzC;AACC,QAAM,EAAE,eAAe,OAAO,OAAM,IAAK;AACzC,QAAM,wBAAwB,KAAK,OAChC,KAAK,IAAG,IAAK,IAAI,KAAK,KAAK,KAAK,KAAK,OAAQ,GAAI;AAEpD,QAAM,SAAS,MAAM,gBAAgB;IACnC;IACA;IACA,QAAQ,CAAC,KAAK;IACd,cAAc;MACZ,4BAA4B;MAC5B,OAAO;;GAEV;AACD,SAAO,OAAO,IAAI,CAAC,QAAQ;IACzB,iBAAiB,GAAG;IACpB,SAAS,GAAG;IACZ,SAAS;MACP,QAAQ,GAAG,WAAW,IAAI,YAAY;MACtC,IAAI,GAAG;;IAET;AACJ;",
  "names": []
}
