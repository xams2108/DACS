{
  "version": 3,
  "sources": ["../../ox/core/internal/entropy.ts", "../../ox/core/Secp256k1.ts", "../../thirdweb/src/transaction/actions/sign-transaction.ts", "../../thirdweb/src/wallets/in-app/core/users/getUser.ts"],
  "sourcesContent": ["export let extraEntropy = false\n\n/** @internal */\nexport function setExtraEntropy(entropy: boolean) {\n  extraEntropy = entropy\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport * as Entropy from './internal/entropy.js'\nimport type { OneOf } from './internal/types.js'\n\n/** Re-export of noble/curves secp256k1 utilities. */\nexport const noble = secp256k1\n\n/**\n * Computes the secp256k1 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey(\n  options: getPublicKey.Options,\n): PublicKey.PublicKey {\n  const { privateKey } = options\n  const point = secp256k1.ProjectivePoint.fromPrivateKey(\n    Hex.from(privateKey).slice(2),\n  )\n  return PublicKey.from(point)\n}\n\nexport declare namespace getPublicKey {\n  type Options = {\n    /**\n     * Private key to compute the public key from.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType =\n    | Hex.from.ErrorType\n    | PublicKey.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Generates a random ECDSA private key on the secp256k1 curve.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: randomPrivateKey.Options<as> = {},\n): randomPrivateKey.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const bytes = secp256k1.utils.randomPrivateKey()\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\n  return bytes as never\n}\n\nexport declare namespace randomPrivateKey {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing address from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const address = Secp256k1.recoverAddress({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered address.\n */\nexport function recoverAddress(\n  options: recoverAddress.Options,\n): recoverAddress.ReturnType {\n  return Address.fromPublicKey(recoverPublicKey(options))\n}\n\nexport declare namespace recoverAddress {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ReturnType = Address.Address\n\n  type ErrorType =\n    | Address.fromPublicKey.ErrorType\n    | recoverPublicKey.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nexport function recoverPublicKey(\n  options: recoverPublicKey.Options,\n): PublicKey.PublicKey {\n  const { payload, signature } = options\n  const { r, s, yParity } = signature\n  const signature_ = new secp256k1.Signature(\n    BigInt(r),\n    BigInt(s),\n  ).addRecoveryBit(yParity)\n  const point = signature_.recoverPublicKey(Hex.from(payload).substring(2))\n  return PublicKey.from(point)\n}\n\nexport declare namespace recoverPublicKey {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ErrorType =\n    | PublicKey.from.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nexport function sign(options: sign.Options): Signature.Signature {\n  const {\n    extraEntropy = Entropy.extraEntropy,\n    hash,\n    payload,\n    privateKey,\n  } = options\n  const { r, s, recovery } = secp256k1.sign(\n    Bytes.from(payload),\n    Bytes.from(privateKey),\n    {\n      extraEntropy:\n        typeof extraEntropy === 'boolean'\n          ? extraEntropy\n          : Hex.from(extraEntropy).slice(2),\n      lowS: true,\n      ...(hash ? { prehash: true } : {}),\n    },\n  )\n  return {\n    r,\n    s,\n    yParity: recovery,\n  }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /**\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\n     * @default true\n     */\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\n    /**\n     *  If set to `true`, the payload will be hashed (sha256) before being signed.\n     */\n    hash?: boolean | undefined\n    /**\n     * Payload to sign.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * ECDSA private key.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Bytes.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided address.\n *\n * @example\n * ### Verify with Ethereum Address\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify with Public Key\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = '0x...'\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided address.\n */\nexport function verify(options: verify.Options): boolean {\n  const { address, hash, payload, publicKey, signature } = options\n  if (address)\n    return Address.isEqual(address, recoverAddress({ payload, signature }))\n  return secp256k1.verify(\n    signature,\n    Bytes.from(payload),\n    PublicKey.toBytes(publicKey),\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n  } & OneOf<\n    | {\n        /** Address that signed the payload. */\n        address: Address.Address\n        /** Signature of the payload. */\n        signature: Signature.Signature\n      }\n    | {\n        /** Public key that signed the payload. */\n        publicKey: PublicKey.PublicKey<boolean>\n        /** Signature of the payload. */\n        signature: Signature.Signature<false>\n      }\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as ox__Hash from \"ox/Hash\";\nimport * as ox__Secp256k1 from \"ox/Secp256k1\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport {\n  type SerializableTransaction,\n  serializeTransaction,\n} from \"../serialize-transaction.js\";\n\nexport type SignTransactionOptions = {\n  transaction: SerializableTransaction;\n  privateKey: Hex;\n  // TODO: Add optional custom serializer here\n};\n\n/**\n * Signs a transaction to be sent to a node.\n * @param options The options for signing.\n * @param options.transaction - The transaction object to sign\n * @param options.privateKey - The account private key\n * @returns The signed transaction as a hex string\n * @example\n * ```ts\n * import { signTransaction } from \"thirdweb\";\n * signTransaction({\n *   transaction: {\n *     ...\n *   },\n *   privateKey: \"0x...\",\n * });\n * ```\n * @transaction\n */\nexport function signTransaction({\n  transaction,\n  privateKey,\n}: SignTransactionOptions): Hex {\n  const serializedTransaction = serializeTransaction({ transaction });\n\n  const signature = ox__Secp256k1.sign({\n    payload: ox__Hash.keccak256(serializedTransaction),\n    privateKey: privateKey,\n  });\n  return serializeTransaction({\n    transaction: { ...transaction, ...signature },\n  });\n}\n", "import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport type { OneOf, Prettify } from \"../../../../utils/type-utils.js\";\nimport type { Profile } from \"../authentication/types.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\n\nexport type GetUserResult = {\n  userId: string;\n  walletAddress: string;\n  smartAccountAddress?: string;\n  email?: string;\n  phone?: string;\n  createdAt: string;\n  profiles: Profile[];\n};\n\n/**\n * Gets user based on the provided query parameters.\n *  This function is only available on the server (a secret key is required in the client).\n *\n * @param options - The options for the get user function.\n * @param options.client - The Thirdweb client with a secret key included.\n * @param [options.walletAddress] - The wallet address generated by thirdweb to query by.\n * @param [options.email] - The email to query by.\n * @param [options.phone] - The phone number to query by.\n * @param [options.id] - The user ID to query by.\n * @param [options.externalWalletAddress] - The linked external wallet address to query by.\n *\n * @returns A user object or null if not found.\n *\n * @example\n * import { getUser } from \"thirdweb/wallets\";\n *\n * const user = await getUser({\n *   client,\n *   walletAddress: \"0x123...\",\n * });\n *\n * @wallet\n */\nexport async function getUser({\n  client,\n  walletAddress,\n  email,\n  phone,\n  id,\n  externalWalletAddress,\n  ecosystem,\n}: Prettify<\n  {\n    client: ThirdwebClient;\n    ecosystem?: Ecosystem;\n  } & OneOf<{\n    walletAddress?: string;\n    email?: string;\n    phone?: string;\n    id?: string;\n    externalWalletAddress?: string;\n  }>\n>): Promise<GetUserResult | null> {\n  if (!client.secretKey) {\n    throw new Error(\n      \"A secret key is required to query for users. If you're making this request from the server, please add a secret key to your client.\",\n    );\n  }\n\n  const url = new URL(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2023-11-30/embedded-wallet/user-details`,\n  );\n\n  if (walletAddress) {\n    url.searchParams.set(\"queryBy\", \"walletAddress\");\n    url.searchParams.set(\"walletAddress\", walletAddress);\n  } else if (email) {\n    url.searchParams.set(\"queryBy\", \"email\");\n    url.searchParams.set(\"email\", email);\n  } else if (phone) {\n    url.searchParams.set(\"queryBy\", \"phone\");\n    url.searchParams.set(\"phone\", phone);\n  } else if (id) {\n    url.searchParams.set(\"queryBy\", \"id\");\n    url.searchParams.set(\"id\", id);\n  } else if (externalWalletAddress) {\n    url.searchParams.set(\"queryBy\", \"externalWalletAddress\");\n    url.searchParams.set(\"externalWalletAddress\", externalWalletAddress);\n  } else {\n    throw new Error(\n      \"Please provide a walletAddress, email, phone, id, or externalWalletAddress to query for users.\",\n    );\n  }\n\n  const clientFetch = getClientFetch(client, ecosystem);\n\n  const res = await clientFetch(url.toString());\n\n  if (!res.ok) {\n    const error = await res.text().catch(() => \"Unknown error\");\n    throw new Error(\n      `Failed to get profiles. ${res.status} ${res.statusText}: ${error}`,\n    );\n  }\n\n  const data = (await res.json()) as {\n    userId: string;\n    walletAddress: string;\n    smartAccountAddress?: string;\n    email?: string;\n    phone?: string;\n    createdAt: string;\n    linkedAccounts: Profile[];\n  }[];\n\n  return (\n    data.map((item) => ({\n      userId: item.userId,\n      walletAddress: item.walletAddress,\n      smartAccountAddress: item.smartAccountAddress,\n      email: item.email,\n      phone: item.phone,\n      createdAt: item.createdAt,\n      profiles: item.linkedAccounts.map((profile) => {\n        return {\n          type: (profile.type as string) === \"siwe\" ? \"wallet\" : profile.type,\n          details: profile.details,\n        };\n      }),\n    }))[0] || null\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAO,IAAI,eAAe;;;AC+DpB,SAAU,iBACd,UAAwC,CAAA,GAAE;AAE1C,QAAM,EAAE,KAAK,MAAK,IAAK;AACvB,QAAM,QAAQ,UAAU,MAAM,iBAAgB;AAC9C,MAAI,OAAO;AAAO,WAAW,UAAU,KAAK;AAC5C,SAAO;AACT;AAuHM,SAAU,KAAK,SAAqB;AACxC,QAAM,EACJ,cAAAA,gBAAuB,cACvB,MACA,SACA,WAAU,IACR;AACJ,QAAM,EAAE,GAAG,GAAG,SAAQ,IAAK,UAAU,KAC7B,KAAK,OAAO,GACZ,KAAK,UAAU,GACrB;IACE,cACE,OAAOA,kBAAiB,YACpBA,gBACIC,MAAKD,aAAY,EAAE,MAAM,CAAC;IACpC,MAAM;IACN,GAAI,OAAO,EAAE,SAAS,KAAI,IAAK,CAAA;GAChC;AAEH,SAAO;IACL;IACA;IACA,SAAS;;AAEb;;;ACrLM,SAAU,gBAAgB,EAC9B,aACA,WAAU,GACa;AACvB,QAAM,wBAAwB,qBAAqB,EAAE,YAAW,CAAE;AAElE,QAAM,YAA0B,KAAK;IACnC,SAAkB,UAAU,qBAAqB;IACjD;GACD;AACD,SAAO,qBAAqB;IAC1B,aAAa,EAAE,GAAG,aAAa,GAAG,UAAS;GAC5C;AACH;;;ACJA,eAAsB,QAAQ,EAC5B,QACA,eACA,OACA,OACA,IACA,uBACA,UAAS,GAYV;AACC,MAAI,CAAC,OAAO,WAAW;AACrB,UAAM,IAAI,MACR,qIAAqI;EAEzI;AAEA,QAAM,MAAM,IAAI,IACd,GAAG,mBAAmB,aAAa,CAAC,8CAA8C;AAGpF,MAAI,eAAe;AACjB,QAAI,aAAa,IAAI,WAAW,eAAe;AAC/C,QAAI,aAAa,IAAI,iBAAiB,aAAa;EACrD,WAAW,OAAO;AAChB,QAAI,aAAa,IAAI,WAAW,OAAO;AACvC,QAAI,aAAa,IAAI,SAAS,KAAK;EACrC,WAAW,OAAO;AAChB,QAAI,aAAa,IAAI,WAAW,OAAO;AACvC,QAAI,aAAa,IAAI,SAAS,KAAK;EACrC,WAAW,IAAI;AACb,QAAI,aAAa,IAAI,WAAW,IAAI;AACpC,QAAI,aAAa,IAAI,MAAM,EAAE;EAC/B,WAAW,uBAAuB;AAChC,QAAI,aAAa,IAAI,WAAW,uBAAuB;AACvD,QAAI,aAAa,IAAI,yBAAyB,qBAAqB;EACrE,OAAO;AACL,UAAM,IAAI,MACR,gGAAgG;EAEpG;AAEA,QAAM,cAAc,eAAe,QAAQ,SAAS;AAEpD,QAAM,MAAM,MAAM,YAAY,IAAI,SAAQ,CAAE;AAE5C,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,QAAQ,MAAM,IAAI,KAAI,EAAG,MAAM,MAAM,eAAe;AAC1D,UAAM,IAAI,MACR,2BAA2B,IAAI,MAAM,IAAI,IAAI,UAAU,KAAK,KAAK,EAAE;EAEvE;AAEA,QAAM,OAAQ,MAAM,IAAI,KAAI;AAU5B,SACE,KAAK,IAAI,CAAC,UAAU;IAClB,QAAQ,KAAK;IACb,eAAe,KAAK;IACpB,qBAAqB,KAAK;IAC1B,OAAO,KAAK;IACZ,OAAO,KAAK;IACZ,WAAW,KAAK;IAChB,UAAU,KAAK,eAAe,IAAI,CAAC,YAAW;AAC5C,aAAO;QACL,MAAO,QAAQ,SAAoB,SAAS,WAAW,QAAQ;QAC/D,SAAS,QAAQ;;IAErB,CAAC;IACD,EAAE,CAAC,KAAK;AAEd;",
  "names": ["extraEntropy", "from"]
}
