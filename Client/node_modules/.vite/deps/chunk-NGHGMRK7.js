import {
  getTransactions
} from "./chunk-U7S6ZRSH.js";

// node_modules/thirdweb/dist/esm/reactive/store.js
function createStore(initialValue) {
  const listeners = /* @__PURE__ */ new Set();
  let value = initialValue;
  const notify = () => {
    for (const listener of listeners) {
      listener();
    }
  };
  return {
    getValue() {
      return value;
    },
    setValue(newValue) {
      if (newValue === value) {
        return;
      }
      value = newValue;
      notify();
    },
    subscribe(listener) {
      listeners.add(listener);
      return () => {
        listeners.delete(listener);
      };
    }
  };
}

// node_modules/thirdweb/dist/esm/transaction/transaction-store.js
var transactionsByAddress = /* @__PURE__ */ new Map();
function getTransactionStore(address) {
  const existingStore = transactionsByAddress.get(address);
  if (existingStore) {
    return existingStore;
  }
  const newStore = createStore([]);
  transactionsByAddress.set(address, newStore);
  return newStore;
}
function addTransactionToStore(options) {
  const { address, transactionHash, chainId } = options;
  const tranasctionStore = getTransactionStore(address);
  tranasctionStore.setValue([
    ...tranasctionStore.getValue(),
    { transactionHash, chainId }
  ]);
  transactionsByAddress.set(address, tranasctionStore);
}
async function getPastTransactions(options) {
  const { walletAddress, chain, client } = options;
  const oneMonthsAgoInSeconds = Math.floor((Date.now() - 1 * 30 * 24 * 60 * 60 * 1e3) / 1e3);
  const result = await getTransactions({
    client,
    walletAddress,
    chains: [chain],
    queryOptions: {
      filter_block_timestamp_gte: oneMonthsAgoInSeconds,
      limit: 20
    }
  });
  return result.map((tx) => ({
    transactionHash: tx.hash,
    chainId: tx.chain_id,
    receipt: {
      status: tx.status === 1 ? "success" : "failed",
      to: tx.to_address
    }
  }));
}

export {
  createStore,
  getTransactionStore,
  addTransactionToStore,
  getPastTransactions
};
//# sourceMappingURL=chunk-NGHGMRK7.js.map
