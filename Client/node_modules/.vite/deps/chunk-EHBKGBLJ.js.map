{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc721/__generated__/IERC721A/read/tokenURI.ts", "../../thirdweb/src/extensions/erc721/__generated__/IERC721Enumerable/read/tokenByIndex.ts", "../../thirdweb/src/extensions/erc721/read/getNFT.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"tokenURI\" function.\n */\nexport type TokenURIParams = {\n  tokenId: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_tokenId\" }>;\n};\n\nexport const FN_SELECTOR = \"0xc87b56dd\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"_tokenId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `tokenURI` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `tokenURI` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isTokenURISupported } from \"thirdweb/extensions/erc721\";\n * const supported = isTokenURISupported([\"0x...\"]);\n * ```\n */\nexport function isTokenURISupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"tokenURI\" function.\n * @param options - The options for the tokenURI function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenURIParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenURIParams({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeTokenURIParams(options: TokenURIParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.tokenId]);\n}\n\n/**\n * Encodes the \"tokenURI\" function into a Hex string with its parameters.\n * @param options - The options for the tokenURI function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenURI } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenURI({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeTokenURI(options: TokenURIParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTokenURIParams(options).slice(2)) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the tokenURI function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeTokenURIResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeTokenURIResultResult(\"...\");\n * ```\n */\nexport function decodeTokenURIResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"tokenURI\" function on the contract.\n * @param options - The options for the tokenURI function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { tokenURI } from \"thirdweb/extensions/erc721\";\n *\n * const result = await tokenURI({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nexport async function tokenURI(\n  options: BaseTransactionOptions<TokenURIParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.tokenId],\n  });\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"tokenByIndex\" function.\n */\nexport type TokenByIndexParams = {\n  index: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_index\" }>;\n};\n\nexport const FN_SELECTOR = \"0x4f6ccce7\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"_index\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `tokenByIndex` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `tokenByIndex` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isTokenByIndexSupported } from \"thirdweb/extensions/erc721\";\n * const supported = isTokenByIndexSupported([\"0x...\"]);\n * ```\n */\nexport function isTokenByIndexSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"tokenByIndex\" function.\n * @param options - The options for the tokenByIndex function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenByIndexParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenByIndexParams({\n *  index: ...,\n * });\n * ```\n */\nexport function encodeTokenByIndexParams(options: TokenByIndexParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.index]);\n}\n\n/**\n * Encodes the \"tokenByIndex\" function into a Hex string with its parameters.\n * @param options - The options for the tokenByIndex function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenByIndex } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenByIndex({\n *  index: ...,\n * });\n * ```\n */\nexport function encodeTokenByIndex(options: TokenByIndexParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTokenByIndexParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the tokenByIndex function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeTokenByIndexResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeTokenByIndexResultResult(\"...\");\n * ```\n */\nexport function decodeTokenByIndexResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"tokenByIndex\" function on the contract.\n * @param options - The options for the tokenByIndex function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { tokenByIndex } from \"thirdweb/extensions/erc721\";\n *\n * const result = await tokenByIndex({\n *  contract,\n *  index: ...,\n * });\n *\n * ```\n */\nexport async function tokenByIndex(\n  options: BaseTransactionOptions<TokenByIndexParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.index],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { fetchTokenMetadata } from \"../../../utils/nft/fetchTokenMetadata.js\";\nimport { type NFT, parseNFT } from \"../../../utils/nft/parseNft.js\";\nimport type { Prettify } from \"../../../utils/type-utils.js\";\nimport {\n  type TokenURIParams,\n  tokenURI,\n} from \"../__generated__/IERC721A/read/tokenURI.js\";\nimport { tokenByIndex } from \"../__generated__/IERC721Enumerable/read/tokenByIndex.js\";\nexport { isTokenURISupported as isGetNFTSupported } from \"../__generated__/IERC721A/read/tokenURI.js\";\nimport { getNFT as getNFTInsight } from \"../../../insight/index.js\";\n\n/**\n * Parameters for getting an NFT.\n * @extension ERC721\n */\nexport type GetNFTParams = Prettify<\n  TokenURIParams & {\n    /**\n     * Whether to include the owner of the NFT.\n     */\n    includeOwner?: boolean;\n    /**\n     * Whether to check and fetch tokenID by index, in case of non-sequential IDs.\n     *\n     * It should be set to true if it's an ERC721Enumerable contract, and has `tokenByIndex` function.\n     * In this case, the provided tokenId will be considered as token-index and actual tokenId will be fetched from the contract.\n     */\n    tokenByIndex?: boolean;\n    /**\n     * Whether to use the insight API to fetch the NFT.\n     * @default true\n     */\n    useIndexer?: boolean;\n  }\n>;\n\n/**\n * Retrieves information about a specific ERC721 non-fungible token (NFT).\n * @param options - The options for retrieving the NFT.\n * @returns A promise that resolves to the NFT object.\n * @extension ERC721\n * @example\n * ```ts\n * import { getNFT } from \"thirdweb/extensions/erc721\";\n * const nft = await getNFT({\n *  contract,\n *  tokenId: 1n,\n * });\n * ```\n *\n * * @example\n * ```ts\n * import { getNFT } from \"thirdweb/extensions/erc721\";\n *\n *\n * const nft = await getNFT({\n *  contract,\n *  tokenId: 1n,\n *  tokenByIndex: true // use this flag if the contract supports `tokenByIndex` and the above tokenId should be treated as an index.\n * });\n * ```\n */\nexport async function getNFT(\n  options: BaseTransactionOptions<GetNFTParams>,\n): Promise<NFT> {\n  const { useIndexer = true } = options;\n  if (useIndexer) {\n    try {\n      return await getNFTFromInsight(options);\n    } catch {\n      return await getNFTFromRPC(options);\n    }\n  }\n  return await getNFTFromRPC(options);\n}\n\nasync function getNFTFromInsight(\n  options: BaseTransactionOptions<GetNFTParams>,\n): Promise<NFT> {\n  const nft = await getNFTInsight({\n    client: options.contract.client,\n    chain: options.contract.chain,\n    contractAddress: options.contract.address,\n    tokenId: options.tokenId,\n    includeOwners: options.includeOwner,\n  });\n  if (!nft) {\n    // fresh contracts might be delayed in indexing, so we fallback to RPC\n    return getNFTFromRPC(options);\n  }\n  return nft;\n}\n\nasync function getNFTFromRPC(\n  options: BaseTransactionOptions<GetNFTParams>,\n): Promise<NFT> {\n  let tokenId = options.tokenId;\n  if (options.tokenByIndex) {\n    try {\n      tokenId = await tokenByIndex({\n        contract: options.contract,\n        index: options.tokenId,\n      });\n    } catch {}\n  }\n\n  const [uri, owner] = await Promise.all([\n    tokenURI({ contract: options.contract, tokenId }).catch(() => null),\n    options.includeOwner\n      ? import(\"../__generated__/IERC721A/read/ownerOf.js\")\n          .then((m) => m.ownerOf({ contract: options.contract, tokenId }))\n          .catch(() => null)\n      : null,\n  ]);\n\n  if (!uri?.trim()) {\n    return parseNFT(\n      {\n        id: tokenId,\n        type: \"ERC721\",\n        uri: \"\",\n      },\n      {\n        tokenId,\n        tokenUri: \"\",\n        type: \"ERC721\",\n        owner,\n        tokenAddress: options.contract.address,\n        chainId: options.contract.chain.id,\n      },\n    );\n  }\n\n  return parseNFT(\n    await fetchTokenMetadata({\n      client: options.contract.client,\n      tokenId,\n      tokenUri: uri,\n    }).catch(() => ({\n      id: tokenId,\n      type: \"ERC721\",\n      uri,\n    })),\n    {\n      tokenId: tokenId,\n      tokenUri: uri,\n      type: \"ERC721\",\n      owner,\n      tokenAddress: options.contract.address,\n      chainId: options.contract.chain.id,\n    },\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAeO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAeJ,SAAU,oBAAoB,oBAA4B;AAC9D,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AAsEA,eAAsB,SACpB,SAA+C;AAE/C,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO;GACzB;AACH;;;AC3GO,IAAMA,eAAc;AAC3B,IAAMC,aAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAMC,cAAa;EACjB;IACE,MAAM;;;AA4FV,eAAsB,aACpB,SAAmD;AAEnD,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAACC,cAAaC,YAAWC,WAAU;IAC3C,QAAQ,CAAC,QAAQ,KAAK;GACvB;AACH;;;AC7DA,eAAsBC,QACpB,SAA6C;AAE7C,QAAM,EAAE,aAAa,KAAI,IAAK;AAC9B,MAAI,YAAY;AACd,QAAI;AACF,aAAO,MAAM,kBAAkB,OAAO;IACxC,QAAQ;AACN,aAAO,MAAM,cAAc,OAAO;IACpC;EACF;AACA,SAAO,MAAM,cAAc,OAAO;AACpC;AAEA,eAAe,kBACb,SAA6C;AAE7C,QAAM,MAAM,MAAM,OAAc;IAC9B,QAAQ,QAAQ,SAAS;IACzB,OAAO,QAAQ,SAAS;IACxB,iBAAiB,QAAQ,SAAS;IAClC,SAAS,QAAQ;IACjB,eAAe,QAAQ;GACxB;AACD,MAAI,CAAC,KAAK;AAER,WAAO,cAAc,OAAO;EAC9B;AACA,SAAO;AACT;AAEA,eAAe,cACb,SAA6C;AAE7C,MAAI,UAAU,QAAQ;AACtB,MAAI,QAAQ,cAAc;AACxB,QAAI;AACF,gBAAU,MAAM,aAAa;QAC3B,UAAU,QAAQ;QAClB,OAAO,QAAQ;OAChB;IACH,QAAQ;IAAC;EACX;AAEA,QAAM,CAAC,KAAK,KAAK,IAAI,MAAM,QAAQ,IAAI;IACrC,SAAS,EAAE,UAAU,QAAQ,UAAU,QAAO,CAAE,EAAE,MAAM,MAAM,IAAI;IAClE,QAAQ,eACJ,OAAO,uBAA2C,EAC/C,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,QAAQ,UAAU,QAAO,CAAE,CAAC,EAC9D,MAAM,MAAM,IAAI,IACnB;GACL;AAED,MAAI,EAAC,2BAAK,SAAQ;AAChB,WAAO,SACL;MACE,IAAI;MACJ,MAAM;MACN,KAAK;OAEP;MACE;MACA,UAAU;MACV,MAAM;MACN;MACA,cAAc,QAAQ,SAAS;MAC/B,SAAS,QAAQ,SAAS,MAAM;KACjC;EAEL;AAEA,SAAO,SACL,MAAM,mBAAmB;IACvB,QAAQ,QAAQ,SAAS;IACzB;IACA,UAAU;GACX,EAAE,MAAM,OAAO;IACd,IAAI;IACJ,MAAM;IACN;IACA,GACF;IACE;IACA,UAAU;IACV,MAAM;IACN;IACA,cAAc,QAAQ,SAAS;IAC/B,SAAS,QAAQ,SAAS,MAAM;GACjC;AAEL;",
  "names": ["FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "getNFT"]
}
